name: HumanEval_4_mean_absolute_deviation
language: ruby
results:
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsm50fa4c\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a1efee2550>\n/tmp/tmpsm50fa4c.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpsm50fa4c.rb:17:in `call'\n/tmp/tmpsm50fa4c.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004092375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.36 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs }\n\
    \  mean(abs_diff)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_hwsa62r\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005592ffdef570>\n/tmp/tmp_hwsa62r.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp_hwsa62r.rb:18:in `call'\n/tmp/tmp_hwsa62r.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.003974754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp966cm1z1\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562d16a077f8>\n/tmp/tmp966cm1z1.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp966cm1z1.rb:16:in `call'\n/tmp/tmp966cm1z1.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004075072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method.\n  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0gbxynli\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561f62e8b368>\n/tmp/tmp0gbxynli.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp0gbxynli.rb:17:in `call'\n/tmp/tmp0gbxynli.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004489742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.73 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8hyw4gvf\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055739a85e7c0>\n/tmp/tmp8hyw4gvf.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp8hyw4gvf.rb:17:in `call'\n/tmp/tmp8hyw4gvf.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00406834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxveaqwwg\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055eb4414ef30>\n/tmp/tmpxveaqwwg.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpxveaqwwg.rb:17:in `call'\n/tmp/tmpxveaqwwg.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004111783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.20 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjqrz5_66\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557c443232a8>\n/tmp/tmpjqrz5_66.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpjqrz5_66.rb:17:in `call'\n/tmp/tmpjqrz5_66.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00413807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.66 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: Use the mean and standard_deviation methods you already wrote\n\
    \  #       in the previous exercises\n  mean = mean(numbers)\n  standard_deviation(numbers,\
    \ mean)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8a6jsh32\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564e8267b250>\n/tmp/tmp8a6jsh32.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmp8a6jsh32.rb:19:in `call'\n/tmp/tmp8a6jsh32.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004197021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.26 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs\
    \ }\n  mean(abs_diff)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8igoj_o6\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055bd7b907548>\n/tmp/tmp8igoj_o6.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp8igoj_o6.rb:18:in `call'\n/tmp/tmp8igoj_o6.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004035178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.82 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp8g0s8m_\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e8b95936f0>\n/tmp/tmpp8g0s8m_.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpp8g0s8m_.rb:17:in `call'\n/tmp/tmpp8g0s8m_.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00555257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp71whzkw9\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000556a79237970>\n/tmp/tmp71whzkw9.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp71whzkw9.rb:17:in `call'\n/tmp/tmp71whzkw9.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004397749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39194bi9\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561b1094f800>\n/tmp/tmp39194bi9.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp39194bi9.rb:16:in `call'\n/tmp/tmp39194bi9.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.00603612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.67 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ac3n4y8\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005598825c3698>\n/tmp/tmp5ac3n4y8.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp5ac3n4y8.rb:17:in `call'\n/tmp/tmp5ac3n4y8.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004771602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the built-in method `abs` to get the absolute\
    \ value\n  # of a number.\n  # Hint: You can use the built-in method `sum` to\
    \ get the sum of an array\n  # of numbers.\n  # Hint: You can use the built-in\
    \ method `length` to get the length of an\n  # array.\n  # Hint: You can use the\
    \ built-in method `map` to apply a function to each\n  # element of an array.\n\
    \  # Hint: You can use the built-in method `reduce` to combine the elements\n\
    \  # of an array.\n  # Hint: You can use the built-in method `zip` to combine\
    \ two arrays.\n  # Hint: You can use the built-in method `each_with_index` to\
    \ get the index\n  # of each element of an array.\n  # Hint: You can use the built-in\
    \ method `each_with_object` to create an\n  # object from an array.\n  # Hint:\
    \ You can use the built-in method `each_with_object` to create an\n  # object\
    \ from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built-in\
    \ method `each_with_object` to create an\n  # object from an array.\n  # Hint:\
    \ You can use the built-in method `each_with_object` to create an\n  # object\
    \ from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built-in\
    \ method `each_with_object` to create an\n  # object from an array.\n  # Hint:\
    \ You can use the built-in method `each_with_object` to create an\n  # object\
    \ from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmputpbh_i3.rb:43: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmputpbh_i3.rb:50: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  # Hint: You can use the 'mean' and 'absolute_deviation' functions\n  #    \
    \   defined above.\n  mean = mean(numbers)\n  absolute_deviations = absolute_deviation(numbers,\
    \ mean)\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfgsapnr\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005616c99ff098>\n/tmp/tmpqfgsapnr.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpqfgsapnr.rb:20:in `call'\n/tmp/tmpqfgsapnr.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.005135065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map! { |num| (num - mean).abs }\n  mean(numbers)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl7hju7sh\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005610a3b639d8>\n/tmp/tmpl7hju7sh.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpl7hju7sh.rb:18:in `call'\n/tmp/tmpl7hju7sh.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004168789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.88 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu9pnafjw\nStarted\n.\nFinished in 0.000357401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2797.98 tests/s, 8393.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppieg6s7e\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056185bb3b2c0>\n/tmp/tmppieg6s7e.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmppieg6s7e.rb:20:in `call'\n/tmp/tmppieg6s7e.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004223772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo6db4foa\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpo6db4foa.rb:15:in\
    \ `test_mean_absolute_deviation'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_mean_absolute_deviation\n     14:     candidate = method(:mean_absolute_deviation)\n\
    \  => 15:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     16:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     17:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     18:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005108345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.76 tests/s, 195.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ve0170v\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055685e95f850>\n/tmp/tmp1ve0170v.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp1ve0170v.rb:17:in `call'\n/tmp/tmp1ve0170v.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004155784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjsr5i0nb\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563632d072a8>\n/tmp/tmpjsr5i0nb.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpjsr5i0nb.rb:17:in `call'\n/tmp/tmpjsr5i0nb.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.006143581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqjib9u9e\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpqjib9u9e.rb:15:in\
    \ `test_mean_absolute_deviation'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_mean_absolute_deviation\n     14:     candidate = method(:mean_absolute_deviation)\n\
    \  => 15:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     16:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     17:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     18:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007300176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.98 tests/s, 136.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0skmipqe\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000559985cdf388>\n/tmp/tmp0skmipqe.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp0skmipqe.rb:17:in `call'\n/tmp/tmp0skmipqe.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004379064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.36 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2atph5_s\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055987e557988>\n/tmp/tmp2atph5_s.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp2atph5_s.rb:17:in `call'\n/tmp/tmp2atph5_s.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00524347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'mean' method from the previous exercise\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk0vdsgzt\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055c0b72b30e0>\n/tmp/tmpk0vdsgzt.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpk0vdsgzt.rb:18:in `call'\n/tmp/tmpk0vdsgzt.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004138461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.64 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxx_qf82w\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f5a73fb310>\n/tmp/tmpxx_qf82w.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpxx_qf82w.rb:20:in `call'\n/tmp/tmpxx_qf82w.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004170432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuno5vd_j\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000555bae7b2528>\n/tmp/tmpuno5vd_j.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpuno5vd_j.rb:17:in `call'\n/tmp/tmpuno5vd_j.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004138813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.62 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp58z5up9x\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055fe0b57b660>\n/tmp/tmp58z5up9x.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp58z5up9x.rb:16:in `call'\n/tmp/tmp58z5up9x.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004386328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.98 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the mean() method from the previous exercise\n\
    \  #       to calculate the mean of a list of numbers\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpim2ac4_t\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056456883b180>\n/tmp/tmpim2ac4_t.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpim2ac4_t.rb:19:in `call'\n/tmp/tmpim2ac4_t.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004208202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  abs_diffs = numbers.map { |n| (n - mean).abs }\n  mean(abs_diffs)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6tcyx1k5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056055e1b32a8>\n/tmp/tmp6tcyx1k5.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp6tcyx1k5.rb:17:in `call'\n/tmp/tmp6tcyx1k5.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004038784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5d_m0t49\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005649f96d3348>\n/tmp/tmp5d_m0t49.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp5d_m0t49.rb:17:in `call'\n/tmp/tmp5d_m0t49.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.005517595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33q23ykp\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055dec561e528>\n/tmp/tmp33q23ykp.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp33q23ykp.rb:17:in `call'\n/tmp/tmp33q23ykp.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004024077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ivhbpmt\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564bd1f73078>\n/tmp/tmp5ivhbpmt.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp5ivhbpmt.rb:17:in `call'\n/tmp/tmp5ivhbpmt.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004065634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4keiaohx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055b76318b698>\n/tmp/tmp4keiaohx.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp4keiaohx.rb:17:in `call'\n/tmp/tmp4keiaohx.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00407909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmj8c__g0\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005628866074a8>\n/tmp/tmpmj8c__g0.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpmj8c__g0.rb:20:in `call'\n/tmp/tmpmj8c__g0.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004115038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpksuxi9b1\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005608857132f0>\n/tmp/tmpksuxi9b1.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpksuxi9b1.rb:17:in `call'\n/tmp/tmpksuxi9b1.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004123252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ function\n  # Hint: use the mean function you just wrote\n  # Hint: use the\
    \ absolute_value function you just wrote\n  mean = mean(numbers)\n  sum = 0\n\
    \  numbers.each do |number|\n    sum += absolute_value(number - mean)\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnn62f9uz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055ad0ad1b318>\n/tmp/tmpnn62f9uz.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpnn62f9uz.rb:23:in `call'\n/tmp/tmpnn62f9uz.rb:23:in `test_mean_absolute_deviation'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_mean_absolute_deviation\n\
    \     22:     candidate = method(:mean_absolute_deviation)\n  => 23:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     24:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     25:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     26:   end\n===============================================================================\n\
    \nFinished in 0.004853385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.04 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj03wk6_0\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557d51b5f760>\n/tmp/tmpj03wk6_0.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpj03wk6_0.rb:20:in `call'\n/tmp/tmpj03wk6_0.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004113946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.08 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprnc_hxtz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000556668d0b690>\n/tmp/tmprnc_hxtz.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmprnc_hxtz.rb:16:in `call'\n/tmp/tmprnc_hxtz.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004330663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.91 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzd54vpu7\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563a29b835a8>\n/tmp/tmpzd54vpu7.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpzd54vpu7.rb:17:in `call'\n/tmp/tmpzd54vpu7.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004259558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the mean and absolute_deviation methods you defined\n\
    \  # earlier.\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ absolute_deviation(number, mean) }\n  mean(absolute_deviations)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpct5f354j\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557f41dde670>\n/tmp/tmpct5f354j.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpct5f354j.rb:20:in `call'\n/tmp/tmpct5f354j.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004041569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxkfi6_xm\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055d288f0f248>\n/tmp/tmpxkfi6_xm.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpxkfi6_xm.rb:17:in `call'\n/tmp/tmpxkfi6_xm.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.005292611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpammgyv0e\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557fb672b6f0>\n/tmp/tmpammgyv0e.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpammgyv0e.rb:17:in `call'\n/tmp/tmpammgyv0e.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004431321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.67 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |num|\
    \ (num - mean).abs }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf3_7nvld\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000558c5e42f438>\n/tmp/tmpf3_7nvld.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpf3_7nvld.rb:18:in `call'\n/tmp/tmpf3_7nvld.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004396447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpud82ivjh\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055d00f04f760>\n/tmp/tmpud82ivjh.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpud82ivjh.rb:18:in `call'\n/tmp/tmpud82ivjh.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004888091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.58 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbwnhvals\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055b42fa7f880>\n/tmp/tmpbwnhvals.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpbwnhvals.rb:17:in `call'\n/tmp/tmpbwnhvals.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004086022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |num| (num - mean).abs\
    \ }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnq9vz_4o\nStarted\n.\nFinished in 0.000304342 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3285.78 tests/s, 9857.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4hzia5f4\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005582690c3690>\n/tmp/tmp4hzia5f4.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp4hzia5f4.rb:16:in `call'\n/tmp/tmp4hzia5f4.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004523666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmn5xm8am\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000556b21efb5f0>\n/tmp/tmpmn5xm8am.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpmn5xm8am.rb:17:in `call'\n/tmp/tmpmn5xm8am.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00445176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1od5h7ax\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056463625b3b8>\n/tmp/tmp1od5h7ax.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp1od5h7ax.rb:18:in `call'\n/tmp/tmp1od5h7ax.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004507605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # raise NotImplementedError.new\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqao5ex4\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055727574afa8>\n/tmp/tmpuqao5ex4.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpuqao5ex4.rb:19:in `call'\n/tmp/tmpuqao5ex4.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004392579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.66 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqsn242ma\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557344843278>\n/tmp/tmpqsn242ma.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpqsn242ma.rb:17:in `call'\n/tmp/tmpqsn242ma.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004077046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.mean\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ov6p7da\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a7bfa93258>\n/tmp/tmp0ov6p7da.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp0ov6p7da.rb:16:in `call'\n/tmp/tmp0ov6p7da.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004089499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpipfatcd5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f9bcd1b670>\n/tmp/tmpipfatcd5.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpipfatcd5.rb:17:in `call'\n/tmp/tmpipfatcd5.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004102814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6zocevbk\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055c0eeddb670>\n/tmp/tmp6zocevbk.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp6zocevbk.rb:17:in `call'\n/tmp/tmp6zocevbk.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00418039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbbsfrt6f\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f4802a3710>\n/tmp/tmpbbsfrt6f.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpbbsfrt6f.rb:16:in `call'\n/tmp/tmpbbsfrt6f.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.00419093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.61 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the absolute_value method from above\n  #    \
    \   to get the absolute value of a number\n  # Hint: You can use the mean method\
    \ from above\n  #       to get the mean of a list of numbers\n  # Hint: You can\
    \ use the map method from above\n  #       to apply a function to each element\
    \ of a list\n  # Hint: You can use the reduce method from above\n  #       to\
    \ combine all the elements of a list\n  # Hint: You can use the enumerate method\
    \ from above\n  #       to get the index of each element of a list\n  # Hint:\
    \ You can use the zip method from above\n  #       to combine two lists\n  # Hint:\
    \ You can use the sum method from above\n  #       to sum all the elements of\
    \ a list\n  # Hint: You can use the length method from above\n  #       to get\
    \ the length of a list\n  # Hint: You can use the range method from above\n  #\
    \       to get a list of numbers\n  # Hint: You can use the abs method from the\
    \ Math module\n  #       to get the absolute value of a number\n  # Hint: You\
    \ can use the sqrt method from the Math module\n  #       to get the square root\
    \ of a number\n  # Hint: You can use the floor method from the Math module\n \
    \ #       to round a number down\n  # Hint: You can use the ceil method from the\
    \ Math module\n  #       to round a number up\n  # Hint: You can use the rand\
    \ method from the Random module\n  #       to get a random number\n  # Hint: You\
    \ can use the sample method from the Random module\n  #       to get a random\
    \ element from a list\n  # Hint: You can use the shuffle method from the Random\
    \ module\n  #       to shuffle a list\n  # Hint: You can use the choice method\
    \ from the Random module\n  #       to get a random element from a list\n  # Hint:\
    \ You can use the uniform method from the Random module\n  #       to get a random\
    \ number between two numbers\n  # Hint: You can use the triangular method from\
    \ the Random module\n  #       to get a random number between two\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpipm8wazm.rb:49: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpipm8wazm.rb:56: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  abs_diff = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkw8j7wkz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564dd409b5c8>\n/tmp/tmpkw8j7wkz.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpkw8j7wkz.rb:17:in `call'\n/tmp/tmpkw8j7wkz.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004128122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: use the mean and absolute_deviation methods you just wrote\n\
    \  mean = mean(numbers)\n  sum = 0\n  numbers.each do |x|\n    sum += absolute_deviation(x,\
    \ mean)\n  end\n  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2wipz2bj\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000556e36a06dc0>\n/tmp/tmp2wipz2bj.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmp2wipz2bj.rb:22:in `call'\n/tmp/tmp2wipz2bj.rb:22:in `test_mean_absolute_deviation'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_mean_absolute_deviation\n\
    \     21:     candidate = method(:mean_absolute_deviation)\n  => 22:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     23:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     24:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     25:   end\n===============================================================================\n\
    \nFinished in 0.004298062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.66 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6r9bhw_x\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055ff5eb57670>\n/tmp/tmp6r9bhw_x.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp6r9bhw_x.rb:17:in `call'\n/tmp/tmp6r9bhw_x.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004138321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.64 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement\n  mean\
    \ = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpitcbjd8f\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055cf582e2fe8>\n/tmp/tmpitcbjd8f.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpitcbjd8f.rb:17:in `call'\n/tmp/tmpitcbjd8f.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004866521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.49 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsw5vp_wb\nStarted\n.\nFinished in 0.000335261 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2982.75 tests/s, 8948.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb5ls9p70\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056285eaeb9d8>\n/tmp/tmpb5ls9p70.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpb5ls9p70.rb:17:in `call'\n/tmp/tmpb5ls9p70.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004270629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.16 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ function\n  # Hint: You can use the 'mean' function you just wrote\n  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpepte2uh3\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055563f3c6bb8>\n/tmp/tmpepte2uh3.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpepte2uh3.rb:19:in `call'\n/tmp/tmpepte2uh3.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.005550326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.17 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbpx9ax6\nStarted\n.\nFinished in 0.000323609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3090.15 tests/s, 9270.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpusyjc3zi\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005607c982b7f8>\n/tmp/tmpusyjc3zi.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpusyjc3zi.rb:17:in `call'\n/tmp/tmpusyjc3zi.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.005292732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  return 0 if numbers.empty?\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsnrt6sc5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561b75ed34b0>\n/tmp/tmpsnrt6sc5.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpsnrt6sc5.rb:17:in `call'\n/tmp/tmpsnrt6sc5.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004173236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.62 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6iei2r7y\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e14402b158>\n/tmp/tmp6iei2r7y.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp6iei2r7y.rb:17:in `call'\n/tmp/tmp6iei2r7y.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004942984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplczr8tks\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561b972a60f8>\n/tmp/tmplczr8tks.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmplczr8tks.rb:20:in `call'\n/tmp/tmplczr8tks.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.006051457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.25 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpun_cpz_q\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055796b51b370>\n/tmp/tmpun_cpz_q.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpun_cpz_q.rb:17:in `call'\n/tmp/tmpun_cpz_q.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004540447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc8ihmdip\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a0e542a550>\n/tmp/tmpc8ihmdip.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpc8ihmdip.rb:17:in `call'\n/tmp/tmpc8ihmdip.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.003976868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9kate0gq\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e5c2267688>\n/tmp/tmp9kate0gq.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp9kate0gq.rb:17:in `call'\n/tmp/tmp9kate0gq.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004424429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqsu44rxi\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000555decd9b760>\n/tmp/tmpqsu44rxi.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpqsu44rxi.rb:18:in `call'\n/tmp/tmpqsu44rxi.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.00423324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.23 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1_itwl0n\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000559b8f6c36f0>\n/tmp/tmp1_itwl0n.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp1_itwl0n.rb:17:in `call'\n/tmp/tmp1_itwl0n.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004119456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.75 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You'll need to calculate the mean of the numbers first\n \
    \ # Hint: You'll need to use the absolute value method\n  # Hint: You'll need\
    \ to use the reduce method\n  # Hint: You'll need to use the map method\n  # Hint:\
    \ You'll need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the length method\n  # Hint: You'll need to use\
    \ the divide method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpi8x62meu.rb:47: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpi8x62meu.rb:54: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxwx0xf4m\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055ac6a82b560>\n/tmp/tmpxwx0xf4m.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpxwx0xf4m.rb:16:in `call'\n/tmp/tmpxwx0xf4m.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004251834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.19 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjwxp0lrs\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055717a803158>\n/tmp/tmpjwxp0lrs.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpjwxp0lrs.rb:17:in `call'\n/tmp/tmpjwxp0lrs.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004134023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5xjvkuv4\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005584c07eacd0>\n/tmp/tmp5xjvkuv4.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp5xjvkuv4.rb:17:in `call'\n/tmp/tmp5xjvkuv4.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004166174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxx69xuoi\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564fae9c3368>\n/tmp/tmpxx69xuoi.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpxx69xuoi.rb:17:in `call'\n/tmp/tmpxx69xuoi.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004122922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmparjpd2mc\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055c4fef3b038>\n/tmp/tmparjpd2mc.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmparjpd2mc.rb:17:in `call'\n/tmp/tmparjpd2mc.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004245593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3wtsaeld\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055eeb9977450>\n/tmp/tmp3wtsaeld.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp3wtsaeld.rb:17:in `call'\n/tmp/tmp3wtsaeld.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00420673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb_y_qwbj\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpb_y_qwbj.rb:15:in\
    \ `test_mean_absolute_deviation'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_mean_absolute_deviation\n     14:     candidate = method(:mean_absolute_deviation)\n\
    \  => 15:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     16:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     17:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     18:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004534636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.52 tests/s, 220.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplycsu6wb\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f0e06ab158>\n/tmp/tmplycsu6wb.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmplycsu6wb.rb:17:in `call'\n/tmp/tmplycsu6wb.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004167296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  abs_diff = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpau6nu32w\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561e9f9d7a38>\n/tmp/tmpau6nu32w.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpau6nu32w.rb:17:in `call'\n/tmp/tmpau6nu32w.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004248118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp086hoius\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562eb6f5d968>\n/tmp/tmp086hoius.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp086hoius.rb:17:in `call'\n/tmp/tmp086hoius.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004128021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.25 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpndtp_2l5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a17030e848>\n/tmp/tmpndtp_2l5.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpndtp_2l5.rb:20:in `call'\n/tmp/tmpndtp_2l5.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004443796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |num|\n    sum += (num - mean).abs\n  end\n  sum\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuahc7l9g\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562fac02b480>\n/tmp/tmpuahc7l9g.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpuahc7l9g.rb:20:in `call'\n/tmp/tmpuahc7l9g.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004059704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.32 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpavb7dlww\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f510417548>\n/tmp/tmpavb7dlww.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpavb7dlww.rb:17:in `call'\n/tmp/tmpavb7dlww.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004208342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.62 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxdrxkgx8\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpxdrxkgx8.rb:15:in\
    \ `test_mean_absolute_deviation'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_mean_absolute_deviation\n     14:     candidate = method(:mean_absolute_deviation)\n\
    \  => 15:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     16:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     17:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     18:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004517534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.36 tests/s, 221.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwtdy0ax4\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000559f69773310>\n/tmp/tmpwtdy0ax4.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpwtdy0ax4.rb:20:in `call'\n/tmp/tmpwtdy0ax4.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004157578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  # Hint: You can use the built-in `abs` function to get the absolute value\n\
    \  # of a number.\n  # Hint: You can use the built-in `sum` function to get the\
    \ sum of a list\n  # of numbers.\n  # Hint: You can use the built-in `mean` function\
    \ to get the mean of a list\n  # of numbers.\n  # Hint: You can use the built-in\
    \ `map` function to apply a function to each\n  # element of a list.\n  # Hint:\
    \ You can use the built-in `zip` function to combine two lists into\n  # a list\
    \ of pairs.\n  # Hint: You can use the built-in `enumerate` function to get the\
    \ index of\n  # each element in a list.\n  # Hint: You can use the built-in `range`\
    \ function to get a list of numbers.\n  # Hint: You can use the built-in `len`\
    \ function to get the length of a list.\n  # Hint: You can use the built-in `max`\
    \ function to get the maximum value of\n  # a list.\n  # Hint: You can use the\
    \ built-in `min` function to get the minimum value of\n  # a list.\n  # Hint:\
    \ You can use the built-in `round` function to round a number to a\n  # given\
    \ number of decimal places.\n  # Hint: You can use the built-in `sorted` function\
    \ to sort a list.\n  # Hint: You can use the built-in `reversed` function to reverse\
    \ a list.\n  # Hint: You can use the built-in `filter` function to filter a list.\n\
    \  # Hint: You can use the built-in `any` function to check if any element of\n\
    \  # a list is true.\n  # Hint: You can use the built-in `all` function to check\
    \ if all elements of\n  # a list are true.\n  # Hint: You can use the built-in\
    \ `zip` function to combine two lists into\n  # a list of pairs.\n  # Hint: You\
    \ can use the built-in `enumerate` function to\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpfv4s0jtr.rb:41: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfv4s0jtr.rb:48: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  # Hint: use the abs() method to get the absolute value of a number\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7dy9cmrq\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmp7dy9cmrq.rb:16:in\
    \ `test_mean_absolute_deviation'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_mean_absolute_deviation\n     15:     candidate = method(:mean_absolute_deviation)\n\
    \  => 16:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     19:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005709886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.13 tests/s, 175.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9u_n4m66\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005607e2b1ede8>\n/tmp/tmp9u_n4m66.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp9u_n4m66.rb:17:in `call'\n/tmp/tmp9u_n4m66.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.005155884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.95 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp9f6vzax\nStarted\n.\nFinished in 0.000354798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2818.51 tests/s, 8455.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |num| (num - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_qgqhnep\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560b545e30e8>\n/tmp/tmp_qgqhnep.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp_qgqhnep.rb:17:in `call'\n/tmp/tmp_qgqhnep.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004098577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeq_5o06n\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557666f83158>\n/tmp/tmpeq_5o06n.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpeq_5o06n.rb:17:in `call'\n/tmp/tmpeq_5o06n.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004146216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.18 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp404epj24\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005562823e7670>\n/tmp/tmp404epj24.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp404epj24.rb:17:in `call'\n/tmp/tmp404epj24.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004098266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_k9v2vvz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000558d3e0aaf70>\n/tmp/tmp_k9v2vvz.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp_k9v2vvz.rb:17:in `call'\n/tmp/tmp_k9v2vvz.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004051989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbickkle2\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055b78cb9b358>\n/tmp/tmpbickkle2.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpbickkle2.rb:16:in `call'\n/tmp/tmpbickkle2.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004260371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_differences = numbers.map { |n| (n - mean).abs }\n  mean(absolute_differences)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3sdqyzt8\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557372b2b2f0>\n/tmp/tmp3sdqyzt8.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp3sdqyzt8.rb:17:in `call'\n/tmp/tmp3sdqyzt8.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004439968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.23 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wjk_nvn\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005630978e76f0>\n/tmp/tmp8wjk_nvn.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp8wjk_nvn.rb:17:in `call'\n/tmp/tmp8wjk_nvn.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004273064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  # Hint: use the method 'mean' from the module 'Statistics'\n  # Hint:\
    \ use the method 'absolute_deviation' from the module 'Statistics'\n  # Hint:\
    \ use the method 'average' from the module 'Statistics'\n  # Hint: use the method\
    \ 'map' from the class 'Array'\n  # Hint: use the method 'reduce' from the class\
    \ 'Array'\n  # Hint: use the method 'abs' from the class 'Numeric'\n  # Hint:\
    \ use the method 'sum' from the class 'Numeric'\n  # Hint: use the method 'length'\
    \ from the class 'Array'\n  # Hint: use the method 'to_f' from the class 'Numeric'\n\
    \  # Hint: use the method 'to_a' from the class 'Range'\n  # Hint: use the method\
    \ 'to_a' from the class 'Hash'\n  # Hint: use the method 'to_a' from the class\
    \ 'Enumerator'\n  # Hint: use the method 'to_a' from the class 'Set'\n  # Hint:\
    \ use the method 'to_a' from the class 'Struct'\n  # Hint: use the method 'to_a'\
    \ from the class 'Matrix'\n  # Hint: use the method 'to_a' from the class 'Vector'\n\
    \  # Hint: use the method 'to_a' from the class 'Complex'\n  # Hint: use the method\
    \ 'to_a' from the class 'Rational'\n  # Hint: use the method 'to_a' from the class\
    \ 'BigDecimal'\n  # Hint: use the method 'to_a' from the class 'BigMath'\n  #\
    \ Hint: use the method 'to_a' from the class 'Prime'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::EratosthenesGenerator'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::PseudoPrimeGenerator'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::TrialDivisionGenerator'\n  #\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpepqnsl22.rb:36: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpepqnsl22.rb:43: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8l30t7cr\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560ac17c7848>\n/tmp/tmp8l30t7cr.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp8l30t7cr.rb:16:in `call'\n/tmp/tmp8l30t7cr.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004107253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpytwiw3a7\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055b81b7d2f70>\n/tmp/tmpytwiw3a7.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpytwiw3a7.rb:17:in `call'\n/tmp/tmpytwiw3a7.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00408955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptamtetjl\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056197b90b088>\n/tmp/tmptamtetjl.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmptamtetjl.rb:17:in `call'\n/tmp/tmptamtetjl.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00408478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.81 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa4qaig9e\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f85c633670>\n/tmp/tmpa4qaig9e.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpa4qaig9e.rb:17:in `call'\n/tmp/tmpa4qaig9e.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00410596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_dnepciu\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055cf5f936de8>\n/tmp/tmp_dnepciu.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp_dnepciu.rb:17:in `call'\n/tmp/tmp_dnepciu.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004197602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.23 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ function\n  # Hint: use the absolute_deviation function you implemented above\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo8i6s90x\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpo8i6s90x.rb:16:in\
    \ `test_mean_absolute_deviation'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_mean_absolute_deviation\n     15:     candidate = method(:mean_absolute_deviation)\n\
    \  => 16:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     19:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004943425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.29 tests/s, 202.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpscctzrvs\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056291022b390>\n/tmp/tmpscctzrvs.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpscctzrvs.rb:17:in `call'\n/tmp/tmpscctzrvs.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004096312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.12 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'mean' method from the previous exercise\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprx44twsp\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562574d7b460>\n/tmp/tmprx44twsp.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmprx44twsp.rb:18:in `call'\n/tmp/tmprx44twsp.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004299705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8uis4wed\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f5b903bc18>\n/tmp/tmp8uis4wed.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp8uis4wed.rb:16:in `call'\n/tmp/tmp8uis4wed.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004118524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.81 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpck8jv1pk\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005563928db670>\n/tmp/tmpck8jv1pk.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpck8jv1pk.rb:17:in `call'\n/tmp/tmpck8jv1pk.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004396207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl49syn4n\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560c0ea436f0>\n/tmp/tmpl49syn4n.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpl49syn4n.rb:17:in `call'\n/tmp/tmpl49syn4n.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004124865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe00d4no3\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055afb7b76f30>\n/tmp/tmpe00d4no3.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpe00d4no3.rb:17:in `call'\n/tmp/tmpe00d4no3.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004083859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.87 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x\
    \ - mean).abs }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy4rih72s\nStarted\n.\nFinished in 0.000325693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3070.38 tests/s, 9211.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpubch0dmp\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557f7e5b7158>\n/tmp/tmpubch0dmp.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpubch0dmp.rb:17:in `call'\n/tmp/tmpubch0dmp.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004127119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo4h5v0q2\nStarted\n.\nFinished in 0.000447331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2235.48 tests/s, 6706.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn_y4zhyz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000555f7dd35220>\n/tmp/tmpn_y4zhyz.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpn_y4zhyz.rb:17:in `call'\n/tmp/tmpn_y4zhyz.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00507901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.89 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  abs_diff = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpka9wsyxx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005595cbe77230>\n/tmp/tmpka9wsyxx.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpka9wsyxx.rb:17:in `call'\n/tmp/tmpka9wsyxx.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004129686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  numbers.inject(0) { |sum, n| sum + (n - numbers.mean).abs } / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9b08ube5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for [1.0, 2.0]:Array\n/tmp/tmp9b08ube5.rb:10:in `block in mean_absolute_deviation'\n\
    /tmp/tmp9b08ube5.rb:10:in `each'\n/tmp/tmp9b08ube5.rb:10:in `inject'\n/tmp/tmp9b08ube5.rb:10:in\
    \ `mean_absolute_deviation'\n/tmp/tmp9b08ube5.rb:16:in `call'\n/tmp/tmp9b08ube5.rb:16:in\
    \ `test_mean_absolute_deviation'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_mean_absolute_deviation\n     15:     candidate = method(:mean_absolute_deviation)\n\
    \  => 16:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.002959254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr976sn2v\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005567a3d1f4d8>\n/tmp/tmpr976sn2v.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpr976sn2v.rb:17:in `call'\n/tmp/tmpr976sn2v.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004253326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfcq9unxc\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056000196af30>\n/tmp/tmpfcq9unxc.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpfcq9unxc.rb:17:in `call'\n/tmp/tmpfcq9unxc.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004199336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.13 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgaus54_a\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005578132b3988>\n/tmp/tmpgaus54_a.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpgaus54_a.rb:17:in `call'\n/tmp/tmpgaus54_a.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004227029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptf6l6oft\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056177e38b8c8>\n/tmp/tmptf6l6oft.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmptf6l6oft.rb:17:in `call'\n/tmp/tmptf6l6oft.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00417999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.reduce(:+) / numbers.size\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp49vxxq83\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005624de257520>\n/tmp/tmp49vxxq83.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp49vxxq83.rb:16:in `call'\n/tmp/tmp49vxxq83.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004239451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.88 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp49xleac8\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564b70e26de8>\n/tmp/tmp49xleac8.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp49xleac8.rb:17:in `call'\n/tmp/tmp49xleac8.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004532263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.64 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  numbers_mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - numbers_mean).abs }\n\
    \  mean(absolute_deviations)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl66741ke\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056539277f060>\n/tmp/tmpl66741ke.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpl66741ke.rb:17:in `call'\n/tmp/tmpl66741ke.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004060434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement me\n\
    \  # Hint: use the mean function you wrote above\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz4v4i6j3\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055dc27b7b4f8>\n/tmp/tmpz4v4i6j3.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpz4v4i6j3.rb:19:in `call'\n/tmp/tmpz4v4i6j3.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004258307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs }\n\
    \  mean(abs_diff)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjk7yjfp\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000559c5d4fea08>\n/tmp/tmptjk7yjfp.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmptjk7yjfp.rb:18:in `call'\n/tmp/tmptjk7yjfp.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004177104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpio8vzz75\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f863a07560>\n/tmp/tmpio8vzz75.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpio8vzz75.rb:16:in `call'\n/tmp/tmpio8vzz75.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004181423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvbsu2wov\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564ce1b8e550>\n/tmp/tmpvbsu2wov.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpvbsu2wov.rb:17:in `call'\n/tmp/tmpvbsu2wov.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004345381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.13 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0qgerba\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562443fcb7b0>\n/tmp/tmpz0qgerba.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpz0qgerba.rb:20:in `call'\n/tmp/tmpz0qgerba.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004138513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n \
    \   candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps_tdq0xr\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055796efcf3b8>\n/tmp/tmps_tdq0xr.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmps_tdq0xr.rb:18:in `call'\n/tmp/tmps_tdq0xr.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004072577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj53wof1v\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055ce3dff9220>\n/tmp/tmpj53wof1v.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpj53wof1v.rb:17:in `call'\n/tmp/tmpj53wof1v.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004071145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpegn9f1wb\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055eef583b668>\n/tmp/tmpegn9f1wb.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpegn9f1wb.rb:17:in `call'\n/tmp/tmpegn9f1wb.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004078839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.17 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the mean method from the previous exercise\n \
    \ mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n \
    \   candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgsfeqibw\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000557dd5aff408>\n/tmp/tmpgsfeqibw.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpgsfeqibw.rb:22:in `call'\n/tmp/tmpgsfeqibw.rb:22:in `test_mean_absolute_deviation'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_mean_absolute_deviation\n\
    \     21:     candidate = method(:mean_absolute_deviation)\n  => 22:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     23:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     24:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     25:   end\n===============================================================================\n\
    \nFinished in 0.004226366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.61 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You may want to use the 'mean' method you defined above\n\
    \  # Hint: You may want to use the 'absolute_value' method you defined above\n\
    \  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += absolute_value(number\
    \ - mean)\n  end\n  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkvvww7i2\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055acd7353818>\n/tmp/tmpkvvww7i2.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpkvvww7i2.rb:23:in `call'\n/tmp/tmpkvvww7i2.rb:23:in `test_mean_absolute_deviation'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_mean_absolute_deviation\n\
    \     22:     candidate = method(:mean_absolute_deviation)\n  => 23:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     24:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     25:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     26:   end\n===============================================================================\n\
    \nFinished in 0.004043033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.34 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ function\n  # Hint: You can use the built-in function 'abs'\n  # Hint: You can\
    \ use the built-in function 'mean'\n  # Hint: You can use the built-in function\
    \ 'map'\n  # Hint: You can use the built-in function 'reduce'\n  # Hint: You can\
    \ use the built-in function 'sum'\n  # Hint: You can use the built-in function\
    \ 'length'\n  # Hint: You can use the built-in function 'round'\n  # Hint: You\
    \ can use the built-in function 'to_f'\n  # Hint: You can use the built-in function\
    \ 'to_i'\n  # Hint: You can use the built-in function 'to_s'\n  # Hint: You can\
    \ use the built-in function 'to_a'\n  # Hint: You can use the built-in function\
    \ 'to_h'\n  # Hint: You can use the built-in function 'to_proc'\n  # Hint: You\
    \ can use the built-in function 'to_r'\n  # Hint: You can use the built-in function\
    \ 'to_c'\n  # Hint: You can use the built-in function 'to_time'\n  # Hint: You\
    \ can use the built-in function 'to_date'\n  # Hint: You can use the built-in\
    \ function 'to_datetime'\n  # Hint: You can use the built-in function 'to_sym'\n\
    \  # Hint: You can use the built-in function 'to_regexp'\n  # Hint: You can use\
    \ the built-in function 'to_rational'\n  # Hint: You can use the built-in function\
    \ 'to_complex'\n  # Hint: You can use the built-in function 'to_str'\n  # Hint:\
    \ You can use the built-in function 'to_i'\n  # Hint: You can use the built-in\
    \ function 'to_f'\n  # Hint: You can use the built-in function 'to_r'\n  # Hint:\
    \ You can use the built-in function 'to_c'\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmplbm__asa.rb:38: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbm__asa.rb:45: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpna5jev_d\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f569333088>\n/tmp/tmpna5jev_d.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpna5jev_d.rb:17:in `call'\n/tmp/tmpna5jev_d.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00423321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.23 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  # Hint: You can use the 'abs' function to get the absolute value of a number\n\
    \  # Hint: You can use the 'reduce' function to calculate the sum of a list\n\
    \  # Hint: You can use the 'map' function to apply a function to each element\
    \ of a list\n  # Hint: You can use the 'length' function to get the length of\
    \ a list\n  # Hint: You can use the 'mean' function to get the mean of a list\n\
    \  # Hint: You can use the 'zip' function to combine two lists\n  # Hint: You\
    \ can use the 'map' function to apply a function to each element of a list\n \
    \ # Hint: You can use the 'reduce' function to calculate the sum of a list\n \
    \ # Hint: You can use the 'map' function to apply a function to each element of\
    \ a list\n  # Hint: You can use the 'reduce' function to calculate the sum of\
    \ a list\n  # Hint: You can use the 'map' function to apply a function to each\
    \ element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmphfsxbivf.rb:34: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmphfsxbivf.rb:41: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr20ux4_5\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e3f6073278>\n/tmp/tmpr20ux4_5.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpr20ux4_5.rb:20:in `call'\n/tmp/tmpr20ux4_5.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004525889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.95 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9csot85j\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005621121fb6f0>\n/tmp/tmp9csot85j.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp9csot85j.rb:17:in `call'\n/tmp/tmp9csot85j.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.005713172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl256hagx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560fe23bf450>\n/tmp/tmpl256hagx.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpl256hagx.rb:17:in `call'\n/tmp/tmpl256hagx.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004082146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.97 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu_7bxkte\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055caff1eb278>\n/tmp/tmpu_7bxkte.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpu_7bxkte.rb:17:in `call'\n/tmp/tmpu_7bxkte.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004279266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.68 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp54e2liok\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e652f9e550>\n/tmp/tmp54e2liok.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp54e2liok.rb:20:in `call'\n/tmp/tmp54e2liok.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004075794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9uo0ycn\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055de5f3034d0>\n/tmp/tmpp9uo0ycn.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpp9uo0ycn.rb:17:in `call'\n/tmp/tmpp9uo0ycn.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004109226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm3wg7ri4\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055b06a2876f0>\n/tmp/tmpm3wg7ri4.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpm3wg7ri4.rb:17:in `call'\n/tmp/tmpm3wg7ri4.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004247446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.44 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp911r6mz6\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000556f2e6eafd0>\n/tmp/tmp911r6mz6.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp911r6mz6.rb:17:in `call'\n/tmp/tmp911r6mz6.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004661625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptusz7n8a\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055cd615bf660>\n/tmp/tmptusz7n8a.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmptusz7n8a.rb:17:in `call'\n/tmp/tmptusz7n8a.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004318801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwo1_cfq\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005577b2a576f0>\n/tmp/tmpmwo1_cfq.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpmwo1_cfq.rb:17:in `call'\n/tmp/tmpmwo1_cfq.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004068119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.81 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw3_fzkm3\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f78e19b690>\n/tmp/tmpw3_fzkm3.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpw3_fzkm3.rb:16:in `call'\n/tmp/tmpw3_fzkm3.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004454666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp22m1es1r\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056242c4aa550>\n/tmp/tmp22m1es1r.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp22m1es1r.rb:17:in `call'\n/tmp/tmp22m1es1r.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004931764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj1rzxwki\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpj1rzxwki.rb:15:in\
    \ `test_mean_absolute_deviation'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_mean_absolute_deviation\n     14:     candidate = method(:mean_absolute_deviation)\n\
    \  => 15:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     16:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     17:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     18:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005164221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.64 tests/s, 193.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.reduce(:+) / numbers.size\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9kthmd44\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e31f327488>\n/tmp/tmp9kthmd44.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp9kthmd44.rb:16:in `call'\n/tmp/tmp9kthmd44.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004129675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw7m0w71p\nStarted\n.\nFinished in 0.000366089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2731.58 tests/s, 8194.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsl11ly81\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564957a3f880>\n/tmp/tmpsl11ly81.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpsl11ly81.rb:17:in `call'\n/tmp/tmpsl11ly81.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004258207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_5qslk36\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e76709a750>\n/tmp/tmp_5qslk36.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp_5qslk36.rb:16:in `call'\n/tmp/tmp_5qslk36.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004143732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpypfnel1r\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055af4e7520f8>\n/tmp/tmpypfnel1r.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpypfnel1r.rb:20:in `call'\n/tmp/tmpypfnel1r.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004131157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: return the average\
    \ absolute difference between each\n  # element and a centerpoint (mean in this\
    \ case)\n  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp80976m8s\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560233c4ade8>\n/tmp/tmp80976m8s.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmp80976m8s.rb:18:in `call'\n/tmp/tmp80976m8s.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004101732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the absolute_value method from above\n  #    \
    \   to get the absolute value of a number\n  mean = mean(numbers)\n  numbers.map\
    \ { |num| absolute_value(num - mean) }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiczgrwhz\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563bc2466870>\n/tmp/tmpiczgrwhz.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpiczgrwhz.rb:19:in `call'\n/tmp/tmpiczgrwhz.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004301999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map! { |number| (number - mean).abs\
    \ }\n  mean(numbers)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpumajcrrk\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005651c4ac33e0>\n/tmp/tmpumajcrrk.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpumajcrrk.rb:18:in `call'\n/tmp/tmpumajcrrk.rb:18:in `test_mean_absolute_deviation'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_mean_absolute_deviation\n\
    \     17:     candidate = method(:mean_absolute_deviation)\n  => 18:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     19:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     20:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     21:   end\n===============================================================================\n\
    \nFinished in 0.004291259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppz3wuleo\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055824c48ba10>\n/tmp/tmppz3wuleo.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmppz3wuleo.rb:16:in `call'\n/tmp/tmppz3wuleo.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004247807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt122fg13\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000555823926528>\n/tmp/tmpt122fg13.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpt122fg13.rb:17:in `call'\n/tmp/tmpt122fg13.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004107493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp808s2tat\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005623cfa66528>\n/tmp/tmp808s2tat.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp808s2tat.rb:17:in `call'\n/tmp/tmp808s2tat.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004383141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the mean method from the previous exercise\n \
    \ mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n \
    \   candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyt1tch6n\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564a6928ad20>\n/tmp/tmpyt1tch6n.rb:11:in `mean_absolute_deviation'\n\
    /tmp/tmpyt1tch6n.rb:22:in `call'\n/tmp/tmpyt1tch6n.rb:22:in `test_mean_absolute_deviation'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_mean_absolute_deviation\n\
    \     21:     candidate = method(:mean_absolute_deviation)\n  => 22:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     23:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     24:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     25:   end\n===============================================================================\n\
    \nFinished in 0.004313321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  # Hint: use the absolute_deviation method you wrote above\n  # Hint:\
    \ use the mean method you wrote above\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| absolute_deviation(number, mean) }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa3nzrtlx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055e8065ab1c8>\n/tmp/tmpa3nzrtlx.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpa3nzrtlx.rb:20:in `call'\n/tmp/tmpa3nzrtlx.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004573199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.67 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'abs' method to get the absolute value of\
    \ a number\n  # Hint: You can use the 'mean' method to get the mean of a list\
    \ of numbers\n  # Hint: You can use the 'reduce' method to get the sum of a list\
    \ of numbers\n  # Hint: You can use the 'map' method to apply a function to each\
    \ element of a list\n  # Hint: You can use the 'length' method to get the length\
    \ of a list\n  # Hint: You can use the 'divide' method to divide a number by another\
    \ number\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzi7yu2hd\nStarted\nF\n===============================================================================\n\
    Failure: test_mean_absolute_deviation(TestHumanEval)\n/tmp/tmpzi7yu2hd.rb:21:in\
    \ `test_mean_absolute_deviation'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_mean_absolute_deviation\n     20:     candidate = method(:mean_absolute_deviation)\n\
    \  => 21:     assert_equal(0.5, candidate.call([1.0, 2.0]))\n     22:     assert_equal(1.0,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0]))\n     23:     assert_equal(1.2, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n     24:   end\n<0.5> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004984313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.63 tests/s, 200.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'abs' method to get the absolute value of\
    \ a number\n  # Hint: You can use the 'reduce' method to get the sum of a list\
    \ of numbers\n  # Hint: You can use the 'length' method to get the length of a\
    \ list of numbers\n  # Hint: You can use the 'mean' method to get the mean of\
    \ a list of numbers\n  # Hint: You can use the 'map' method to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'zip' method to combine\
    \ two lists into a list of pairs\n  # Hint: You can use the 'map' method to apply\
    \ a function to each element of a list\n  # Hint: You can use the 'reduce' method\
    \ to get the sum of a list of numbers\n  # Hint: You can use the 'length' method\
    \ to get the length of a list of numbers\n  # Hint: You can use the 'mean' method\
    \ to get the mean of a list of numbers\n  # Hint: You can use the 'map' method\
    \ to apply a function to each element of a list\n  # Hint: You can use the 'zip'\
    \ method to combine two lists into a list of pairs\n  # Hint: You can use the\
    \ 'map' method to apply a function to each element of a list\n  # Hint: You can\
    \ use the 'reduce' method to get the sum of a list of numbers\n  # Hint: You can\
    \ use the 'length' method to get the length of a list of numbers\n  # Hint: You\
    \ can use the 'mean' method to get the mean of a list of numbers\n  # Hint: You\
    \ can use the 'map' method to apply a function to each element of a list\n  #\
    \ Hint: You can use the 'zip' method to combine two lists into a list of pairs\n\
    \  # Hint: You can use the 'map' method to apply a function to each element of\
    \ a list\n  # Hint: You can use the 'reduce' method to get the sum of a list of\
    \ numbers\n  # Hint: You can use the 'length' method to get the length of a list\
    \ of numbers\n  # Hint: You can use the '\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpr3riq9cl.rb:33: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpr3riq9cl.rb:40: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |num|\n    sum += (num - mean).abs\n  end\n  sum\
    \ / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiolj5is8\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056066d70f570>\n/tmp/tmpiolj5is8.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpiolj5is8.rb:20:in `call'\n/tmp/tmpiolj5is8.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004319893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.49 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnd_3xw8n\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056348cc4f088>\n/tmp/tmpnd_3xw8n.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpnd_3xw8n.rb:17:in `call'\n/tmp/tmpnd_3xw8n.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004300906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpac1upwo1\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055937c48efd0>\n/tmp/tmpac1upwo1.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpac1upwo1.rb:17:in `call'\n/tmp/tmpac1upwo1.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004522604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the abs method to get the absolute value of a\
    \ number\n  #       (e.g. abs(-3) == 3)\n  # Hint: You can use the reduce method\
    \ to sum up a list of numbers\n  #       (e.g. [1, 2, 3].reduce(:+) == 6)\n  #\
    \ Hint: You can use the map method to apply a function to each element of a list\n\
    \  #       (e.g. [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can\
    \ use the mean method to get the mean of a list of numbers\n  #       (e.g. mean([1,\
    \ 2, 3]) == 2)\n  # Hint: You can use the inject method to apply a function to\
    \ each element of a list\n  #       (e.g. [1, 2, 3].inject(0) { |sum, x| sum +\
    \ x } == 6)\n  # Hint: You can use the sum method to sum up a list of numbers\n\
    \  #       (e.g. sum([1, 2, 3]) == 6)\n  # Hint: You can use the count method\
    \ to get the length of a list\n  #       (e.g. [1, 2, 3].count == 3)\n  # Hint:\
    \ You can use the map method to apply a function to each element of a list\n \
    \ #       (e.g. [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use\
    \ the map method to apply a function to each element of a list\n  #       (e.g.\
    \ [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use the map method\
    \ to apply a function to each element of a list\n  #       (e.g. [1, 2, 3].map\
    \ { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use the map method to apply a\
    \ function to each element of a list\n  #       (e.\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n \
    \   candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpbv21azy1.rb:33: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpbv21azy1.rb:40: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdvjqs1ps\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055f49737f078>\n/tmp/tmpdvjqs1ps.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpdvjqs1ps.rb:17:in `call'\n/tmp/tmpdvjqs1ps.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004141206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the absolute_value method from above\n  #    \
    \   to get the absolute value of a number\n  mean = mean(numbers)\n  numbers.map!\
    \ { |number| absolute_value(number - mean) }\n  mean(numbers)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp637mo8ff\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560269d7ddb0>\n/tmp/tmp637mo8ff.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmp637mo8ff.rb:20:in `call'\n/tmp/tmp637mo8ff.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004385515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkww073vv\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a5091f34d0>\n/tmp/tmpkww073vv.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpkww073vv.rb:17:in `call'\n/tmp/tmpkww073vv.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00412712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_9vqf_ke\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560087a4f3c0>\n/tmp/tmp_9vqf_ke.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp_9vqf_ke.rb:17:in `call'\n/tmp/tmp_9vqf_ke.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004170913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  # Hint: You can use the 'mean' function you just wrote\n  # Hint: You can use\
    \ the 'absolute_value' function you just wrote\n  # Hint: You can use the 'average'\
    \ function you just wrote\n  # Hint: You can use the 'map' function you just wrote\n\
    \  # Hint: You can use the 'reduce' function you just wrote\n  # Hint: You can\
    \ use the 'zip' function you just wrote\n  # Hint: You can use the 'sum' function\
    \ you just wrote\n  # Hint: You can use the 'count' function you just wrote\n\
    \  # Hint: You can use the 'range' function you just wrote\n  # Hint: You can\
    \ use the 'each' function you just wrote\n  # Hint: You can use the 'map' function\
    \ you just wrote\n  # Hint: You can use the 'reduce' function you just wrote\n\
    \  # Hint: You can use the 'zip' function you just wrote\n  # Hint: You can use\
    \ the 'sum' function you just wrote\n  # Hint: You can use the 'count' function\
    \ you just wrote\n  # Hint: You can use the 'range' function you just wrote\n\
    \  # Hint: You can use the 'each' function you just wrote\n  # Hint: You can use\
    \ the 'map' function you just wrote\n  # Hint: You can use the 'reduce' function\
    \ you just wrote\n  # Hint: You can use the 'zip' function you just wrote\n  #\
    \ Hint: You can use the 'sum' function you just wrote\n  # Hint: You can use the\
    \ 'count' function you just wrote\n  # Hint: You can use the 'range' function\
    \ you just wrote\n  # Hint: You can use the 'each' function you just wrote\n \
    \ # Hint: You can use the 'map' function you just wrote\n  # Hint: You can use\
    \ the 'reduce' function you just wrote\n  # Hint: You can use the 'zip' function\
    \ you just wrote\n  # Hint: You can use the 'sum' function you just wrote\n  #\
    \ Hint: You can use the 'count' function you just wrote\n  # H\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmp1d80_pbl.rb:41: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1d80_pbl.rb:48: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n    candidate =\
    \ method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0j0w3eqv\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055936d543548>\n/tmp/tmp0j0w3eqv.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp0j0w3eqv.rb:17:in `call'\n/tmp/tmp0j0w3eqv.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004126199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjvvp59ta\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x00005583a4073348>\n/tmp/tmpjvvp59ta.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpjvvp59ta.rb:16:in `call'\n/tmp/tmpjvvp59ta.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004246825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  abs_diff = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxu6_z39v\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000559e2390f760>\n/tmp/tmpxu6_z39v.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpxu6_z39v.rb:17:in `call'\n/tmp/tmpxu6_z39v.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004198986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.sum / numbers.size\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3ktvehts\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a40b426f08>\n/tmp/tmp3ktvehts.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp3ktvehts.rb:16:in `call'\n/tmp/tmp3ktvehts.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004253197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.12 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method!\n  mean = numbers.reduce(:+).to_f / numbers.length\n  numbers.map {\
    \ |num| (num - mean).abs }.reduce(:+) / numbers.length\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpum05j59t\nStarted\n.\nFinished in 0.000357843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.52 tests/s, 8383.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this.\n\
    \  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n \
    \   candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj045pnlg\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000564d4414a658>\n/tmp/tmpj045pnlg.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpj045pnlg.rb:21:in `call'\n/tmp/tmpj045pnlg.rb:21:in `test_mean_absolute_deviation'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_mean_absolute_deviation\n\
    \     20:     candidate = method(:mean_absolute_deviation)\n  => 21:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     22:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     23:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     24:   end\n===============================================================================\n\
    \nFinished in 0.004051108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp288dma3r\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055cd21d2f408>\n/tmp/tmp288dma3r.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmp288dma3r.rb:17:in `call'\n/tmp/tmp288dma3r.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004159041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.44 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'abs' method to get the absolute value of\
    \ a number\n  # Hint: You can use the 'mean' method provided above to get the\
    \ mean of a list of numbers\n  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi3cxce0x\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000056180e9e7808>\n/tmp/tmpi3cxce0x.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpi3cxce0x.rb:23:in `call'\n/tmp/tmpi3cxce0x.rb:23:in `test_mean_absolute_deviation'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_mean_absolute_deviation\n\
    \     22:     candidate = method(:mean_absolute_deviation)\n  => 23:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     24:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     25:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     26:   end\n===============================================================================\n\
    \nFinished in 0.004209724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp26yo4mon\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000561916d3f6f0>\n/tmp/tmp26yo4mon.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp26yo4mon.rb:17:in `call'\n/tmp/tmp26yo4mon.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004039816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  absolute_deviations = []\n  numbers.each do |number|\n\
    \    absolute_deviations << (number - mean).abs\n  end\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdjs5n51h\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563dc0867258>\n/tmp/tmpdjs5n51h.rb:10:in `mean_absolute_deviation'\n\
    /tmp/tmpdjs5n51h.rb:21:in `call'\n/tmp/tmpdjs5n51h.rb:21:in `test_mean_absolute_deviation'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_mean_absolute_deviation\n\
    \     20:     candidate = method(:mean_absolute_deviation)\n  => 21:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     22:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     23:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     24:   end\n===============================================================================\n\
    \nFinished in 0.004171443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.73 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: Implement this\
    \ method\n  # Hint: You can use the mean method from above\n  # Hint: You can\
    \ use the absolute_value method from above\n  mean = mean(numbers)\n  numbers.map\
    \ { |number| absolute_value(number - mean) }.reduce(:+) / numbers.length\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm332w3zl\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562444f2b480>\n/tmp/tmpm332w3zl.rb:12:in `mean_absolute_deviation'\n\
    /tmp/tmpm332w3zl.rb:19:in `call'\n/tmp/tmpm332w3zl.rb:19:in `test_mean_absolute_deviation'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_mean_absolute_deviation\n\
    \     18:     candidate = method(:mean_absolute_deviation)\n  => 19:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     20:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     21:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     22:   end\n===============================================================================\n\
    \nFinished in 0.004151966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7y71k0ym\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055c00e4eb3c0>\n/tmp/tmp7y71k0ym.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp7y71k0ym.rb:17:in `call'\n/tmp/tmp7y71k0ym.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004338126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1cmktd62\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000555eac3db4d0>\n/tmp/tmp1cmktd62.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp1cmktd62.rb:17:in `call'\n/tmp/tmp1cmktd62.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.00450465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp78sqt9g9\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562bec72b5f0>\n/tmp/tmp78sqt9g9.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp78sqt9g9.rb:17:in `call'\n/tmp/tmp78sqt9g9.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004101832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_v4f57u\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055cd3b8c71f8>\n/tmp/tmp0_v4f57u.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp0_v4f57u.rb:16:in `call'\n/tmp/tmp0_v4f57u.rb:16:in `test_mean_absolute_deviation'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_mean_absolute_deviation\n\
    \     15:     candidate = method(:mean_absolute_deviation)\n  => 16:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     17:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     18:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.004017374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  # TODO: implement this\
    \ method\n  # Hint: use the abs() method to get absolute values\n  # Hint: use\
    \ the reduce method to get the sum of all elements\n  # Hint: use the length method\
    \ to get the number of elements\n  # Hint: use the mean method to get the mean\
    \ of the elements\n  # Hint: use the map method to get the absolute difference\
    \ between each element and the mean\n  # Hint: use the reduce method to get the\
    \ sum of all absolute differences\n  # Hint: use the / operator to get the average\
    \ of the absolute differences\n  # Hint: use the round method to round the result\
    \ to 2 decimal places\n  # Hint: use the to_f method to convert the result to\
    \ a float\n  # Hint: use the to_s method to convert the result to a string\n \
    \ # Hint: use the + operator to concatenate the result with the string '%'\n \
    \ # Hint: use the to_f method to convert the result to a float\n  # Hint: use\
    \ the to_s method to convert the result to a string\n  # Hint: use the + operator\
    \ to concatenate the result with the string '%'\n  # Hint: use the to_f method\
    \ to convert the result to a float\n  # Hint: use the to_s method to convert the\
    \ result to a string\n  # Hint: use the + operator to concatenate the result with\
    \ the string '%'\n  # Hint: use the to_f method to convert the result to a float\n\
    \  # Hint: use the to_s method to convert the result to a string\n  # Hint: use\
    \ the + operator to concatenate the result with the string '%'\n  # Hint: use\
    \ the to_f method to convert the result to a float\n  # Hint: use the to_s method\
    \ to convert the result to a string\n  # Hint: use the + operator to concatenate\
    \ the result with the string '%'\n  # Hint: use the to_f method to convert the\
    \ result to a float\n  # Hint: use the to_s method to convert the result to a\
    \ string\n  # Hint: use the + operator to concatenate the result with the string\
    \ '%'\n  #\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpjxww2fd1.rb:38: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjxww2fd1.rb:45: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmzmt5auv\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563d045f6f30>\n/tmp/tmpmzmt5auv.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpmzmt5auv.rb:17:in `call'\n/tmp/tmpmzmt5auv.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.003950368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.14 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_mean_absolute_deviation\n    candidate = method(:mean_absolute_deviation)\n\
    \    assert_equal(0.5, candidate.call([1.0, 2.0]))\n    assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n    assert_equal(1.2, candidate.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptqshh2bx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000560d15a576e8>\n/tmp/tmptqshh2bx.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmptqshh2bx.rb:20:in `call'\n/tmp/tmptqshh2bx.rb:20:in `test_mean_absolute_deviation'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_mean_absolute_deviation\n\
    \     19:     candidate = method(:mean_absolute_deviation)\n  => 20:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     21:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     22:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     23:   end\n===============================================================================\n\
    \nFinished in 0.004157126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9lkvijh0\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000558fa72a33c0>\n/tmp/tmp9lkvijh0.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp9lkvijh0.rb:17:in `call'\n/tmp/tmp9lkvijh0.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004012665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm9a335oe\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055a3c19d2de8>\n/tmp/tmpm9a335oe.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpm9a335oe.rb:17:in `call'\n/tmp/tmpm9a335oe.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004155934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.62 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmjt1c9wx\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x000055bbbd4674d0>\n/tmp/tmpmjt1c9wx.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmpmjt1c9wx.rb:17:in `call'\n/tmp/tmpmjt1c9wx.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.0046963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3w213905\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000563c438cd220>\n/tmp/tmp3w213905.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp3w213905.rb:17:in `call'\n/tmp/tmp3w213905.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.004055896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
    \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
    \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
    \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2gwq1ghm\nStarted\nE\n===============================================================================\n\
    Error: test_mean_absolute_deviation(TestHumanEval): NoMethodError: undefined method\
    \ `mean' for #<TestHumanEval:0x0000562eed3e72f0>\n/tmp/tmp2gwq1ghm.rb:9:in `mean_absolute_deviation'\n\
    /tmp/tmp2gwq1ghm.rb:17:in `call'\n/tmp/tmp2gwq1ghm.rb:17:in `test_mean_absolute_deviation'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_mean_absolute_deviation\n\
    \     16:     candidate = method(:mean_absolute_deviation)\n  => 17:     assert_equal(0.5,\
    \ candidate.call([1.0, 2.0]))\n     18:     assert_equal(1.0, candidate.call([1.0,\
    \ 2.0, 3.0, 4.0]))\n     19:     assert_equal(1.2, candidate.call([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]))\n     20:   end\n===============================================================================\n\
    \nFinished in 0.003992658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
