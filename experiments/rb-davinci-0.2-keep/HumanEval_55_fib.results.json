{
  "name": "HumanEval_55_fib",
  "language": "ruby",
  "results": [
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5_4cq2ta\nStarted\n.\nFinished in 0.000728135 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1373.37 tests/s, 6866.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4a5umd_g\nStarted\n.\nFinished in 0.000857908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1165.63 tests/s, 5828.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpi232_lcp\nStarted\n.\nFinished in 0.001486907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n672.54 tests/s, 3362.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpox7hc4l5\nStarted\n.\nFinished in 0.000910524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1098.27 tests/s, 5491.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpplfi8wqj\nStarted\n.\nFinished in 0.000762171 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1312.04 tests/s, 6560.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr6hhjyst\nStarted\n.\nFinished in 0.000663758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1506.57 tests/s, 7532.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu5yg7p0d\nStarted\n.\nFinished in 0.000734299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.84 tests/s, 6809.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbaj5fj6i\nStarted\n.\nFinished in 0.001187003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n842.46 tests/s, 4212.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9xjk9_hf\nStarted\n.\nFinished in 0.001371343 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n729.21 tests/s, 3646.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppj0d8o2t\nStarted\n.\nFinished in 0.001495427 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n668.71 tests/s, 3343.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts0llidt\nStarted\n.\nFinished in 0.000941203 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.47 tests/s, 5312.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfk1mx88h\nStarted\n.\nFinished in 0.000831879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1202.10 tests/s, 6010.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpasc0j595\nStarted\n.\nFinished in 0.001489475 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n671.38 tests/s, 3356.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp14kp_256\nStarted\n.\nFinished in 0.000957772 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1044.09 tests/s, 5220.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphbudnrfu\nStarted\n.\nFinished in 0.001244573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n803.49 tests/s, 4017.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzw3c_rh8\nStarted\n.\nFinished in 0.000705536 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1417.36 tests/s, 7086.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6c9prwp9\nStarted\n.\nFinished in 0.001076088 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n929.29 tests/s, 4646.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbie0z22a\nStarted\n.\nFinished in 0.00073728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1356.34 tests/s, 6781.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcn1ygivu\nStarted\n.\nFinished in 0.000863092 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1158.63 tests/s, 5793.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9e7vt1h_\nStarted\n.\nFinished in 0.000707626 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1413.18 tests/s, 7065.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8rrz012\nStarted\n.\nFinished in 0.001174102 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n851.71 tests/s, 4258.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv8xrymjk\nStarted\n.\nFinished in 0.001131899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n883.47 tests/s, 4417.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfepotmer\nStarted\n.\nFinished in 0.000743765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1344.51 tests/s, 6722.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbzb6ev_a\nStarted\n.\nFinished in 0.001208483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n827.48 tests/s, 4137.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu3_yh6t0\nStarted\n.\nFinished in 0.000875996 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1141.56 tests/s, 5707.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5kkq8vik\nStarted\n.\nFinished in 0.001522888 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n656.65 tests/s, 3283.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpozybc3b6\nStarted\n.\nFinished in 0.001095758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n912.61 tests/s, 4563.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2z1lucr1\nStarted\n.\nFinished in 0.000889035 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1124.82 tests/s, 5624.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpizvvjoac\nStarted\n.\nFinished in 0.001221142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n818.91 tests/s, 4094.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1m717waz\nStarted\n.\nFinished in 0.001037618 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n963.75 tests/s, 4818.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps2bxa8rm\nStarted\n.\nFinished in 0.000760306 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1315.26 tests/s, 6576.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl0vsqnte\nStarted\n.\nFinished in 0.001053016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n949.65 tests/s, 4748.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpopwxg2mt\nStarted\n.\nFinished in 0.00122983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n813.12 tests/s, 4065.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphf14jye_\nStarted\n.\nFinished in 0.000888418 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1125.60 tests/s, 5627.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp8xyxdiz\nStarted\n.\nFinished in 0.001288126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n776.32 tests/s, 3881.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfmu64q01\nStarted\n.\nFinished in 0.000782788 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1277.49 tests/s, 6387.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpygw4lu2l\nStarted\n.\nFinished in 0.001152726 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n867.51 tests/s, 4337.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmagl5fm8\nStarted\n.\nFinished in 0.001713505 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n583.60 tests/s, 2918.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoey6kiqc\nStarted\n.\nFinished in 0.001640521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n609.56 tests/s, 3047.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzx50va17\nStarted\n.\nFinished in 0.000678775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1473.24 tests/s, 7366.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4me7f352\nStarted\n.\nFinished in 0.000666182 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1501.09 tests/s, 7505.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn39j354p\nStarted\n.\nFinished in 0.00098116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1019.20 tests/s, 5096.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4b4i_i7\nStarted\n.\nFinished in 0.001136941 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n879.55 tests/s, 4397.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbkxr_0pk\nStarted\n.\nFinished in 0.000849016 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1177.83 tests/s, 5889.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo7uy098z\nStarted\n.\nFinished in 0.000932276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1072.64 tests/s, 5363.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsf0y0i4d\nStarted\n.\nFinished in 0.001003609 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n996.40 tests/s, 4982.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv_awq040\nStarted\n.\nFinished in 0.001084524 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n922.06 tests/s, 4610.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp46pfkjwq\nStarted\n.\nFinished in 0.000723866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1381.47 tests/s, 6907.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9u2ll8wh\nStarted\n.\nFinished in 0.000684476 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1460.97 tests/s, 7304.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9454kvgx\nStarted\n.\nFinished in 0.001154215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n866.39 tests/s, 4331.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpon20e7mx\nStarted\n.\nFinished in 0.000729451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1370.89 tests/s, 6854.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplf4ggbix\nStarted\n.\nFinished in 0.001425243 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n701.63 tests/s, 3508.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfae3zur\nStarted\n.\nFinished in 0.001602341 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n624.09 tests/s, 3120.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_a7o89f0\nStarted\n.\nFinished in 0.001071597 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n933.19 tests/s, 4665.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ic5eq_p\nStarted\n.\nFinished in 0.000880374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1135.88 tests/s, 5679.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4sgyfni9\nStarted\n.\nFinished in 0.000840909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1189.19 tests/s, 5945.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbg_c42p9\nStarted\n.\nFinished in 0.001786619 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n559.72 tests/s, 2798.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl3fw4ijy\nStarted\n.\nFinished in 0.00077454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1291.09 tests/s, 6455.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzdv1xhma\nStarted\n.\nFinished in 0.001169988 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n854.71 tests/s, 4273.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxw9u1n_\nStarted\n.\nFinished in 0.000763318 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1310.07 tests/s, 6550.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2bq4yezf\nStarted\n.\nFinished in 0.001262834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n791.87 tests/s, 3959.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpadeeppac\nStarted\n.\nFinished in 0.001611588 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n620.51 tests/s, 3102.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ruw_dzi\nStarted\n.\nFinished in 0.00116738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n856.62 tests/s, 4283.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzy61uu_k\nStarted\n.\nFinished in 0.001839819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n543.53 tests/s, 2717.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5qn_dtts\nStarted\n.\nFinished in 0.000774551 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1291.07 tests/s, 6455.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2brp6bal\nStarted\n.\nFinished in 0.000728877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1371.97 tests/s, 6859.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt9sm5r_4\nStarted\n.\nFinished in 0.001193652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n837.77 tests/s, 4188.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp02zg4iyi\nStarted\n.\nFinished in 0.000713646 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1401.25 tests/s, 7006.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkynd2w2u\nStarted\n.\nFinished in 0.00077485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1290.57 tests/s, 6452.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9n6283p1\nStarted\n.\nFinished in 0.000730251 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1369.39 tests/s, 6846.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8z3ds0ld\nStarted\n.\nFinished in 0.000662009 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1510.55 tests/s, 7552.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp186um8i6\nStarted\n.\nFinished in 0.00106387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n939.96 tests/s, 4699.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwh2iuma7\nStarted\n.\nFinished in 0.001244478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n803.55 tests/s, 4017.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppu__3fqz\nStarted\n.\nFinished in 0.001836728 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n544.45 tests/s, 2722.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr5b9snld\nStarted\n.\nFinished in 0.000888497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1125.50 tests/s, 5627.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvtk61u9f\nStarted\n.\nFinished in 0.001388796 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n720.05 tests/s, 3600.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpaqtl9tbh\nStarted\n.\nFinished in 0.000761394 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1313.38 tests/s, 6566.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp63l45a7\nStarted\n.\nFinished in 0.00130999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n763.36 tests/s, 3816.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkuo4l3zo\nStarted\n.\nFinished in 0.00065742 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1521.10 tests/s, 7605.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf5v3o4pc\nStarted\n.\nFinished in 0.001137377 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n879.22 tests/s, 4396.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpla9pxw2t\nStarted\n.\nFinished in 0.000817719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1222.91 tests/s, 6114.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsc1jx8re\nStarted\n.\nFinished in 0.001441937 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n693.51 tests/s, 3467.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0pa3augo\nStarted\n.\nFinished in 0.000680874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1468.70 tests/s, 7343.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyqgnpl19\nStarted\n.\nFinished in 0.000838712 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1192.30 tests/s, 5961.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ier59xw\nStarted\n.\nFinished in 0.00095254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1049.82 tests/s, 5249.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxi896m8b\nStarted\n.\nFinished in 0.001577144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n634.06 tests/s, 3170.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp66mbn9lk\nStarted\n.\nFinished in 0.000692628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1443.78 tests/s, 7218.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5upixwsm\nStarted\n.\nFinished in 0.000687255 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1455.06 tests/s, 7275.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiohjqpnu\nStarted\n.\nFinished in 0.002048995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n488.04 tests/s, 2440.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvcfw4u4t\nStarted\n.\nFinished in 0.00067209 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.90 tests/s, 7439.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpigpq53by\nStarted\n.\nFinished in 0.001189172 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n840.92 tests/s, 4204.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu01p2u67\nStarted\n.\nFinished in 0.000929787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.52 tests/s, 5377.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu9xo73tt\nStarted\n.\nFinished in 0.001275236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n784.17 tests/s, 3920.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphnu0_sa_\nStarted\n.\nFinished in 0.002376791 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n420.74 tests/s, 2103.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxeey1fro\nStarted\n.\nFinished in 0.000734588 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1361.31 tests/s, 6806.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxocxnal2\nStarted\n.\nFinished in 0.001633819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n612.06 tests/s, 3060.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7nx33cqm\nStarted\n.\nFinished in 0.0012459 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n802.63 tests/s, 4013.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk9r24m1h\nStarted\n.\nFinished in 0.000818785 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1221.32 tests/s, 6106.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpns841qij\nStarted\n.\nFinished in 0.000875031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1142.82 tests/s, 5714.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5u1mqvvv\nStarted\n.\nFinished in 0.001237396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n808.15 tests/s, 4040.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_neb1vx2\nStarted\n.\nFinished in 0.002203367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n453.85 tests/s, 2269.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmzyf0xp6\nStarted\n.\nFinished in 0.001733191 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n576.97 tests/s, 2884.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppbda3daz\nStarted\n.\nFinished in 0.000842541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1186.89 tests/s, 5934.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5in3l2qt\nStarted\n.\nFinished in 0.000746959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1338.76 tests/s, 6693.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2y_0c_3m\nStarted\n.\nFinished in 0.002068891 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n483.35 tests/s, 2416.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5u46pekr\nStarted\n.\nFinished in 0.000850432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1175.87 tests/s, 5879.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqxjf8dzn\nStarted\n.\nFinished in 0.001678974 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n595.60 tests/s, 2978.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_oq6ki8v\nStarted\n.\nFinished in 0.00112822 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n886.35 tests/s, 4431.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph_wlgs04\nStarted\n.\nFinished in 0.000736093 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.52 tests/s, 6792.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq18_8241\nStarted\n.\nFinished in 0.002065671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n484.10 tests/s, 2420.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsm2jnccp\nStarted\n.\nFinished in 0.002324272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n430.24 tests/s, 2151.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw4uqs1dt\nStarted\n.\nFinished in 0.001214821 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n823.17 tests/s, 4115.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfxpgpgjh\nStarted\n.\nFinished in 0.00144867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n690.29 tests/s, 3451.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpekftda04\nStarted\n.\nFinished in 0.001100935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n908.32 tests/s, 4541.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7gpftt9u\nStarted\n.\nFinished in 0.001217984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n821.03 tests/s, 4105.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7346xdjs\nStarted\n.\nFinished in 0.001315139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n760.38 tests/s, 3801.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp105ugi3e\nStarted\n.\nFinished in 0.001387644 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n720.65 tests/s, 3603.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm6p2cmar\nStarted\n.\nFinished in 0.001570758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n636.64 tests/s, 3183.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjm_lyhms\nStarted\n.\nFinished in 0.001761374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n567.74 tests/s, 2838.69 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf4rdvqdh\nStarted\n.\nFinished in 0.001165597 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n857.93 tests/s, 4289.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpms5u1u6t\nStarted\n.\nFinished in 0.001489608 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n671.32 tests/s, 3356.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4pkndsho\nStarted\n.\nFinished in 0.001979052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n505.29 tests/s, 2526.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6dse3lsw\nStarted\n.\nFinished in 0.000853952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1171.03 tests/s, 5855.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy7w5g_vx\nStarted\n.\nFinished in 0.000895715 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1116.43 tests/s, 5582.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf80t6i7d\nStarted\n.\nFinished in 0.001347293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n742.23 tests/s, 3711.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkkuem5it\nStarted\n.\nFinished in 0.001992472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n501.89 tests/s, 2509.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4eja2baw\nStarted\n.\nFinished in 0.000845919 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.15 tests/s, 5910.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ej86od0\nStarted\n.\nFinished in 0.000714617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1399.35 tests/s, 6996.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcsly4w0n\nStarted\n.\nFinished in 0.001312942 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n761.65 tests/s, 3808.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjv3ei20m\nStarted\n.\nFinished in 0.000764313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1308.36 tests/s, 6541.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnyjfernh\nStarted\n.\nFinished in 0.001365346 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n732.42 tests/s, 3662.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiex6eyi9\nStarted\n.\nFinished in 0.001750034 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n571.42 tests/s, 2857.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv6x1aocz\nStarted\n.\nFinished in 0.000862516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1159.40 tests/s, 5796.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxprtxs0b\nStarted\n.\nFinished in 0.001883208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n531.01 tests/s, 2655.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcb6bs40t\nStarted\n.\nFinished in 0.000737567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1355.81 tests/s, 6779.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpl8gk9ea7\nStarted\n.\nFinished in 0.001628348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n614.12 tests/s, 3070.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjecwioj2\nStarted\n.\nFinished in 0.001229627 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n813.25 tests/s, 4066.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd4j73rqx\nStarted\n.\nFinished in 0.001081228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n924.87 tests/s, 4624.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg273rlwh\nStarted\n.\nFinished in 0.000632232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1581.70 tests/s, 7908.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33qm6g6j\nStarted\n.\nFinished in 0.000705597 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1417.24 tests/s, 7086.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe80dpb6i\nStarted\n.\nFinished in 0.000767438 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1303.04 tests/s, 6515.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6l6adxgb\nStarted\n.\nFinished in 0.000680347 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1469.84 tests/s, 7349.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6f103xgh\nStarted\n.\nFinished in 0.0007875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1269.84 tests/s, 6349.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4lw4jvh\nStarted\n.\nFinished in 0.002321492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n430.76 tests/s, 2153.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmwinrsdw\nStarted\n.\nFinished in 0.0019108 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n523.34 tests/s, 2616.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp33fqxk0w\nStarted\n.\nFinished in 0.000732971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1364.31 tests/s, 6821.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp45cj3pei\nStarted\n.\nFinished in 0.001293762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n772.94 tests/s, 3864.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnqfs7hxv\nStarted\n.\nFinished in 0.000978623 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 5109.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv3u5yrfs\nStarted\n.\nFinished in 0.001717296 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n582.31 tests/s, 2911.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvivscfx8\nStarted\n.\nFinished in 0.00072937 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1371.05 tests/s, 6855.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdgjy1ex3\nStarted\n.\nFinished in 0.00102317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n977.35 tests/s, 4886.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr2m9tjxv\nStarted\n.\nFinished in 0.001138412 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n878.42 tests/s, 4392.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgc1x48yh\nStarted\n.\nFinished in 0.001662008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n601.68 tests/s, 3008.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn06zjkzv\nStarted\n.\nFinished in 0.001177286 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n849.41 tests/s, 4247.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1mgbxkxe\nStarted\n.\nFinished in 0.000682979 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1464.17 tests/s, 7320.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ad2z5bc\nStarted\n.\nFinished in 0.000706331 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1415.77 tests/s, 7078.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2vbi25j4\nStarted\n.\nFinished in 0.000716647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1395.39 tests/s, 6976.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4i18teph\nStarted\n.\nFinished in 0.001728799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n578.44 tests/s, 2892.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqgerphfm\nStarted\n.\nFinished in 0.001347004 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n742.39 tests/s, 3711.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3jux7rnc\nStarted\n.\nFinished in 0.00071765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1393.44 tests/s, 6967.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp76_bwdnj\nStarted\n.\nFinished in 0.00110251 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n907.02 tests/s, 4535.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph53a3f_b\nStarted\n.\nFinished in 0.000736106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.50 tests/s, 6792.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpznslsrfk\nStarted\n.\nFinished in 0.000755025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1324.46 tests/s, 6622.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppomr8wq2\nStarted\n.\nFinished in 0.001035897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n965.35 tests/s, 4826.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp18j4s5xi\nStarted\n.\nFinished in 0.000695843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1437.11 tests/s, 7185.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvniwxtaq\nStarted\n.\nFinished in 0.001907876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n524.14 tests/s, 2620.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp4kdiip6\nStarted\n.\nFinished in 0.001041945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n959.74 tests/s, 4798.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqydugq2l\nStarted\n.\nFinished in 0.000736371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1358.01 tests/s, 6790.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpshbsz_ha\nStarted\n.\nFinished in 0.001569254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n637.25 tests/s, 3186.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdk0333ka\nStarted\n.\nFinished in 0.001446848 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n691.16 tests/s, 3455.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8dc4no1f\nStarted\n.\nFinished in 0.001314881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n760.53 tests/s, 3802.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsmj0sbo5\nStarted\n.\nFinished in 0.001347231 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n742.26 tests/s, 3711.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps9va6839\nStarted\n.\nFinished in 0.001405318 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n711.58 tests/s, 3557.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpznc_dx57\nStarted\n.\nFinished in 0.00273969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n365.00 tests/s, 1825.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjxw26woy\nStarted\n.\nFinished in 0.001174282 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n851.58 tests/s, 4257.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzfy2ns8m\nStarted\n.\nFinished in 0.000990138 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1009.96 tests/s, 5049.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd34ckyo6\nStarted\n.\nFinished in 0.000879002 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1137.65 tests/s, 5688.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0no7d5jw\nStarted\n.\nFinished in 0.001208163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n827.70 tests/s, 4138.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwmoth3zf\nStarted\n.\nFinished in 0.001735632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n576.16 tests/s, 2880.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmkkwto5d\nStarted\n.\nFinished in 0.001090966 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n916.62 tests/s, 4583.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmyeduohp\nStarted\n.\nFinished in 0.000763481 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1309.79 tests/s, 6548.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68uapi5h\nStarted\n.\nFinished in 0.001453539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n687.98 tests/s, 3439.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmh_k66hj\nStarted\n.\nFinished in 0.001111897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n899.36 tests/s, 4496.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0sv17tz8\nStarted\n.\nFinished in 0.000975038 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1025.60 tests/s, 5128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp9ycgwf_\nStarted\n.\nFinished in 0.001105496 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n904.57 tests/s, 4522.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjsugmiyi\nStarted\n.\nFinished in 0.001298891 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n769.89 tests/s, 3849.44 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp57a310rw\nStarted\n.\nFinished in 0.000951956 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1050.47 tests/s, 5252.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxmwmczdr\nStarted\n.\nFinished in 0.000773455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1292.90 tests/s, 6464.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp58732ac7\nStarted\n.\nFinished in 0.000747868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1337.13 tests/s, 6685.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsw6q8kjs\nStarted\n.\nFinished in 0.001206028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n829.17 tests/s, 4145.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjjczt86z\nStarted\n.\nFinished in 0.002179676 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n458.78 tests/s, 2293.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3728yai7\nStarted\n.\nFinished in 0.000669591 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1493.45 tests/s, 7467.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp68oldxv1\nStarted\n.\nFinished in 0.00110437 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n905.49 tests/s, 4527.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp20ws7bam\nStarted\n.\nFinished in 0.000917995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1089.33 tests/s, 5446.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp86qzxhyf\nStarted\n.\nFinished in 0.000785515 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1273.05 tests/s, 6365.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyojfvowg\nStarted\n.\nFinished in 0.001026909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n973.80 tests/s, 4868.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpus4ef9o7\nStarted\n.\nFinished in 0.000626641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1595.81 tests/s, 7979.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv__m9c15\nStarted\n.\nFinished in 0.00062577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1598.03 tests/s, 7990.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphmcauih9\nStarted\n.\nFinished in 0.000661737 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1511.17 tests/s, 7555.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps376brcw\nStarted\n.\nFinished in 0.000640967 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1560.14 tests/s, 7800.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}