name: HumanEval_103_rounded_avg
language: ruby
results:
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9uimc2c4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp9uimc2c4.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005556968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.95 tests/s, 899.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6x33_xrs\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp6x33_xrs.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005977049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.31 tests/s, 167.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    avg = (n + m)\
    \ / 2\n    return \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpugz060id\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpugz060id.rb:26:in `test_rounded_avg'\n\
    \     23:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     24:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     25:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 26:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     27:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     28:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     29:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005212792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.84 tests/s, 959.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphg3h4k5o\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmphg3h4k5o.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.004859818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.77 tests/s, 205.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3e3ieca7\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp3e3ieca7.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005381018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.84 tests/s, 929.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp51i_3jhm\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp51i_3jhm.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005169319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.45 tests/s, 967.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi5dg4wl4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpi5dg4wl4.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.00593051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.62 tests/s, 505.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfue_dz71\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpfue_dz71.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005504721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.66 tests/s, 908.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5_ftxl7f\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp5_ftxl7f.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006061237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.98 tests/s, 824.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmcpnccqv\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmcpnccqv.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004925661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.02 tests/s, 203.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuxlfvlmn\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpuxlfvlmn.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005318801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.01 tests/s, 940.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpomnen39f\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpomnen39f.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005150354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.16 tests/s, 582.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9log2201\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp9log2201.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00521709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.68 tests/s, 958.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    for\
    \ i in n..m\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b\" + avg.to_s(2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsi2jde0c\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpsi2jde0c.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005316396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.10 tests/s, 940.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphktkr2jd\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmphktkr2jd.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005097426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.18 tests/s, 196.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg4ct4eph\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpg4ct4eph.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005162898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.69 tests/s, 968.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  sum = (sum / (m - n + 1.0)).round\n  \"0b#{sum.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzll015br\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpzll015br.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005657317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.76 tests/s, 530.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).inject(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwozanyf5\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpwozanyf5.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.006155283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.46 tests/s, 162.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1kh7n7r7\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp1kh7n7r7.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005846072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.06 tests/s, 855.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpku1pw37n\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpku1pw37n.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005973421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.41 tests/s, 502.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3umqujbp\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp3umqujbp.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006144704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.74 tests/s, 813.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnh528y6j\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpnh528y6j.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.006149593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.61 tests/s, 162.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpguy42cbq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpguy42cbq.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006048743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.32 tests/s, 826.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsoq6ll_g\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpsoq6ll_g.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005245934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.62 tests/s, 953.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb6u1f0n7\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpb6u1f0n7.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005752006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.85 tests/s, 173.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpadec9np9\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpadec9np9.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005160393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.78 tests/s, 968.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw6dfu1wd\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpw6dfu1wd.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005524698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.01 tests/s, 905.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprkrshpxc\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmprkrshpxc.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005272072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.68 tests/s, 948.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj5ntx73l\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpj5ntx73l.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005732639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.44 tests/s, 872.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5bla_omq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp5bla_omq.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005808892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.15 tests/s, 860.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1v6ofrx7\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp1v6ofrx7.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005164281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.64 tests/s, 968.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvntud8eb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpvntud8eb.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005532191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.76 tests/s, 903.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr7fms_kf\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpr7fms_kf.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005246786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.59 tests/s, 952.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8l5t4_6u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp8l5t4_6u.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005473281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.71 tests/s, 182.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27pz8909\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp27pz8909.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006315355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.34 tests/s, 791.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqy7laf6b\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpqy7laf6b.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005143412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.42 tests/s, 972.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    \"0b#{avg.to_s(2)}\"\
    \n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_jyeivb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmph_jyeivb.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005540629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.48 tests/s, 902.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi45guwqf\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpi45guwqf.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005130898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.90 tests/s, 974.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr341ykmq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpr341ykmq.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005750302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.90 tests/s, 869.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ahol_su\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp7ahol_su.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005818489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.87 tests/s, 859.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary_string = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary_string}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpovo50gui\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpovo50gui.rb:21:in `test_rounded_avg'\n\
    \     18:     candidate = method(:rounded_avg)\n     19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005928667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.67 tests/s, 506.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp978s3dc8\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp978s3dc8.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005554113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.05 tests/s, 900.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |num|\n      sum += num\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4h3k9pgu\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4h3k9pgu.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005319262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.00 tests/s, 939.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5jmqgl7a\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp5jmqgl7a.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00685526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.87 tests/s, 729.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmcnmsm49\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmcnmsm49.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.008267004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.96 tests/s, 604.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjjmvwc2p\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpjjmvwc2p.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005712521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.05 tests/s, 875.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsxg56m24\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpsxg56m24.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005388411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.58 tests/s, 927.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3git70q3\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp3git70q3.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.005304885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.51 tests/s, 188.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    avg.to_s(2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2vpka_6v\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp2vpka_6v.rb:26:in `test_rounded_avg'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_rounded_avg\n\
    \     25:     candidate = method(:rounded_avg)\n  => 26:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.00975903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.47 tests/s, 102.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmv1qeaoq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmv1qeaoq.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.004583268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.18 tests/s, 218.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfd6xf_wb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpfd6xf_wb.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005957462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.86 tests/s, 167.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa7hr5jmc\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpa7hr5jmc.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005306057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.46 tests/s, 188.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaohc_gqt\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpaohc_gqt.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005197613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.40 tests/s, 961.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu2fwfe1_\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpu2fwfe1_.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005397269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.28 tests/s, 185.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |num|\n      sum += num\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpotjx_73r\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpotjx_73r.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006404652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.14 tests/s, 780.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpycjj8btu\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpycjj8btu.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005109497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.71 tests/s, 978.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6178_2rb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp6178_2rb.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005385447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.69 tests/s, 928.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = (sum / (m - n + 1)).to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpka994rx8\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpka994rx8.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005141086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.51 tests/s, 194.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3s0ygpqy\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp3s0ygpqy.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.00606265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.94 tests/s, 494.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph5o0kioo\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmph5o0kioo.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005621479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.89 tests/s, 889.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgn_3ru2n\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpgn_3ru2n.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005732549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.44 tests/s, 872.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  sum = (sum / (m - n + 1.0)).round\n  sum.to_s(2)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiq30f7u1\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpiq30f7u1.rb:21:in `test_rounded_avg'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_rounded_avg\n\
    \     20:     candidate = method(:rounded_avg)\n  => 21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005886718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.87 tests/s, 169.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpib_9qz7a\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpib_9qz7a.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005500172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.81 tests/s, 909.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8uudbo41\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp8uudbo41.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005330042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.62 tests/s, 938.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplp5bx57f\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmplp5bx57f.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005086334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.61 tests/s, 196.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpet3pvag2\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpet3pvag2.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005851402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.90 tests/s, 854.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp04xa7nn\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpp04xa7nn.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006943605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.02 tests/s, 720.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    avg = (n + m)\
    \ / 2\n    return \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdgxx3kj0\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpdgxx3kj0.rb:26:in `test_rounded_avg'\n\
    \     23:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     24:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     25:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 26:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     27:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     28:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     29:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.007805857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.11 tests/s, 640.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp96gdishx\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp96gdishx.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005306628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.44 tests/s, 942.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdh19chhg\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpdh19chhg.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.007679008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.23 tests/s, 651.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsaqu6njo\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpsaqu6njo.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004722119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.77 tests/s, 211.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  end\n  sum = 0\n  for i\
    \ in n..m\n    sum += i\n  end\n  average = sum / (m - n + 1)\n  return \"0b\"\
    \ + average.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa2u8hr6d\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpa2u8hr6d.rb:29:in `test_rounded_avg'\n\
    \     26:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     27:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     28:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 29:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     30:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     31:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     32:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006432213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.47 tests/s, 777.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdsotx9mo\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpdsotx9mo.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005095351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.26 tests/s, 981.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfxijsqod\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpfxijsqod.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006207291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.10 tests/s, 805.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcsai2juz\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpcsai2juz.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005006443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.74 tests/s, 199.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each do |i|\n\
    \    sum += i\n  end\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9khalt66\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp9khalt66.rb:27:in `test_rounded_avg'\n\
    \     24:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     25:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     26:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 27:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     28:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     29:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     30:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005122311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.22 tests/s, 976.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp89mm9bkf\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp89mm9bkf.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005101983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.00 tests/s, 980.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph4lmdiwj\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmph4lmdiwj.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005184469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.88 tests/s, 964.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp87fuqs71\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp87fuqs71.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.005044365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.24 tests/s, 198.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmf7u60lh\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmf7u60lh.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004625427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.20 tests/s, 216.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsfnemeg3\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpsfnemeg3.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005261653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.05 tests/s, 950.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn4hntsjt\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpn4hntsjt.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005312509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.23 tests/s, 941.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1_wwfj48\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp1_wwfj48.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006122542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.33 tests/s, 816.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyykrcmop\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpyykrcmop.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.006502817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.78 tests/s, 461.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr2fkgha6\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpr2fkgha6.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004819792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.48 tests/s, 207.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhlhd6mz\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmhlhd6mz.rb:30:in `test_rounded_avg'\n\
    \     27:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 30:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     31:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     32:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     33:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005354879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.75 tests/s, 933.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmh2r9ej3\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpmh2r9ej3.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005489343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.17 tests/s, 910.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg0lkruii\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpg0lkruii.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005694357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.61 tests/s, 878.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb0_prefd\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpb0_prefd.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006731927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.55 tests/s, 742.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppgia6rw2\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmppgia6rw2.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005479984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.48 tests/s, 912.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqd77311u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpqd77311u.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005178227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.12 tests/s, 193.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7cg7nx2j\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp7cg7nx2j.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00627542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.35 tests/s, 796.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp84qs_opw\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp84qs_opw.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.007488631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.54 tests/s, 667.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp3k2e2aj\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpp3k2e2aj.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005341204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.22 tests/s, 936.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).inject(:+)\n  average\
    \ = sum / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr89zvv4v\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpr89zvv4v.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005499671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.83 tests/s, 909.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpolx2b_t4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpolx2b_t4.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005085063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.65 tests/s, 589.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0im724_e\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp0im724_e.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005142239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.47 tests/s, 972.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw8voiw4w\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpw8voiw4w.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006066396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.84 tests/s, 824.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp98hbp825\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp98hbp825.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006594889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.63 tests/s, 758.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzhamvd8s\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpzhamvd8s.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004571084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.77 tests/s, 218.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa8oibq9v\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpa8oibq9v.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005154533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.00 tests/s, 582.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm5uhiabv\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpm5uhiabv.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00454168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.18 tests/s, 220.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoxdw0yr_\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpoxdw0yr_.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005223632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.44 tests/s, 957.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps2fl0h51\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmps2fl0h51.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005470336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.80 tests/s, 182.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpydosvfxr\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpydosvfxr.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005563552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.74 tests/s, 898.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpirfxngxi\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpirfxngxi.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005785367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.85 tests/s, 864.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4q7hn_d1\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4q7hn_d1.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005426604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.28 tests/s, 184.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpviik1ne4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpviik1ne4.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005265581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.91 tests/s, 949.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy0zrqloj\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpy0zrqloj.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005322748 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.87 tests/s, 939.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggard3rj\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpggard3rj.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005651527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.94 tests/s, 884.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpv5ds18\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpqpv5ds18.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004901617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.01 tests/s, 1020.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wtcrh8l\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp8wtcrh8l.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005125056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.12 tests/s, 975.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgbrj2mkb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpgbrj2mkb.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.007771182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.68 tests/s, 643.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuifnd5s4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpuifnd5s4.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005231176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.16 tests/s, 955.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpow5nz82u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpow5nz82u.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005091173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.42 tests/s, 196.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg6l3u26c\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpg6l3u26c.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005719284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.85 tests/s, 874.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptgjq4jrv\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmptgjq4jrv.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004903279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.95 tests/s, 1019.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf65ctoq0\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpf65ctoq0.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.008007547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.88 tests/s, 624.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpximdqa0y\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpximdqa0y.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005304464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.52 tests/s, 188.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzby_zxuh\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpzby_zxuh.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005263176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.00 tests/s, 950.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4q5y5csw\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4q5y5csw.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00486669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.48 tests/s, 1027.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp19_v47ny\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp19_v47ny.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.006639653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.61 tests/s, 150.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpastn8776\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpastn8776.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005411975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.78 tests/s, 923.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwolo1smu\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpwolo1smu.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00543517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.99 tests/s, 919.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc5rqu85i\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpc5rqu85i.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005746656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.01 tests/s, 870.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt9nssjda\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpt9nssjda.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005740884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.19 tests/s, 870.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7xod_ucp\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp7xod_ucp.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00561101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.22 tests/s, 891.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb9cmne2y\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpb9cmne2y.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005140235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.54 tests/s, 972.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpturc5tz9\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpturc5tz9.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004843807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.45 tests/s, 1032.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl_8lzm5x\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpl_8lzm5x.rb:19:in `test_rounded_avg'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_rounded_avg\n\
    \     18:     candidate = method(:rounded_avg)\n  => 19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005151767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.11 tests/s, 194.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbk_3phe4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpbk_3phe4.rb:21:in `test_rounded_avg'\n\
    \     18:     candidate = method(:rounded_avg)\n     19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005356933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.67 tests/s, 560.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf2ci2dvf\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpf2ci2dvf.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005101393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.02 tests/s, 980.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpziua32me\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpziua32me.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005327417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.71 tests/s, 187.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9p3ctl1p\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp9p3ctl1p.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005098928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.12 tests/s, 196.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx11fh1y2\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpx11fh1y2.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005433155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.06 tests/s, 920.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgsxisflu\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpgsxisflu.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005243239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.72 tests/s, 190.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph1b7cxpn\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmph1b7cxpn.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00440374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.08 tests/s, 227.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzicneurs\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpzicneurs.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.006100081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.93 tests/s, 491.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).sum / (m - n + 1.0).round.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr0csww9d\nStarted\nE\n===============================================================================\n\
    Error: test_rounded_avg(TestHumanEval): TypeError: String can't be coerced into\
    \ Integer\n/tmp/tmpr0csww9d.rb:12:in `/'\n/tmp/tmpr0csww9d.rb:12:in `rounded_avg'\n\
    /tmp/tmpr0csww9d.rb:18:in `call'\n/tmp/tmpr0csww9d.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n===============================================================================\n\
    \nFinished in 0.000837876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1193.49 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv2tici8_\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpv2tici8_.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005273185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.64 tests/s, 189.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoajak2an\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpoajak2an.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005278235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.46 tests/s, 947.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp06s5yyej\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp06s5yyej.rb:21:in `test_rounded_avg'\n\
    \     18:     candidate = method(:rounded_avg)\n     19:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005354008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.78 tests/s, 560.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).sum / (m - n\
    \ + 1)\n  \"0b#{binary.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5kijq0qh\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp5kijq0qh.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005362372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.48 tests/s, 932.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5olp6uvw\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp5olp6uvw.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00576016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.61 tests/s, 173.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpudqpvu5l\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpudqpvu5l.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.004966167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.36 tests/s, 201.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_tc8ey54\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp_tc8ey54.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.005448144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.55 tests/s, 183.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4kb21mob\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4kb21mob.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005970156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.50 tests/s, 837.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp786eopfq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp786eopfq.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006543484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.82 tests/s, 764.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp262a_f08\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp262a_f08.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005505813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.63 tests/s, 908.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp83atuv5u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp83atuv5u.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006008968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.42 tests/s, 832.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4le6y6o1\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4le6y6o1.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.004625648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.19 tests/s, 216.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qnen1vo\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp9qnen1vo.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00547786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.55 tests/s, 912.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp95_4tbkf\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp95_4tbkf.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005181662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.99 tests/s, 964.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc9d32a2s\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpc9d32a2s.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005505883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.62 tests/s, 908.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptzdvyfsr\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmptzdvyfsr.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005187805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.76 tests/s, 963.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps5hj30k4\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmps5hj30k4.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005486436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.27 tests/s, 911.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp524qkhnk\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp524qkhnk.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005194005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.53 tests/s, 962.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxv9fxn92\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpxv9fxn92.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005624204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.80 tests/s, 889.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkc1tpmgs\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpkc1tpmgs.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005291189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.99 tests/s, 944.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptqwk62ga\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmptqwk62ga.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006617032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.13 tests/s, 755.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxcwlzzqy\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpxcwlzzqy.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004899642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.10 tests/s, 1020.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_4b2gr0u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp_4b2gr0u.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006850742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.97 tests/s, 729.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = (sum / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps1q8th6f\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmps1q8th6f.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005273225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.64 tests/s, 948.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphuzhbsfi\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmphuzhbsfi.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005478671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.53 tests/s, 912.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpklss5xs5\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpklss5xs5.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n===============================================================================\n\
    \nFinished in 0.005543344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.40 tests/s, 180.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgh_27dup\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpgh_27dup.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006408771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.04 tests/s, 780.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpswvctpg1\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpswvctpg1.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005425911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.30 tests/s, 921.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7qhinh4u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp7qhinh4u.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005409401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.86 tests/s, 184.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwcxecxdm\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpwcxecxdm.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.006657168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.21 tests/s, 150.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpned5em79\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpned5em79.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005757526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.69 tests/s, 868.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvvy9z2z3\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpvvy9z2z3.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.00527573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.55 tests/s, 568.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = (sum / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr5sire36\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpr5sire36.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005759078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.64 tests/s, 868.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaqv9gshr\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpaqv9gshr.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005684549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.92 tests/s, 879.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppcyb8f88\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmppcyb8f88.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005847605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.01 tests/s, 855.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33ybcruk\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp33ybcruk.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.006215969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.88 tests/s, 804.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw7yi745o\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpw7yi745o.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004693836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.05 tests/s, 213.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn6ne3j4p\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpn6ne3j4p.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005511864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.43 tests/s, 907.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd0ry0glu\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpd0ry0glu.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005213643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.80 tests/s, 959.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp16k3whs0\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp16k3whs0.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005801249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.38 tests/s, 861.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  average\
    \ = sum / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe7b4pnkr\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpe7b4pnkr.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005495713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.96 tests/s, 909.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcbagw2jb\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpcbagw2jb.rb:24:in `test_rounded_avg'\n\
    \     21:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     22:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     23:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 24:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     25:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     26:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     27:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005337716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.35 tests/s, 936.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0qa3ep_\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpc0qa3ep_.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005371349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.17 tests/s, 930.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcabxvdqz\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpcabxvdqz.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00603086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.81 tests/s, 829.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphpaiq508\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmphpaiq508.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004905954 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.83 tests/s, 1019.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptqezn19u\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmptqezn19u.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00530808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.39 tests/s, 941.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4dox9vns\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp4dox9vns.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005466508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.93 tests/s, 914.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpltkpiwzg\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpltkpiwzg.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005067869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.32 tests/s, 591.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxub_gxr6\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpxub_gxr6.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004941422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.37 tests/s, 1011.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgyby7q1i\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpgyby7q1i.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004747987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.62 tests/s, 210.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each do |num|\n\
    \    sum += num\n  end\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7zrtjql8\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp7zrtjql8.rb:27:in `test_rounded_avg'\n\
    \     24:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     25:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     26:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 27:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     28:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     29:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     30:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005021451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.15 tests/s, 995.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkyzswg1l\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpkyzswg1l.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00562712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.71 tests/s, 888.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  sum = (sum / (m - n + 1.0)).round\n  sum.to_s(2)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphmqdzv6c\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmphmqdzv6c.rb:21:in `test_rounded_avg'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_rounded_avg\n\
    \     20:     candidate = method(:rounded_avg)\n  => 21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.004952882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.90 tests/s, 201.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpalzuwv1p\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpalzuwv1p.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005066376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.38 tests/s, 986.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp3eppt31\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpp3eppt31.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    >(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n  \n? Encoding:\
    \ UTF-8    \n?            S  ASCII\n===============================================================================\n\
    \nFinished in 0.005160012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.80 tests/s, 193.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp72w9isn2\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp72w9isn2.rb:25:in `test_rounded_avg'\n\
    \     22:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 25:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     27:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     28:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.00535023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.91 tests/s, 934.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  (n > m) ? -1 : \"0b#{(n..m).sum.fdiv(m - n + 1).round.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwifyqx1i\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpwifyqx1i.rb:19:in `test_rounded_avg'\n\
    \     16:     candidate = method(:rounded_avg)\n     17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     21:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     22:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.005566747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.64 tests/s, 538.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_75z_7x\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp0_75z_7x.rb:23:in `test_rounded_avg'\n\
    \     20:     candidate = method(:rounded_avg)\n     21:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n  => 23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n     25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"> expected but was\n\
    <\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?            1\n===============================================================================\n\
    \nFinished in 0.004909601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.68 tests/s, 611.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpra6rrxb8\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpra6rrxb8.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.004895926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.25 tests/s, 1021.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8aaf1nz9\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmp8aaf1nz9.rb:17:in `test_rounded_avg'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_rounded_avg\n\
    \     16:     candidate = method(:rounded_avg)\n  => 17:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     18:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     19:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     20:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n<\"0b11\"\
    > expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004070614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.66 tests/s, 245.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf20imltq\nStarted\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/tmp/tmpf20imltq.rb:23:in `test_rounded_avg'\n\
    \     20:     assert_equal(\"0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\"\
    , candidate.call(996, 997))\n  => 23:     assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n\
    \     25:     assert_equal(\"0b110101101\", candidate.call(362, 496))\n     26:\
    \     assert_equal(\"0b1001110010\", candidate.call(350, 902))\n<\"0b1011000010\"\
    > expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n===============================================================================\n\
    \nFinished in 0.005131869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.86 tests/s, 974.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
