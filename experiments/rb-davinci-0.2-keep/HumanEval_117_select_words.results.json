{
  "name": "HumanEval_117_select_words",
  "language": "ruby",
  "results": [
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxzbg769w\nStarted\n.\nFinished in 0.000576472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1734.69 tests/s, 12142.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw6gdcn_g\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpw6gdcn_g.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010424313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.93 tests/s, 95.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpsk8zy3cn\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpsk8zy3cn.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.0129074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.47 tests/s, 154.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpzqczhyo_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpzqczhyo_.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.007454369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.15 tests/s, 670.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpnpm7ae6w\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpnpm7ae6w.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01214132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.36 tests/s, 164.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprkbler8a\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprkbler8a.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014984414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n66.74 tests/s, 133.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvp5dqbd1\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpvp5dqbd1.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008978528 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.38 tests/s, 222.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp12z__eq5\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp12z__eq5.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014254863 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.15 tests/s, 140.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_we1g5fn\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_we1g5fn.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010486298 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.36 tests/s, 190.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpyddyodvk\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpyddyodvk.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011986853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.42 tests/s, 166.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3c75xzb2\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp3c75xzb2.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013884534 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.02 tests/s, 144.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq81kc3pq\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpq81kc3pq.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01634599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n61.18 tests/s, 122.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq9l3alyj\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpq9l3alyj.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012376411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.80 tests/s, 161.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdkcdhrbb\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpdkcdhrbb.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007562611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.23 tests/s, 264.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1r0zxy1o\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp1r0zxy1o.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010012259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.88 tests/s, 199.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3h8856co\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp3h8856co.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.0111185 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n89.94 tests/s, 89.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpce8aved_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpce8aved_.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011293528 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.55 tests/s, 177.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5w2ziooe\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp5w2ziooe.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.00951198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.13 tests/s, 105.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3_v65j56\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp3_v65j56.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013900552 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.94 tests/s, 143.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuuwrwwk0\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuuwrwwk0.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.012561995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.61 tests/s, 79.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpn4bnk6xu\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpn4bnk6xu.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013563485 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.73 tests/s, 147.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxy04ery6\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxy04ery6.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010618645 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.17 tests/s, 94.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpaufa9kax\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpaufa9kax.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010111159 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.90 tests/s, 197.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8xf1d2xv\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp8xf1d2xv.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007835511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.62 tests/s, 255.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp42nak998\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp42nak998.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008533959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.18 tests/s, 234.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpb1u6vwll\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpb1u6vwll.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007771806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.67 tests/s, 257.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpunhv9gfn\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpunhv9gfn.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008217425 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.69 tests/s, 243.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpcm8dtmie\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpcm8dtmie.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007724843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.45 tests/s, 258.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_md04nt8\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_md04nt8.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013170776 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.93 tests/s, 151.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpts1xdbfo\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpts1xdbfo.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009160224 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.17 tests/s, 218.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_yutq0_b\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_yutq0_b.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011663107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.74 tests/s, 171.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp35x36anh\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp35x36anh.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.011240871 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.96 tests/s, 88.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpix1hgk3i\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpix1hgk3i.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010760687 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.93 tests/s, 92.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_dt86aal\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_dt86aal.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008600354 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.27 tests/s, 232.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpprdjr62o\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpprdjr62o.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009176107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.98 tests/s, 217.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpp20sa9ki\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpp20sa9ki.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014833849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.41 tests/s, 134.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpti0decjo\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpti0decjo.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.007151666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.83 tests/s, 139.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp56b37id2\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp56b37id2.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016546386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n60.44 tests/s, 120.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_2s111_c\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_2s111_c.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.013167106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.95 tests/s, 75.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpddmbp7dp\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpddmbp7dp.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008830656 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.24 tests/s, 226.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpi4o1mdyj\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpi4o1mdyj.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014561656 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.67 tests/s, 137.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmperykb4tt\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmperykb4tt.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008355208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.69 tests/s, 239.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp24kdq1g8\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp24kdq1g8.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008523425 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.32 tests/s, 234.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpf_xd0hlx\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpf_xd0hlx.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007821052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.86 tests/s, 255.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxt76t8hm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxt76t8hm.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.011819543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.61 tests/s, 84.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqsu01o8j\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpqsu01o8j.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.00980949 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.94 tests/s, 203.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8_rehtfh\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp8_rehtfh.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009881931 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.19 tests/s, 202.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6llbhzv6\nStarted\n.\nFinished in 0.00064761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1544.14 tests/s, 10808.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuyfzf3xq\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuyfzf3xq.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010675895 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.67 tests/s, 187.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split\n  words.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpffs5vbph\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpffs5vbph.rb:21:in `test_select_words'\n     18:   def test_select_words\n     19:     candidate = method(:select_words)\n     20:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 21:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     22:     assert_equal([], candidate.call(\"simple white space\", 2))\n     23:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     24:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.00955796 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.62 tests/s, 209.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpac00dnb8\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpac00dnb8.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.019311561 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n51.78 tests/s, 103.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9ls9xm0p\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp9ls9xm0p.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010037595 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.63 tests/s, 199.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp41zpu3nj\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp41zpu3nj.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008294866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.56 tests/s, 120.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxkxjm4jh\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxkxjm4jh.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008210419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.80 tests/s, 121.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprxuz25vf\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprxuz25vf.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011405878 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.67 tests/s, 175.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfz4qumgu\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpfz4qumgu.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.022641111 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n44.17 tests/s, 44.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp0x8j1lth\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp0x8j1lth.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013851739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.19 tests/s, 144.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7a__t_xm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp7a__t_xm.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014431218 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.29 tests/s, 138.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpc9b1qzjg\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpc9b1qzjg.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.02046913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n48.85 tests/s, 97.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppu6vkio1\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmppu6vkio1.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.019565498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n51.11 tests/s, 51.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpnkncknlx\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpnkncknlx.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.01789789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n55.87 tests/s, 55.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1wirwf_a\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp1wirwf_a.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.01462596 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.37 tests/s, 68.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select { |word| word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdkvbvsw6\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpdkvbvsw6.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010123275 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.78 tests/s, 98.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpquws35qn\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpquws35qn.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013121967 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n76.21 tests/s, 152.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjthvth2u\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpjthvth2u.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010498377 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.25 tests/s, 95.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp46mhqhd8\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp46mhqhd8.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012336591 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.06 tests/s, 162.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7oh95hmx\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp7oh95hmx.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011815777 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.63 tests/s, 169.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq70xlt50\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpq70xlt50.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.007459638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.05 tests/s, 134.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqudmu6ty\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpqudmu6ty.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015455699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n64.70 tests/s, 129.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmphmydv2sv\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmphmydv2sv.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.012923199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.38 tests/s, 77.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp2myt4fjd\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp2myt4fjd.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012664327 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.96 tests/s, 157.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuwwo7zo_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuwwo7zo_.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007865274 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.14 tests/s, 254.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpbn3qjcv_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpbn3qjcv_.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015685407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.75 tests/s, 127.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpalguic_v\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpalguic_v.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012300248 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.30 tests/s, 162.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_jom3ff5\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp_jom3ff5.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01211521 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.54 tests/s, 165.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp14739edk\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp14739edk.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012339162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.04 tests/s, 162.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxer_7p45\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxer_7p45.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.012497695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.01 tests/s, 80.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpz0cd51ek\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpz0cd51ek.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.007490217 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.51 tests/s, 133.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpflt67io4\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpflt67io4.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.010792595 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.66 tests/s, 92.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpm86niyt_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpm86niyt_.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015354545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.13 tests/s, 130.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmph95h239o\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmph95h239o.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.014196762 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.44 tests/s, 70.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpm6sw8amm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpm6sw8amm.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007475081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.78 tests/s, 267.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpscg4b1xt\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpscg4b1xt.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011770375 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.96 tests/s, 169.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpexsdos8f\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpexsdos8f.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.014383635 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.52 tests/s, 69.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmptv9ccjto\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmptv9ccjto.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007709144 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.72 tests/s, 259.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfup8g1ge\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpfup8g1ge.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.010048947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.51 tests/s, 497.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3159naxy\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp3159naxy.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.011001981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.89 tests/s, 90.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9ejg4gmv\nStarted\n.\nFinished in 0.000958897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.86 tests/s, 7300.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpb7rwbika\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpb7rwbika.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012151985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.29 tests/s, 164.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpbxl6efve\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpbxl6efve.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015155977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.98 tests/s, 131.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpud2cu7fl\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpud2cu7fl.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008884945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.55 tests/s, 225.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpyvwajix7\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpyvwajix7.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008771457 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.01 tests/s, 228.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpta7ap0hh\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpta7ap0hh.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008481071 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.91 tests/s, 117.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpa3oajnh2\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpa3oajnh2.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011584581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.32 tests/s, 172.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprxyjkifd\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprxyjkifd.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.020747463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n48.20 tests/s, 240.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpi94s4lc9\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpi94s4lc9.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.020796823 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n48.08 tests/s, 96.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7uur7s1p\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp7uur7s1p.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01472216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.92 tests/s, 135.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpmq6v6dhw\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpmq6v6dhw.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016968275 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n58.93 tests/s, 117.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprcn6_0gd\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprcn6_0gd.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007682958 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.16 tests/s, 260.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpayl9m16v\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpayl9m16v.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01362458 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.40 tests/s, 146.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpt5gjugp4\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpt5gjugp4.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.018346463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n54.51 tests/s, 109.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpizp8uy31\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpizp8uy31.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.009978638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.21 tests/s, 100.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp6ufjverm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp6ufjverm.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.019414758 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n51.51 tests/s, 103.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpcsrnsper\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpcsrnsper.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.009423709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n106.12 tests/s, 106.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp64jteo2n\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp64jteo2n.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008977247 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.39 tests/s, 111.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy6iq521x\nStarted\n.\nFinished in 0.000612453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1632.78 tests/s, 11429.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpoeewexri\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpoeewexri.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016452309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n60.78 tests/s, 121.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp89ooen5q\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp89ooen5q.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.00869619 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.99 tests/s, 114.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3ks1h1bq\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp3ks1h1bq.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.01029851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.10 tests/s, 97.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfbhxy5kx\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpfbhxy5kx.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012126507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.46 tests/s, 164.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpd343j89z\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpd343j89z.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012346827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.99 tests/s, 161.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8hbexk9t\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp8hbexk9t.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008733339 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.50 tests/s, 229.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpgsmx85_o\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpgsmx85_o.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015851749 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.08 tests/s, 126.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvg0ncapm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpvg0ncapm.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016022308 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n62.41 tests/s, 124.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5j6ip2dz\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp5j6ip2dz.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009158315 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.19 tests/s, 218.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpips0l0z3\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpips0l0z3.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01134132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.17 tests/s, 176.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxvajzvuq\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxvajzvuq.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.019030964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n52.55 tests/s, 262.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp470g6xut\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp470g6xut.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.018015713 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n55.51 tests/s, 111.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxcb7leo7\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxcb7leo7.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010665901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.76 tests/s, 187.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp0rxb8m4y\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp0rxb8m4y.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009564688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.55 tests/s, 209.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpy1ydu8ss\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpy1ydu8ss.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.014743348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.83 tests/s, 67.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp2yq63yhv\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp2yq63yhv.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.019563568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n51.12 tests/s, 51.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgl76h4o\nStarted\n.\nFinished in 0.000967917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1033.15 tests/s, 7232.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpd6zbxofg\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpd6zbxofg.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011066419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.36 tests/s, 180.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp83cvo9w9\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp83cvo9w9.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008139788 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.85 tests/s, 122.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpzq6_j0zq\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpzq6_j0zq.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.019089142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n52.39 tests/s, 104.77 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxegrr0oy\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxegrr0oy.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.012434207 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.42 tests/s, 80.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdrthr1nb\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpdrthr1nb.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.011480086 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.11 tests/s, 87.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpcd44zjcf\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpcd44zjcf.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015985366 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n62.56 tests/s, 125.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7ciyzqu_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp7ciyzqu_.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.012235098 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.73 tests/s, 81.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdj7fl2fa\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpdj7fl2fa.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013473461 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.22 tests/s, 148.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpe1rzn19p\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpe1rzn19p.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.013939268 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.74 tests/s, 71.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9mzv719v\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp9mzv719v.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014349211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.69 tests/s, 139.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpnwr5_vom\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpnwr5_vom.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.018039961 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n55.43 tests/s, 277.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpp5o6fgz8\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpp5o6fgz8.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.009848239 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.54 tests/s, 101.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp24cqq057\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp24cqq057.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014080948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.02 tests/s, 142.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpydsgf8gg\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpydsgf8gg.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011359985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.03 tests/s, 176.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpimy72ghl\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpimy72ghl.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009741712 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.65 tests/s, 205.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpis11qw3n\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpis11qw3n.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.018552881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n53.90 tests/s, 53.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp2kinbfna\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp2kinbfna.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.013615654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.44 tests/s, 73.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpl0y1akch\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpl0y1akch.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010492176 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.31 tests/s, 190.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpztzyxaow\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpztzyxaow.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008701341 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.92 tests/s, 114.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpi4jj9m7l\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpi4jj9m7l.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.006845181 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.09 tests/s, 292.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpffbbj47z\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpffbbj47z.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007724195 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.46 tests/s, 258.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpnoo2btax\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpnoo2btax.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.006858851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.80 tests/s, 291.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprbb0ue38\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprbb0ue38.rb:23:in `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\nFinished in 0.009474969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.54 tests/s, 527.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpu14cgkp9\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpu14cgkp9.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.006607845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.34 tests/s, 302.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpz25ywxm0\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpz25ywxm0.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011329383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.27 tests/s, 176.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmphxrh4lcb\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmphxrh4lcb.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.019010865 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n52.60 tests/s, 105.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplkldus2z\nStarted\n.\nFinished in 0.000589366 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1696.74 tests/s, 11877.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4fwjgstq\nStarted\n.\nFinished in 0.000558393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1790.85 tests/s, 12535.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp58g43rhf\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp58g43rhf.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010967226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n91.18 tests/s, 182.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq8nkfwo2\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpq8nkfwo2.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009062096 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.35 tests/s, 220.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpt2b8p6v6\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpt2b8p6v6.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016459107 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n60.76 tests/s, 121.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9fg1wwk9\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp9fg1wwk9.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011357143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.05 tests/s, 176.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpamkxztr4\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpamkxztr4.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.019112754 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n52.32 tests/s, 104.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8997lu9z\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp8997lu9z.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01759011 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n56.85 tests/s, 113.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpns_it6g4\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpns_it6g4.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.02164421 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n46.20 tests/s, 46.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpkpikl8sm\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpkpikl8sm.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007869118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.08 tests/s, 254.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpy1p_6luk\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpy1p_6luk.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012701829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.73 tests/s, 157.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvgrifma6\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpvgrifma6.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014076825 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.04 tests/s, 142.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp4xt4gqit\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp4xt4gqit.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014639733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.31 tests/s, 136.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpv507bz36\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpv507bz36.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.016894603 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n59.19 tests/s, 118.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpk920vr0j\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpk920vr0j.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.01011474 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.87 tests/s, 197.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxcdpfjib\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpxcdpfjib.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010642253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.97 tests/s, 187.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpl6elwff_\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpl6elwff_.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007847356 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.43 tests/s, 254.86 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5vbtjct3\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp5vbtjct3.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007618001 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.27 tests/s, 262.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9wujche7\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp9wujche7.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.00853169 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.21 tests/s, 117.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq_duvbbz\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpq_duvbbz.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012813313 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.04 tests/s, 156.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppmy1ik6x\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmppmy1ik6x.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012685353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.83 tests/s, 157.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7ek1obf2\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp7ek1obf2.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.00863635 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.79 tests/s, 231.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp4ac0ms65\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp4ac0ms65.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.018642162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n53.64 tests/s, 53.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprkaf805z\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprkaf805z.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010794254 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.64 tests/s, 185.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpg_rno6gx\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpg_rno6gx.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.018264961 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n54.75 tests/s, 109.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpx3omhb0v\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpx3omhb0v.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.015175977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.89 tests/s, 131.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpu4rajonv\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpu4rajonv.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009632747 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.81 tests/s, 207.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpd1q9rv9n\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpd1q9rv9n.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009121292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.63 tests/s, 219.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuc243dww\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuc243dww.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.013273132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n75.34 tests/s, 150.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp0z5zd0qd\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp0z5zd0qd.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.009974236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.26 tests/s, 100.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5nsi_302\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp5nsi_302.rb:19:in `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\nFinished in 0.008382781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.29 tests/s, 119.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuu01arh0\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuu01arh0.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.010478879 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.43 tests/s, 190.86 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmps924bore\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmps924bore.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.017598723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n56.82 tests/s, 113.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpn2leqc46\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpn2leqc46.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012038473 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.07 tests/s, 166.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuouv21b6\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuouv21b6.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014638703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.31 tests/s, 136.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpaylbnjq4\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpaylbnjq4.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011247599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.91 tests/s, 177.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpp3v2q51y\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpp3v2q51y.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007415137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.86 tests/s, 269.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpcfzbud9e\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpcfzbud9e.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007978716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.33 tests/s, 250.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpa_w7sd7l\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpa_w7sd7l.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.017525517 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n57.06 tests/s, 114.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpi_3lr3ps\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpi_3lr3ps.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.011821111 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n84.59 tests/s, 169.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpmvt0ip1g\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpmvt0ip1g.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007259295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.75 tests/s, 275.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp976mk_vp\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp976mk_vp.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007751175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.01 tests/s, 258.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprft3d2vo\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmprft3d2vo.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007191817 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.05 tests/s, 278.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpph35s02e\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpph35s02e.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009558344 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.62 tests/s, 209.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpo8qwatak\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpo8qwatak.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009043978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.57 tests/s, 221.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpuwo7xmmh\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpuwo7xmmh.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.008628734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.89 tests/s, 231.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmph2gnmu50\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmph2gnmu50.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.009633067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.81 tests/s, 207.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8btwyi3l\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmp8btwyi3l.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012786142 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.21 tests/s, 156.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpgxco02ou\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpgxco02ou.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.014767568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n67.72 tests/s, 135.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpve9hw65u\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpve9hw65u.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.007436331 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.47 tests/s, 268.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpkj1hx_ln\nStarted\nF\n===============================================================================\nFailure: test_select_words(TestHumanEval)\n/tmp/tmpkj1hx_ln.rb:20:in `test_select_words'\n     17:   def test_select_words\n     18:     candidate = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\nFinished in 0.012118703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.52 tests/s, 165.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}