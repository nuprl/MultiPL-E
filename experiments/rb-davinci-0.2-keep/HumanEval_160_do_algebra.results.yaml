name: HumanEval_160_do_algebra
language: ruby
results:
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpslo_oqqj\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpslo_oqqj.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004621199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.39 tests/s, 216.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmq0vgwqi\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpmq0vgwqi.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004582636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.22 tests/s, 436.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpknipcdpv\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpknipcdpv.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005064092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.47 tests/s, 394.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqrj2hru1\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpqrj2hru1.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004702843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.64 tests/s, 212.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo3v4n2tx\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpo3v4n2tx.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005174049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.27 tests/s, 386.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa7lxp4ea\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpa7lxp4ea.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004729783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.43 tests/s, 422.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxz6b7k8n\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpxz6b7k8n.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005449806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.49 tests/s, 366.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptl34u9v4\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmptl34u9v4.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00484528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.39 tests/s, 206.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2hh3ulu5\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp2hh3ulu5.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004549774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.79 tests/s, 439.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1pr6q094\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp1pr6q094.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00534479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.10 tests/s, 374.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8zv0usld\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp8zv0usld.rb:21:in `block in do_algebra'\n/tmp/tmp8zv0usld.rb:20:in `each'\n\
    /tmp/tmp8zv0usld.rb:20:in `each_with_index'\n/tmp/tmp8zv0usld.rb:20:in `each'\n\
    /tmp/tmp8zv0usld.rb:20:in `reduce'\n/tmp/tmp8zv0usld.rb:20:in `do_algebra'\n/tmp/tmp8zv0usld.rb:28:in\
    \ `call'\n/tmp/tmp8zv0usld.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000753517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1327.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0jdls1f_\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp0jdls1f_.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004763767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.92 tests/s, 419.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result += operand.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppnp0u12f\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmppnp0u12f.rb:21:in `block in do_algebra'\n/tmp/tmppnp0u12f.rb:20:in `each'\n\
    /tmp/tmppnp0u12f.rb:20:in `each_with_index'\n/tmp/tmppnp0u12f.rb:20:in `each'\n\
    /tmp/tmppnp0u12f.rb:20:in `inject'\n/tmp/tmppnp0u12f.rb:20:in `do_algebra'\n/tmp/tmppnp0u12f.rb:28:in\
    \ `call'\n/tmp/tmppnp0u12f.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000735163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1360.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppjbskwec\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmppjbskwec.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004549183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.82 tests/s, 219.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9v6j_ahx\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp9v6j_ahx.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006529758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.15 tests/s, 153.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3chrul4\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpz3chrul4.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.007301549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.96 tests/s, 273.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzx6wazf1\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpzx6wazf1.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.006384595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.63 tests/s, 313.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppm5dduyk\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmppm5dduyk.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004650715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.02 tests/s, 430.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpekgrj49q\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpekgrj49q.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005190359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.66 tests/s, 385.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk5u8_x__\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpk5u8_x__.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005235354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.01 tests/s, 382.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyphmjk3h\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpyphmjk3h.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005369427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.24 tests/s, 186.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx_cs27p1\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpx_cs27p1.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005634174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.49 tests/s, 354.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbwbz_7r7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpbwbz_7r7.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006024428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.99 tests/s, 165.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk9qvj42z\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpk9qvj42z.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005726237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.63 tests/s, 349.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_9vmr7ra\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp_9vmr7ra.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004567417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.94 tests/s, 437.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpixb6xej_\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpixb6xej_.rb:33:in `test_do_algebra'\n\
    \     30:   def test_do_algebra\n     31:     candidate = method(:do_algebra)\n\
    \     32:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004700027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.76 tests/s, 425.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (value, index)|\n    result.send(operator[index], value)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp418bi4rg\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp418bi4rg.rb:21:in `block in do_algebra'\n/tmp/tmp418bi4rg.rb:20:in `each'\n\
    /tmp/tmp418bi4rg.rb:20:in `each_with_index'\n/tmp/tmp418bi4rg.rb:20:in `each'\n\
    /tmp/tmp418bi4rg.rb:20:in `inject'\n/tmp/tmp418bi4rg.rb:20:in `do_algebra'\n/tmp/tmp418bi4rg.rb:28:in\
    \ `call'\n/tmp/tmp418bi4rg.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000783764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1275.89 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprynbil3j\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmprynbil3j.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00457977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.35 tests/s, 436.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpon94jg5s\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpon94jg5s.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00448916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.76 tests/s, 445.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk53w603h\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpk53w603h.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004635476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.73 tests/s, 215.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjlbuihs7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpjlbuihs7.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004806448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.05 tests/s, 416.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_nyzuim9\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp_nyzuim9.rb:21:in `block in do_algebra'\n/tmp/tmp_nyzuim9.rb:20:in `each'\n\
    /tmp/tmp_nyzuim9.rb:20:in `each_with_index'\n/tmp/tmp_nyzuim9.rb:20:in `each'\n\
    /tmp/tmp_nyzuim9.rb:20:in `inject'\n/tmp/tmp_nyzuim9.rb:20:in `do_algebra'\n/tmp/tmp_nyzuim9.rb:28:in\
    \ `call'\n/tmp/tmp_nyzuim9.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000738048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1354.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5coa4fb0\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp5coa4fb0.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004460927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.17 tests/s, 448.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu71kgoro\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpu71kgoro.rb:21:in `block in do_algebra'\n/tmp/tmpu71kgoro.rb:20:in `each'\n\
    /tmp/tmpu71kgoro.rb:20:in `each_with_index'\n/tmp/tmpu71kgoro.rb:20:in `each'\n\
    /tmp/tmpu71kgoro.rb:20:in `inject'\n/tmp/tmpu71kgoro.rb:20:in `do_algebra'\n/tmp/tmpu71kgoro.rb:28:in\
    \ `call'\n/tmp/tmpu71kgoro.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.001070093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    934.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpum993f6q\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpum993f6q.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005040117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.41 tests/s, 396.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeeon0wi4\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpeeon0wi4.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005985655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.07 tests/s, 334.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppc2cec76\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmppc2cec76.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004798783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.39 tests/s, 416.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzx48z702\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpzx48z702.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004544224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.06 tests/s, 440.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbgpgcbnz\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpbgpgcbnz.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00469585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.95 tests/s, 425.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkbnah6qc\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkbnah6qc.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004901526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.02 tests/s, 408.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpitip9dzr\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpitip9dzr.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004938295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.50 tests/s, 405.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpse6uhmp8\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpse6uhmp8.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005425662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.31 tests/s, 368.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgn2vtp3u\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpgn2vtp3u.rb:21:in `block in do_algebra'\n/tmp/tmpgn2vtp3u.rb:20:in `each'\n\
    /tmp/tmpgn2vtp3u.rb:20:in `each_with_index'\n/tmp/tmpgn2vtp3u.rb:20:in `each'\n\
    /tmp/tmpgn2vtp3u.rb:20:in `inject'\n/tmp/tmpgn2vtp3u.rb:20:in `do_algebra'\n/tmp/tmpgn2vtp3u.rb:28:in\
    \ `call'\n/tmp/tmpgn2vtp3u.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000895604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1116.56 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvsscpioo\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpvsscpioo.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005354047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.77 tests/s, 186.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi_opfns7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpi_opfns7.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004755382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.29 tests/s, 210.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaqxqev9j\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpaqxqev9j.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005511733 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.43 tests/s, 362.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmqdvgzzw\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpmqdvgzzw.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005586465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.00 tests/s, 358.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp423mey7a\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp423mey7a.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004751393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.46 tests/s, 420.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgg8u98yr\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpgg8u98yr.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004445738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.93 tests/s, 224.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxl93gvav\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpxl93gvav.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004445158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.96 tests/s, 449.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0an7w578\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp0an7w578.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005797611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.48 tests/s, 344.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhmu5_vg\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpuhmu5_vg.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004559534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.32 tests/s, 219.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpndujrzux\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpndujrzux.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.006172856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.00 tests/s, 324.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpna6qa_e2\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpna6qa_e2.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004576955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.49 tests/s, 436.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0d4498ck\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp0d4498ck.rb:21:in `block in do_algebra'\n/tmp/tmp0d4498ck.rb:20:in `each'\n\
    /tmp/tmp0d4498ck.rb:20:in `each_with_index'\n/tmp/tmp0d4498ck.rb:20:in `each'\n\
    /tmp/tmp0d4498ck.rb:20:in `inject'\n/tmp/tmp0d4498ck.rb:20:in `do_algebra'\n/tmp/tmp0d4498ck.rb:28:in\
    \ `call'\n/tmp/tmp0d4498ck.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000827055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1209.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu2klfolb\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpu2klfolb.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00463187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.90 tests/s, 431.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqa1g6_0n\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpqa1g6_0n.rb:21:in `block in do_algebra'\n/tmp/tmpqa1g6_0n.rb:20:in `each'\n\
    /tmp/tmpqa1g6_0n.rb:20:in `each_with_index'\n/tmp/tmpqa1g6_0n.rb:20:in `each'\n\
    /tmp/tmpqa1g6_0n.rb:20:in `inject'\n/tmp/tmpqa1g6_0n.rb:20:in `do_algebra'\n/tmp/tmpqa1g6_0n.rb:28:in\
    \ `call'\n/tmp/tmpqa1g6_0n.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000773153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1293.41 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsf_r9tpu\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpsf_r9tpu.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004620228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.44 tests/s, 432.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppg8_j35n\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmppg8_j35n.rb:45:in `test_do_algebra'\n\
    \     42:   def test_do_algebra\n     43:     candidate = method(:do_algebra)\n\
    \     44:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 45:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     46:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     47:   end\n     48: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005271953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.68 tests/s, 379.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_y4z7xy6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp_y4z7xy6.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.0045683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.90 tests/s, 437.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp35a7sv32\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp35a7sv32.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004653008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.91 tests/s, 214.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu2em02g0\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpu2em02g0.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004739602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.99 tests/s, 210.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  # operand.each_with_index do |num, index|\n  #   if index == 0\n  #     result\
    \ = num\n  #   else\n  #     result = result.send(operator[index-1], num)\n  #\
    \   end\n  # end\n  # result\n  operand.each_with_index.inject(0) do |result,\
    \ (num, index)|\n    if index == 0\n      result = num\n    else\n      result\
    \ = result.send(operator[index-1], num)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4dng4id9\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp4dng4id9.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004760421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.07 tests/s, 420.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6qnoee6m\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6qnoee6m.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004893821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.34 tests/s, 408.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg3neijpf\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpg3neijpf.rb:21:in `block in do_algebra'\n/tmp/tmpg3neijpf.rb:20:in `each'\n\
    /tmp/tmpg3neijpf.rb:20:in `each_with_index'\n/tmp/tmpg3neijpf.rb:20:in `each'\n\
    /tmp/tmpg3neijpf.rb:20:in `inject'\n/tmp/tmpg3neijpf.rb:20:in `do_algebra'\n/tmp/tmpg3neijpf.rb:28:in\
    \ `call'\n/tmp/tmpg3neijpf.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000798742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1251.97 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu0qv8mia\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpu0qv8mia.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004651565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.98 tests/s, 429.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuemy65n8\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpuemy65n8.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005546288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.30 tests/s, 360.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result = result.to_f / operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result = result ** operand[i+1]\n\
    \        end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvms5ejsw\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpvms5ejsw.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.006661686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.11 tests/s, 300.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt1abqg6a\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpt1abqg6a.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004863395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.62 tests/s, 411.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpixfxlytm\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpixfxlytm.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.007210648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.68 tests/s, 277.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, index|\n    result = result.send(op, operand[index\
    \ + 1])\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg6nv6g6w\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpg6nv6g6w.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005827897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.59 tests/s, 343.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6e0qndnx\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6e0qndnx.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004561596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.22 tests/s, 438.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7qxs7fte\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp7qxs7fte.rb:21:in `block in do_algebra'\n/tmp/tmp7qxs7fte.rb:20:in `each'\n\
    /tmp/tmp7qxs7fte.rb:20:in `each_with_index'\n/tmp/tmp7qxs7fte.rb:20:in `each'\n\
    /tmp/tmp7qxs7fte.rb:20:in `reduce'\n/tmp/tmp7qxs7fte.rb:20:in `do_algebra'\n/tmp/tmp7qxs7fte.rb:28:in\
    \ `call'\n/tmp/tmp7qxs7fte.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.00080806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1237.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps_nrca7c\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmps_nrca7c.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004863265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.62 tests/s, 411.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplhr_zokn\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmplhr_zokn.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005218323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.63 tests/s, 383.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxbpxppul\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpxbpxppul.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004958162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.69 tests/s, 201.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1dlye7w7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp1dlye7w7.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004581315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.28 tests/s, 436.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkx1y33br\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpkx1y33br.rb:21:in `block in do_algebra'\n/tmp/tmpkx1y33br.rb:20:in `each'\n\
    /tmp/tmpkx1y33br.rb:20:in `each_with_index'\n/tmp/tmpkx1y33br.rb:20:in `each'\n\
    /tmp/tmpkx1y33br.rb:20:in `inject'\n/tmp/tmpkx1y33br.rb:20:in `do_algebra'\n/tmp/tmpkx1y33br.rb:28:in\
    \ `call'\n/tmp/tmpkx1y33br.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000939347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1064.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwvwiytd\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpwwvwiytd.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004767875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.74 tests/s, 419.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0k19h8c8\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp0k19h8c8.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004666976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.27 tests/s, 214.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqgez_qmv\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpqgez_qmv.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004691261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.16 tests/s, 213.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoptauf98\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpoptauf98.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004720095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.86 tests/s, 423.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8rnv2_47\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp8rnv2_47.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005384083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.73 tests/s, 185.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkadpepme\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkadpepme.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004552078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.68 tests/s, 219.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp832ld5xn\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp832ld5xn.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004777382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.32 tests/s, 418.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6yo76cjb\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp6yo76cjb.rb:21:in `block in do_algebra'\n/tmp/tmp6yo76cjb.rb:20:in `each'\n\
    /tmp/tmp6yo76cjb.rb:20:in `each_with_index'\n/tmp/tmp6yo76cjb.rb:20:in `each'\n\
    /tmp/tmp6yo76cjb.rb:20:in `inject'\n/tmp/tmp6yo76cjb.rb:20:in `do_algebra'\n/tmp/tmp6yo76cjb.rb:28:in\
    \ `call'\n/tmp/tmp6yo76cjb.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000766371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1304.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxe699clo\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpxe699clo.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005931843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.58 tests/s, 337.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0ke1u8o\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmph0ke1u8o.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005100211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.07 tests/s, 392.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzikh7eo3\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpzikh7eo3.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.006182054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.76 tests/s, 323.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwizgpm93\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpwizgpm93.rb:21:in `block in do_algebra'\n/tmp/tmpwizgpm93.rb:20:in `each'\n\
    /tmp/tmpwizgpm93.rb:20:in `each_with_index'\n/tmp/tmpwizgpm93.rb:20:in `each'\n\
    /tmp/tmpwizgpm93.rb:20:in `inject'\n/tmp/tmpwizgpm93.rb:20:in `do_algebra'\n/tmp/tmpwizgpm93.rb:28:in\
    \ `call'\n/tmp/tmpwizgpm93.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000959815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1041.87 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4akmmvc9\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp4akmmvc9.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00482414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.29 tests/s, 207.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx_9q6odd\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpx_9q6odd.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004916404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.40 tests/s, 406.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkgnsvz5l\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkgnsvz5l.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005947833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.13 tests/s, 336.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9rfvyxyg\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp9rfvyxyg.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004905834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.84 tests/s, 203.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplqf_0g2a\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmplqf_0g2a.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004705848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.50 tests/s, 425.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv0p4xc1k\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpv0p4xc1k.rb:21:in `block in do_algebra'\n/tmp/tmpv0p4xc1k.rb:20:in `each'\n\
    /tmp/tmpv0p4xc1k.rb:20:in `each_with_index'\n/tmp/tmpv0p4xc1k.rb:20:in `each'\n\
    /tmp/tmpv0p4xc1k.rb:20:in `reduce'\n/tmp/tmpv0p4xc1k.rb:20:in `do_algebra'\n/tmp/tmpv0p4xc1k.rb:28:in\
    \ `call'\n/tmp/tmpv0p4xc1k.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.001211347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    825.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp32s8x1o9\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp32s8x1o9.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004668729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.19 tests/s, 214.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwrcx8oq\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpmwrcx8oq.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004986986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.52 tests/s, 401.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0lhawjg\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpc0lhawjg.rb:21:in `block in do_algebra'\n/tmp/tmpc0lhawjg.rb:20:in `each'\n\
    /tmp/tmpc0lhawjg.rb:20:in `each_with_index'\n/tmp/tmpc0lhawjg.rb:20:in `each'\n\
    /tmp/tmpc0lhawjg.rb:20:in `inject'\n/tmp/tmpc0lhawjg.rb:20:in `do_algebra'\n/tmp/tmpc0lhawjg.rb:28:in\
    \ `call'\n/tmp/tmpc0lhawjg.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000810143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1234.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88nejch6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp88nejch6.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005351732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.86 tests/s, 186.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcc6ss5om\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpcc6ss5om.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004717369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.98 tests/s, 423.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8svc3qax\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp8svc3qax.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00469055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.19 tests/s, 426.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfjsid33k\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpfjsid33k.rb:21:in `block in do_algebra'\n/tmp/tmpfjsid33k.rb:20:in `each'\n\
    /tmp/tmpfjsid33k.rb:20:in `each_with_index'\n/tmp/tmpfjsid33k.rb:20:in `each'\n\
    /tmp/tmpfjsid33k.rb:20:in `inject'\n/tmp/tmpfjsid33k.rb:20:in `do_algebra'\n/tmp/tmpfjsid33k.rb:28:in\
    \ `call'\n/tmp/tmpfjsid33k.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000860228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1162.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9hjsxp1r\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp9hjsxp1r.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005159391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.82 tests/s, 387.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp15zg_4l6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp15zg_4l6.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004593687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.69 tests/s, 217.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    # your code here\n\
    \    result = operand[0]\n    for i in 0..operator.length-1\n        case operator[i]\n\
    \        when \"+\"\n            result += operand[i+1]\n        when \"-\"\n\
    \            result -= operand[i+1]\n        when \"*\"\n            result *=\
    \ operand[i+1]\n        when \"//\"\n            result /= operand[i+1]\n    \
    \    when \"**\"\n            result **= operand[i+1]\n        end\n    end\n\
    \    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo7iaaupc\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpo7iaaupc.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004579109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.38 tests/s, 436.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_90g0tic\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp_90g0tic.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004538433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.34 tests/s, 220.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7czgk4l9\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp7czgk4l9.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004607973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.02 tests/s, 217.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggcttbdy\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpggcttbdy.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004479863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.22 tests/s, 446.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf82iebne\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpf82iebne.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004779968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.21 tests/s, 418.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp99awh2ly\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp99awh2ly.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005365268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.38 tests/s, 186.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4bjd6cav\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp4bjd6cav.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004791348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.71 tests/s, 417.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz763c6xz\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpz763c6xz.rb:21:in `block in do_algebra'\n/tmp/tmpz763c6xz.rb:20:in `each'\n\
    /tmp/tmpz763c6xz.rb:20:in `each_with_index'\n/tmp/tmpz763c6xz.rb:20:in `each'\n\
    /tmp/tmpz763c6xz.rb:20:in `inject'\n/tmp/tmpz763c6xz.rb:20:in `do_algebra'\n/tmp/tmpz763c6xz.rb:28:in\
    \ `call'\n/tmp/tmpz763c6xz.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000910321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1098.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv7_4xpy9\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpv7_4xpy9.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005127491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.03 tests/s, 195.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzojsot7u\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpzojsot7u.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004853886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.02 tests/s, 412.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbybznrj2\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpbybznrj2.rb:21:in `block in do_algebra'\n/tmp/tmpbybznrj2.rb:20:in `each'\n\
    /tmp/tmpbybznrj2.rb:20:in `each_with_index'\n/tmp/tmpbybznrj2.rb:20:in `each'\n\
    /tmp/tmpbybznrj2.rb:20:in `inject'\n/tmp/tmpbybznrj2.rb:20:in `do_algebra'\n/tmp/tmpbybznrj2.rb:28:in\
    \ `call'\n/tmp/tmpbybznrj2.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000785738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1272.69 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    next if index == 0\n    result\
    \ = result.send(operator[index - 1], num)\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpffqflif_\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpffqflif_.rb:32:in `test_do_algebra'\n\
    \     29:   def test_do_algebra\n     30:     candidate = method(:do_algebra)\n\
    \     31:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.006371199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.96 tests/s, 313.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elsif operator[i] == \"-\"\n   \
    \   result -= operand[i+1]\n    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == \"**\"\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxlltduhe\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpxlltduhe.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005011102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.56 tests/s, 399.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl18tky7h\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpl18tky7h.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005078268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.92 tests/s, 393.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd5rfbp7k\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpd5rfbp7k.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005604638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.42 tests/s, 178.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpthg6pasf\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpthg6pasf.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005730585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.50 tests/s, 349.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, i|\n    next if i == 0\n    result = result.send(operator[i-1],\
    \ num)\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1bpqaxu3\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp1bpqaxu3.rb:32:in `test_do_algebra'\n\
    \     29:   def test_do_algebra\n     30:     candidate = method(:do_algebra)\n\
    \     31:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00468013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.67 tests/s, 427.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpywp7f0pd\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpywp7f0pd.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004556687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.46 tests/s, 438.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6993q92d\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6993q92d.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004687864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.32 tests/s, 426.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoyve_f_2\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpoyve_f_2.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004506904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.88 tests/s, 443.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    next if index == 0\n    result\
    \ = result.send(operator[index - 1], num)\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx7fqgtzv\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpx7fqgtzv.rb:32:in `test_do_algebra'\n\
    \     29:   def test_do_algebra\n     30:     candidate = method(:do_algebra)\n\
    \     31:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004614205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.72 tests/s, 433.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa4gp25qw\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpa4gp25qw.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004520489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.22 tests/s, 442.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0gjanh6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmph0gjanh6.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004568209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.90 tests/s, 218.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpivmw24kc\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpivmw24kc.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004606031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.11 tests/s, 217.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0aha2n7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpz0aha2n7.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004386808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.96 tests/s, 455.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sp8o4_h\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6sp8o4_h.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004516031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.43 tests/s, 442.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  operand.each_with_index.map do |num, index|\n    if index == 0\n      num\n\
    \    else\n      num.send(operator[index - 1], operand[index - 1])\n    end\n\
    \  end.last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlh6omo8\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpmlh6omo8.rb:33:in `test_do_algebra'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_do_algebra\n\
    \     32:     candidate = method(:do_algebra)\n  => 33:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     34:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     35:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     36:   end\n<37> expected but was\n<9>\n===============================================================================\n\
    \nFinished in 0.00486592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.51 tests/s, 205.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_d1y62db\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp_d1y62db.rb:21:in `block in do_algebra'\n/tmp/tmp_d1y62db.rb:20:in `each'\n\
    /tmp/tmp_d1y62db.rb:20:in `each_with_index'\n/tmp/tmp_d1y62db.rb:20:in `each'\n\
    /tmp/tmp_d1y62db.rb:20:in `inject'\n/tmp/tmp_d1y62db.rb:20:in `do_algebra'\n/tmp/tmp_d1y62db.rb:28:in\
    \ `call'\n/tmp/tmp_d1y62db.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000839699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1190.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbpkt74i5\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpbpkt74i5.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005209145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.97 tests/s, 191.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_gx53kwa\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp_gx53kwa.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005114086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.54 tests/s, 195.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8ipvacv\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpk8ipvacv.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004843397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.47 tests/s, 412.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, index|\n    case op\n    when '+'\n      result\
    \ += operand[index + 1]\n    when '-'\n      result -= operand[index + 1]\n  \
    \  when '*'\n      result *= operand[index + 1]\n    when '//'\n      result /=\
    \ operand[index + 1]\n    when '**'\n      result **= operand[index + 1]\n   \
    \ end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpioio84i7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpioio84i7.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004703193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.62 tests/s, 425.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjty268s7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpjty268s7.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005290318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.02 tests/s, 378.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdlbpim51\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpdlbpim51.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004627852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.08 tests/s, 432.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_kobfk5j\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp_kobfk5j.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005331545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.56 tests/s, 375.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpph1lwnus\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpph1lwnus.rb:21:in `block in do_algebra'\n/tmp/tmpph1lwnus.rb:20:in `each'\n\
    /tmp/tmpph1lwnus.rb:20:in `each_with_index'\n/tmp/tmpph1lwnus.rb:20:in `each'\n\
    /tmp/tmpph1lwnus.rb:20:in `reduce'\n/tmp/tmpph1lwnus.rb:20:in `do_algebra'\n/tmp/tmpph1lwnus.rb:28:in\
    \ `call'\n/tmp/tmpph1lwnus.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000810194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1234.27 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj696g6py\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpj696g6py.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004868544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.40 tests/s, 410.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpix65ejlt\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpix65ejlt.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004930771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.81 tests/s, 405.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0bw015h7\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp0bw015h7.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00469067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.19 tests/s, 213.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptbqmfgp5\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmptbqmfgp5.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004635827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.71 tests/s, 431.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptiw3ogr_\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmptiw3ogr_.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005009058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.64 tests/s, 399.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsq_4ivov\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpsq_4ivov.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004452502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.59 tests/s, 224.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkf3h23yg\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkf3h23yg.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005163649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.66 tests/s, 387.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm0r2nhu6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpm0r2nhu6.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004720325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.85 tests/s, 423.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcpbohubr\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpcpbohubr.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004697382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.88 tests/s, 425.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5f5e7m25\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp5f5e7m25.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004856853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.89 tests/s, 411.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        case operator[i]\n        when '+'\n\
    \            result += operand[i+1]\n        when '-'\n            result -= operand[i+1]\n\
    \        when '*'\n            result *= operand[i+1]\n        when '//'\n   \
    \         result /= operand[i+1]\n        when '**'\n            result **= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfxdl0xzb\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpfxdl0xzb.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004485382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.95 tests/s, 445.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    operand.each_with_index do |num, index|\n        if index == 0\n        \
    \    next\n        else\n            result = result.send(operator[index-1], num)\n\
    \        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpveeh5976\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpveeh5976.rb:35:in `test_do_algebra'\n\
    \     32:   def test_do_algebra\n     33:     candidate = method(:do_algebra)\n\
    \     34:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 35:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     36:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     37:   end\n     38: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004543432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.10 tests/s, 440.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8k3dz3iy\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp8k3dz3iy.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005069622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.25 tests/s, 394.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjcl6fb47\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpjcl6fb47.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005285287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.20 tests/s, 378.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcpybfxfe\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpcpybfxfe.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005009148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.63 tests/s, 399.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp20xizrdg\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp20xizrdg.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004992308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.31 tests/s, 400.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpreklvtfm\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpreklvtfm.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004712551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.20 tests/s, 424.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz4axc065\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpz4axc065.rb:42:in `test_do_algebra'\n\
    \     39:   def test_do_algebra\n     40:     candidate = method(:do_algebra)\n\
    \     41:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004653771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.88 tests/s, 429.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptviw_1gg\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmptviw_1gg.rb:45:in `test_do_algebra'\n\
    \     42:   def test_do_algebra\n     43:     candidate = method(:do_algebra)\n\
    \     44:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 45:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     46:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     47:   end\n     48: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004537773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.37 tests/s, 440.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpviluu2cv\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpviluu2cv.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00474927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.56 tests/s, 421.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvkl2_wus\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpvkl2_wus.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004830622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.01 tests/s, 414.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppuf474pu\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmppuf474pu.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005987848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.00 tests/s, 334.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elsif operator[i] == \"-\"\n   \
    \   result -= operand[i+1]\n    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == \"**\"\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo7pdrd65\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpo7pdrd65.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004575382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.56 tests/s, 437.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpavczx_l2\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpavczx_l2.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005489782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.16 tests/s, 364.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7_dp90af\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp7_dp90af.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004735293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.18 tests/s, 211.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuo0e3dam\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpuo0e3dam.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005176593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.18 tests/s, 386.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkedi9ru8\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkedi9ru8.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004530961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.70 tests/s, 441.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpza7dpzoi\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpza7dpzoi.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004523877 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.05 tests/s, 221.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdbh92wuq\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpdbh92wuq.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00584439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.10 tests/s, 171.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy9mcug7e\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpy9mcug7e.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004532372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.64 tests/s, 441.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph6o9ib6q\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmph6o9ib6q.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005977319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.30 tests/s, 334.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8k7rem9a\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp8k7rem9a.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004657628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.70 tests/s, 429.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoc_eb72i\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpoc_eb72i.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005804845 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.27 tests/s, 344.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length do\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6wzhahd6\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6wzhahd6.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005072316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.15 tests/s, 394.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsarciiwi\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpsarciiwi.rb:41:in `test_do_algebra'\n\
    \     38:   def test_do_algebra\n     39:     candidate = method(:do_algebra)\n\
    \     40:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004543552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.09 tests/s, 440.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3bfybboy\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp3bfybboy.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.005738219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.27 tests/s, 348.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6nvt0tb5\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp6nvt0tb5.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004581204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.28 tests/s, 436.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpafacyv1g\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpafacyv1g.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004713362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.16 tests/s, 424.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdsad2ub2\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpdsad2ub2.rb:33:in `test_do_algebra'\n\
    \     30:   def test_do_algebra\n     31:     candidate = method(:do_algebra)\n\
    \     32:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004752395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.42 tests/s, 420.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmc8izumn\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpmc8izumn.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004772884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.52 tests/s, 209.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq7uafghy\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpq7uafghy.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004394543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.55 tests/s, 455.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkcbrcq7c\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpkcbrcq7c.rb:33:in `test_do_algebra'\n\
    \     30:   def test_do_algebra\n     31:     candidate = method(:do_algebra)\n\
    \     32:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004617092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.59 tests/s, 433.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpass99acz\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpass99acz.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.00473844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.04 tests/s, 422.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5odm6_d0\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp5odm6_d0.rb:21:in `block in do_algebra'\n/tmp/tmp5odm6_d0.rb:20:in `each'\n\
    /tmp/tmp5odm6_d0.rb:20:in `each_with_index'\n/tmp/tmp5odm6_d0.rb:20:in `each'\n\
    /tmp/tmp5odm6_d0.rb:20:in `inject'\n/tmp/tmp5odm6_d0.rb:20:in `do_algebra'\n/tmp/tmp5odm6_d0.rb:28:in\
    \ `call'\n/tmp/tmp5odm6_d0.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000752023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1329.75 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsdxohj_r\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpsdxohj_r.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004552169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.68 tests/s, 439.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2k2gb9ud\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp2k2gb9ud.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004444156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.01 tests/s, 450.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2fm6z8y4\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp2fm6z8y4.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004774346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.45 tests/s, 418.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1qtgyl3y\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp1qtgyl3y.rb:43:in `test_do_algebra'\n\
    \     40:   def test_do_algebra\n     41:     candidate = method(:do_algebra)\n\
    \     42:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004723823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.69 tests/s, 423.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpifofgv9x\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpifofgv9x.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004301368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.48 tests/s, 232.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjxdnal3p\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpjxdnal3p.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00501027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.59 tests/s, 199.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7i0o4qgs\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmp7i0o4qgs.rb:31:in `test_do_algebra'\n\
    \     28:   def test_do_algebra\n     29:     candidate = method(:do_algebra)\n\
    \     30:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004871258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.29 tests/s, 410.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphtrahm18\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmphtrahm18.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004492346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.60 tests/s, 445.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzck7cuvn\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmpzck7cuvn.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004360709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.32 tests/s, 458.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkghj_6gx\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpkghj_6gx.rb:21:in `block in do_algebra'\n/tmp/tmpkghj_6gx.rb:20:in `each'\n\
    /tmp/tmpkghj_6gx.rb:20:in `each_with_index'\n/tmp/tmpkghj_6gx.rb:20:in `each'\n\
    /tmp/tmpkghj_6gx.rb:20:in `inject'\n/tmp/tmpkghj_6gx.rb:20:in `do_algebra'\n/tmp/tmpkghj_6gx.rb:28:in\
    \ `call'\n/tmp/tmpkghj_6gx.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000806717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1239.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphdfsv1jo\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmphdfsv1jo.rb:26:in `test_do_algebra'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_do_algebra\n\
    \     25:     candidate = method(:do_algebra)\n  => 26:     assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n     27:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004785958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.94 tests/s, 208.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps63taulw\nStarted\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/tmp/tmps63taulw.rb:44:in `test_do_algebra'\n\
    \     41:   def test_do_algebra\n     42:     candidate = method(:do_algebra)\n\
    \     43:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n<15>\n===============================================================================\n\
    \nFinished in 0.004317388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.62 tests/s, 463.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpopqi4_bz\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmpopqi4_bz.rb:22:in `block in do_algebra'\n/tmp/tmpopqi4_bz.rb:21:in `each'\n\
    /tmp/tmpopqi4_bz.rb:21:in `each_with_index'\n/tmp/tmpopqi4_bz.rb:21:in `each'\n\
    /tmp/tmpopqi4_bz.rb:21:in `inject'\n/tmp/tmpopqi4_bz.rb:21:in `do_algebra'\n/tmp/tmpopqi4_bz.rb:29:in\
    \ `call'\n/tmp/tmpopqi4_bz.rb:29:in `test_do_algebra'\n     26: class TestHumanEval\
    \ < Test::Unit::TestCase\n     27:   def test_do_algebra\n     28:     candidate\
    \ = method(:do_algebra)\n  => 29:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     30:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     31:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     32:   end\n===============================================================================\n\
    \nFinished in 0.000793282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1260.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8evote2q\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp8evote2q.rb:21:in `block in do_algebra'\n/tmp/tmp8evote2q.rb:20:in `each'\n\
    /tmp/tmp8evote2q.rb:20:in `each_with_index'\n/tmp/tmp8evote2q.rb:20:in `each'\n\
    /tmp/tmp8evote2q.rb:20:in `inject'\n/tmp/tmp8evote2q.rb:20:in `do_algebra'\n/tmp/tmp8evote2q.rb:28:in\
    \ `call'\n/tmp/tmp8evote2q.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000771972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1295.38 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3li3f3q8\nStarted\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /tmp/tmp3li3f3q8.rb:21:in `block in do_algebra'\n/tmp/tmp3li3f3q8.rb:20:in `each'\n\
    /tmp/tmp3li3f3q8.rb:20:in `each_with_index'\n/tmp/tmp3li3f3q8.rb:20:in `each'\n\
    /tmp/tmp3li3f3q8.rb:20:in `inject'\n/tmp/tmp3li3f3q8.rb:20:in `do_algebra'\n/tmp/tmp3li3f3q8.rb:28:in\
    \ `call'\n/tmp/tmp3li3f3q8.rb:28:in `test_do_algebra'\n     25: class TestHumanEval\
    \ < Test::Unit::TestCase\n     26:   def test_do_algebra\n     27:     candidate\
    \ = method(:do_algebra)\n  => 28:     assert_equal(37, candidate.call([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]))\n     29:     assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000795536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1257.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
