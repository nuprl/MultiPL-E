name: HumanEval_53_add
language: ruby
results:
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplw4o8j3z\nStarted\n.\nFinished in 0.001121085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    891.99 tests/s, 4459.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqmdsfv6\nStarted\n.\nFinished in 0.000487931 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2049.47 tests/s, 10247.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9eian2ci\nStarted\n.\nFinished in 0.000809572 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1235.22 tests/s, 6176.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe0swm1id\nStarted\n.\nFinished in 0.000489808 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2041.62 tests/s, 10208.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphq6g6zd4\nStarted\n.\nFinished in 0.000834882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.77 tests/s, 5988.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpobnfnlcq\nStarted\n.\nFinished in 0.000967257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1033.85 tests/s, 5169.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8axlhbam\nStarted\n.\nFinished in 0.000497757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2009.01 tests/s, 10045.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpot5y5tf5\nStarted\n.\nFinished in 0.000757935 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1319.37 tests/s, 6596.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprabenj77\nStarted\n.\nFinished in 0.000515883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1938.42 tests/s, 9692.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_rwunx6\nStarted\n.\nFinished in 0.000612363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1633.02 tests/s, 8165.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr6c10u1n\nStarted\n.\nFinished in 0.000908292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.97 tests/s, 5504.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcyhjfqa5\nStarted\n.\nFinished in 0.000840647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.56 tests/s, 5947.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj0922z63\nStarted\n.\nFinished in 0.000921701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1084.95 tests/s, 5424.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn04zgjma\nStarted\n.\nFinished in 0.001059037 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    944.25 tests/s, 4721.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwfcftpdq\nStarted\n.\nFinished in 0.001041642 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    960.02 tests/s, 4800.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp13g1vk5r\nStarted\n.\nFinished in 0.000538163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.17 tests/s, 9290.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfjoummdj\nStarted\n.\nFinished in 0.000779788 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1282.40 tests/s, 6412.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbc8x0kl2\nStarted\n.\nFinished in 0.001162658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    860.10 tests/s, 4300.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmxtup0xc\nStarted\n.\nFinished in 0.000660732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1513.47 tests/s, 7567.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfz0634q1\nStarted\n.\nFinished in 0.000522095 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1915.36 tests/s, 9576.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx0k512rs\nStarted\n.\nFinished in 0.000928118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1077.45 tests/s, 5387.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0yqgkl3y\nStarted\n.\nFinished in 0.000587882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1701.02 tests/s, 8505.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwpvihsjp\nStarted\n.\nFinished in 0.000553252 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1807.49 tests/s, 9037.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp27wfqx8h\nStarted\n.\nFinished in 0.000877292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1139.87 tests/s, 5699.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpor_6s4fj\nStarted\n.\nFinished in 0.000957473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1044.42 tests/s, 5222.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnwcupbvn\nStarted\n.\nFinished in 0.000607105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1647.16 tests/s, 8235.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp66hz8vo9\nStarted\n.\nFinished in 0.000794115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1259.26 tests/s, 6296.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18oy_vgp\nStarted\n.\nFinished in 0.001158431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    863.24 tests/s, 4316.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbkfk_9q6\nStarted\n.\nFinished in 0.000529748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1887.69 tests/s, 9438.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvnd9cfgx\nStarted\n.\nFinished in 0.000583606 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1713.48 tests/s, 8567.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmrdz9n91\nStarted\n.\nFinished in 0.00060258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1659.53 tests/s, 8297.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4igct8u6\nStarted\n.\nFinished in 0.002254228 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    443.61 tests/s, 2218.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfcjgufh\nStarted\n.\nFinished in 0.001364466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    732.89 tests/s, 3664.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4qb8w4vg\nStarted\n.\nFinished in 0.00080278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1245.67 tests/s, 6228.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk10gjf9s\nStarted\n.\nFinished in 0.001084846 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    921.79 tests/s, 4608.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpil_o_eb6\nStarted\n.\nFinished in 0.000667688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1497.71 tests/s, 7488.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpus7j98ve\nStarted\n.\nFinished in 0.000977203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1023.33 tests/s, 5116.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ch6eiy9\nStarted\n.\nFinished in 0.001014503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    985.70 tests/s, 4928.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ydaodz6\nStarted\n.\nFinished in 0.000881052 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1135.01 tests/s, 5675.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr5ac4ghg\nStarted\n.\nFinished in 0.000934745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1069.81 tests/s, 5349.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmrc19_ni\nStarted\n.\nFinished in 0.000752021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1329.75 tests/s, 6648.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pzp2_7t\nStarted\n.\nFinished in 0.000895479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1116.72 tests/s, 5583.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxxprhcnm\nStarted\n.\nFinished in 0.00100927 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    990.82 tests/s, 4954.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpboe6fby_\nStarted\n.\nFinished in 0.00110587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    904.27 tests/s, 4521.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf7sfvvfw\nStarted\n.\nFinished in 0.001110526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    900.47 tests/s, 4502.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_676a30f\nStarted\n.\nFinished in 0.001259047 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    794.25 tests/s, 3971.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5thcyklo\nStarted\n.\nFinished in 0.000778769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1284.08 tests/s, 6420.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2mkr0457\nStarted\n.\nFinished in 0.000532712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1877.19 tests/s, 9385.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe0bl5y43\nStarted\n.\nFinished in 0.000835833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1196.41 tests/s, 5982.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphafaefmr\nStarted\n.\nFinished in 0.001060542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    942.91 tests/s, 4714.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe6iuol9w\nStarted\n.\nFinished in 0.000966948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1034.18 tests/s, 5170.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ei8oof7\nStarted\n.\nFinished in 0.000589089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1697.54 tests/s, 8487.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9mgszw7q\nStarted\n.\nFinished in 0.000983126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1017.16 tests/s, 5085.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw_gpxu_y\nStarted\n.\nFinished in 0.001027374 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    973.36 tests/s, 4866.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcn5p0hcm\nStarted\n.\nFinished in 0.000788024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1269.00 tests/s, 6344.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc1s3qyeh\nStarted\n.\nFinished in 0.001303058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    767.43 tests/s, 3837.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw9k046pt\nStarted\n.\nFinished in 0.00057498 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1739.19 tests/s, 8695.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvsvyrec_\nStarted\n.\nFinished in 0.000503075 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1987.78 tests/s, 9938.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptayx6b98\nStarted\n.\nFinished in 0.000751955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1329.87 tests/s, 6649.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi_27z5ki\nStarted\n.\nFinished in 0.000808161 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1237.38 tests/s, 6186.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2e3jg3hc\nStarted\n.\nFinished in 0.001253479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    797.78 tests/s, 3988.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo3bo2z22\nStarted\n.\nFinished in 0.000778124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1285.14 tests/s, 6425.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp49e9nyug\nStarted\n.\nFinished in 0.000547149 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1827.66 tests/s, 9138.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw0x1kc5i\nStarted\n.\nFinished in 0.00074806 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1336.79 tests/s, 6683.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpib9mjp4i\nStarted\n.\nFinished in 0.000541092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1848.11 tests/s, 9240.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiw8qzphz\nStarted\n.\nFinished in 0.000766398 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1304.81 tests/s, 6524.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  return x + y\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(1,\
    \ candidate.call(0, 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5,\
    \ candidate.call(2, 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12,\
    \ candidate.call(7, 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xhhsx8r\nStarted\n.\nFinished in 0.000925056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1081.02 tests/s, 5405.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpccs42fl7\nStarted\n.\nFinished in 0.001027024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    973.69 tests/s, 4868.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0r0ynnp\nStarted\n.\nFinished in 0.000641104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1559.81 tests/s, 7799.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd21alao7\nStarted\n.\nFinished in 0.000599449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1668.20 tests/s, 8340.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp69pwxq_5\nStarted\n.\nFinished in 0.000530197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1886.09 tests/s, 9430.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo5lvl0f4\nStarted\n.\nFinished in 0.000736104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1358.50 tests/s, 6792.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfzktmtp_\nStarted\n.\nFinished in 0.000555205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1801.14 tests/s, 9005.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqwxrrbes\nStarted\n.\nFinished in 0.000649949 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1538.58 tests/s, 7692.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphu41ozxo\nStarted\n.\nFinished in 0.000576846 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1733.56 tests/s, 8667.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1d129cd7\nStarted\n.\nFinished in 0.000856518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1167.52 tests/s, 5837.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppz85jmeh\nStarted\n.\nFinished in 0.000510026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1960.68 tests/s, 9803.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp99xqbx3c\nStarted\n.\nFinished in 0.000840304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1190.05 tests/s, 5950.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf9ewuxok\nStarted\n.\nFinished in 0.001491729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    670.36 tests/s, 3351.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7wu4_3bo\nStarted\n.\nFinished in 0.001231992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    811.69 tests/s, 4058.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx2urncfs\nStarted\n.\nFinished in 0.000546179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1830.90 tests/s, 9154.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpli5fa0b1\nStarted\n.\nFinished in 0.000892618 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.30 tests/s, 5601.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ey5x_yk\nStarted\n.\nFinished in 0.000635504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1573.55 tests/s, 7867.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmwhp4hvt\nStarted\n.\nFinished in 0.000528196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1893.24 tests/s, 9466.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjybuzd5e\nStarted\n.\nFinished in 0.000861884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1160.25 tests/s, 5801.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwamoqpnu\nStarted\n.\nFinished in 0.00083197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1201.97 tests/s, 6009.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptx50h8fo\nStarted\n.\nFinished in 0.00072053 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1387.87 tests/s, 6939.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2z67rkow\nStarted\n.\nFinished in 0.00094219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1061.36 tests/s, 5306.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplgfnv6ks\nStarted\n.\nFinished in 0.000600698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1664.73 tests/s, 8323.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy89jmgye\nStarted\n.\nFinished in 0.000656322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1523.64 tests/s, 7618.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7_ggn7y\nStarted\n.\nFinished in 0.001130383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    884.66 tests/s, 4423.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpacxhi62e\nStarted\n.\nFinished in 0.000834405 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1198.46 tests/s, 5992.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyd2id3fs\nStarted\n.\nFinished in 0.000540964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1848.55 tests/s, 9242.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp430g2qvs\nStarted\n.\nFinished in 0.000732619 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1364.97 tests/s, 6824.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaux0vsdw\nStarted\n.\nFinished in 0.000494176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2023.57 tests/s, 10117.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyjd0ml_8\nStarted\n.\nFinished in 0.000820288 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1219.08 tests/s, 6095.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_rtzj9hg\nStarted\n.\nFinished in 0.000570556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1752.68 tests/s, 8763.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6erfae3\nStarted\n.\nFinished in 0.000988237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1011.90 tests/s, 5059.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_01f05s2\nStarted\n.\nFinished in 0.000527723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1894.93 tests/s, 9474.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_o1ahkyl\nStarted\n.\nFinished in 0.001170636 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    854.24 tests/s, 4271.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5cw2o_ld\nStarted\n.\nFinished in 0.000618369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1617.16 tests/s, 8085.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjpcre4ef\nStarted\n.\nFinished in 0.000492607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2030.02 tests/s, 10150.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_orgtxbc\nStarted\n.\nFinished in 0.000516769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1935.10 tests/s, 9675.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgio2crzu\nStarted\n.\nFinished in 0.000704152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1420.15 tests/s, 7100.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpocohvtge\nStarted\n.\nFinished in 0.000620952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1610.43 tests/s, 8052.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpykyc_82v\nStarted\n.\nFinished in 0.000692478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1444.09 tests/s, 7220.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx8l1xh4k\nStarted\n.\nFinished in 0.000681029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1468.37 tests/s, 7341.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp10l69a8i\nStarted\n.\nFinished in 0.000520332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1921.85 tests/s, 9609.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgbmft7gz\nStarted\n.\nFinished in 0.00058005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1723.99 tests/s, 8619.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuhzj7hxh\nStarted\n.\nFinished in 0.001069237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    935.25 tests/s, 4676.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd35ena27\nStarted\n.\nFinished in 0.001149639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    869.84 tests/s, 4349.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfy3j3ujo\nStarted\n.\nFinished in 0.000852613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1172.87 tests/s, 5864.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc5c3fubo\nStarted\n.\nFinished in 0.001306238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    765.56 tests/s, 3827.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4qwyy_9k\nStarted\n.\nFinished in 0.00100445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    995.57 tests/s, 4977.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdljb_uis\nStarted\n.\nFinished in 0.000531399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1881.83 tests/s, 9409.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2ku3qoy\nStarted\n.\nFinished in 0.00111943 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    893.31 tests/s, 4466.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp45u2oo1f\nStarted\n.\nFinished in 0.001225264 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    816.15 tests/s, 4080.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc__gbi76\nStarted\n.\nFinished in 0.001255388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    796.57 tests/s, 3982.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjy8wjtp7\nStarted\n.\nFinished in 0.000628682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1590.63 tests/s, 7953.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpixqdq9ek\nStarted\n.\nFinished in 0.00118243 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    845.72 tests/s, 4228.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpccjotx4l\nStarted\n.\nFinished in 0.00057085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1751.77 tests/s, 8758.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0q5w5k2p\nStarted\n.\nFinished in 0.000637605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1568.37 tests/s, 7841.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeadr9aj5\nStarted\n.\nFinished in 0.000770284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1298.22 tests/s, 6491.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwex3r8ny\nStarted\n.\nFinished in 0.000948635 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1054.15 tests/s, 5270.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvchs1t13\nStarted\n.\nFinished in 0.0009693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1031.67 tests/s, 5158.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzeh0vz3i\nStarted\n.\nFinished in 0.000805593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1241.32 tests/s, 6206.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp011uw2en\nStarted\n.\nFinished in 0.000890391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1123.10 tests/s, 5615.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy1pdrj3o\nStarted\n.\nFinished in 0.000879544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1136.95 tests/s, 5684.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx8uzo9d8\nStarted\n.\nFinished in 0.001253118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    798.01 tests/s, 3990.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvo6va41y\nStarted\n.\nFinished in 0.000543296 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1840.62 tests/s, 9203.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpozqytb7g\nStarted\n.\nFinished in 0.000528816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1891.02 tests/s, 9455.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbo7bzp2q\nStarted\n.\nFinished in 0.00052775 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1894.84 tests/s, 9474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsd9z00eu\nStarted\n.\nFinished in 0.00055597 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1798.66 tests/s, 8993.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxizq7b6\nStarted\n.\nFinished in 0.001015138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    985.09 tests/s, 4925.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwaz3z0wl\nStarted\n.\nFinished in 0.000561862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1779.80 tests/s, 8898.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx1s7p0ob\nStarted\n.\nFinished in 0.000884343 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1130.78 tests/s, 5653.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq53ip8t9\nStarted\n.\nFinished in 0.000701758 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1424.99 tests/s, 7124.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2vv4fh3o\nStarted\n.\nFinished in 0.000594083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1683.27 tests/s, 8416.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyiyf_3wy\nStarted\n.\nFinished in 0.000864705 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.46 tests/s, 5782.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppn2h9twd\nStarted\n.\nFinished in 0.00119224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    838.76 tests/s, 4193.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpywkcy9kn\nStarted\n.\nFinished in 0.000674808 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1481.90 tests/s, 7409.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2tnartps\nStarted\n.\nFinished in 0.001386334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    721.33 tests/s, 3606.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpukni8_sy\nStarted\n.\nFinished in 0.000962696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1038.75 tests/s, 5193.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp936h_9eb\nStarted\n.\nFinished in 0.000607996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1644.75 tests/s, 8223.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4waznn0k\nStarted\n.\nFinished in 0.000878951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1137.72 tests/s, 5688.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfpln9mfn\nStarted\n.\nFinished in 0.000556518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.89 tests/s, 8984.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjbaro_mf\nStarted\n.\nFinished in 0.000833603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1199.61 tests/s, 5998.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxk0yh1_v\nStarted\n.\nFinished in 0.000641019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1560.02 tests/s, 7800.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2m2echrh\nStarted\n.\nFinished in 0.000637178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1569.42 tests/s, 7847.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwwc9frpw\nStarted\n.\nFinished in 0.00127541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    784.06 tests/s, 3920.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvjj5idu8\nStarted\n.\nFinished in 0.000693802 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1441.33 tests/s, 7206.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpae2l04gt\nStarted\n.\nFinished in 0.00102132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    979.13 tests/s, 4895.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdrup_spj\nStarted\n.\nFinished in 0.000849698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1176.89 tests/s, 5884.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzolcxkp0\nStarted\n.\nFinished in 0.001250961 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    799.39 tests/s, 3996.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaohfusr_\nStarted\n.\nFinished in 0.001645845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    607.59 tests/s, 3037.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt5bxyx4_\nStarted\n.\nFinished in 0.001557644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    642.00 tests/s, 3209.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpruwv00zg\nStarted\n.\nFinished in 0.000901178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.66 tests/s, 5548.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd5wkkhjp\nStarted\n.\nFinished in 0.000901588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.15 tests/s, 5545.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwh5qr10_\nStarted\n.\nFinished in 0.000940541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.22 tests/s, 5316.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk9s1k3ad\nStarted\n.\nFinished in 0.000714796 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1399.00 tests/s, 6995.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptupgyad3\nStarted\n.\nFinished in 0.000961916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1039.59 tests/s, 5197.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbzorbslt\nStarted\n.\nFinished in 0.000864578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.63 tests/s, 5783.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptroge4a4\nStarted\n.\nFinished in 0.000645815 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1548.43 tests/s, 7742.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfhokq2mt\nStarted\n.\nFinished in 0.000581344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1720.15 tests/s, 8600.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65b2wwfr\nStarted\n.\nFinished in 0.000771123 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1296.81 tests/s, 6484.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xj3p74y\nStarted\n.\nFinished in 0.000656113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1524.13 tests/s, 7620.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3scqj9d0\nStarted\n.\nFinished in 0.001073971 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    931.12 tests/s, 4655.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ye9l_zw\nStarted\n.\nFinished in 0.000970777 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1030.10 tests/s, 5150.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8xjti9d5\nStarted\n.\nFinished in 0.000568975 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1757.55 tests/s, 8787.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeizssvix\nStarted\n.\nFinished in 0.000617436 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1619.60 tests/s, 8098.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv2ud9hk6\nStarted\n.\nFinished in 0.000935184 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1069.31 tests/s, 5346.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp04iv9pv5\nStarted\n.\nFinished in 0.000767287 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1303.29 tests/s, 6516.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwt68zy9n\nStarted\n.\nFinished in 0.000499089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2003.65 tests/s, 10018.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkfl976al\nStarted\n.\nFinished in 0.000744707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1342.81 tests/s, 6714.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc5rma8_1\nStarted\n.\nFinished in 0.000554772 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1802.54 tests/s, 9012.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjc53062t\nStarted\n.\nFinished in 0.000683032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1464.06 tests/s, 7320.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0kjmqgti\nStarted\n.\nFinished in 0.001091245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    916.38 tests/s, 4581.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm5r1eikl\nStarted\n.\nFinished in 0.000935523 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1068.92 tests/s, 5344.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2emfxqal\nStarted\n.\nFinished in 0.001374964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    727.29 tests/s, 3636.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmfipczgf\nStarted\n.\nFinished in 0.000673859 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1483.99 tests/s, 7419.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpixo2qu5c\nStarted\n.\nFinished in 0.000593432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1685.11 tests/s, 8425.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprm5xqv7b\nStarted\n.\nFinished in 0.001230824 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    812.46 tests/s, 4062.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjf_zjwhv\nStarted\n.\nFinished in 0.001165203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    858.22 tests/s, 4291.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9a_ejevz\nStarted\n.\nFinished in 0.001147286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    871.62 tests/s, 4358.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprfs_5jb3\nStarted\n.\nFinished in 0.001323918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    755.33 tests/s, 3776.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu666y5il\nStarted\n.\nFinished in 0.000551575 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1812.99 tests/s, 9064.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprwfw1vy_\nStarted\n.\nFinished in 0.000672819 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1486.28 tests/s, 7431.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp58y48zf8\nStarted\n.\nFinished in 0.000881527 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.40 tests/s, 5671.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6sr5p50c\nStarted\n.\nFinished in 0.000551124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1814.47 tests/s, 9072.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcixz5khr\nStarted\n.\nFinished in 0.000492699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2029.64 tests/s, 10148.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp464uzfgk\nStarted\n.\nFinished in 0.000602745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1659.08 tests/s, 8295.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp41u4cujv\nStarted\n.\nFinished in 0.001291525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    774.28 tests/s, 3871.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppuzd0w0t\nStarted\n.\nFinished in 0.000512493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1951.25 tests/s, 9756.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi7x1yer6\nStarted\n.\nFinished in 0.000970502 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1030.39 tests/s, 5151.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsm8fy4ip\nStarted\n.\nFinished in 0.000833255 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1200.11 tests/s, 6000.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp02fe6hpb\nStarted\n.\nFinished in 0.00057368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1743.13 tests/s, 8715.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo1us4v0h\nStarted\n.\nFinished in 0.000825361 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1211.59 tests/s, 6057.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuo3hgbc1\nStarted\n.\nFinished in 0.000893318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1119.42 tests/s, 5597.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0vq4enzf\nStarted\n.\nFinished in 0.000835297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.18 tests/s, 5985.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\n\
    def add(x, y)\n  x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(1, candidate.call(0,\
    \ 1))\n    assert_equal(1, candidate.call(1, 0))\n    assert_equal(5, candidate.call(2,\
    \ 3))\n    assert_equal(12, candidate.call(5, 7))\n    assert_equal(12, candidate.call(7,\
    \ 5))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwlfss73m\nStarted\n.\nFinished in 0.000467142 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2140.68 tests/s, 10703.38 assertions/s\n"
  exit_code: 0
  status: OK
