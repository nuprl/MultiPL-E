name: HumanEval_94_skjkasdkd
language: ruby
prompt: "# You are given a list of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For\
  \ lst = [0,8,1,2,1,7] the output should be 7\ndef skjkasdkd(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_skjkasdkd\n\
  \    candidate = method(:skjkasdkd)\n    assert_equal(10, candidate.call([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n    assert_equal(25,\
  \ candidate.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\
  \    assert_equal(13, candidate.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
  \ 2323, 32, 30, 1, 9, 3]))\n    assert_equal(11, candidate.call([0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n    assert_equal(3, candidate.call([0, 81,\
  \ 12, 3, 1, 21]))\n    assert_equal(7, candidate.call([0, 8, 1, 2, 1, 7]))\n   \
  \ assert_equal(19, candidate.call([8191]))\n    assert_equal(19, candidate.call([8191,\
  \ 123456, 127, 7]))\n    assert_equal(10, candidate.call([127, 97, 8192]))\n  end\n\
  end\n"
completions: ["  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend",
  "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.sort.reverse.each do |x|\n    if prime?(x)\n      return\
    \ x.to_s.split('').map(&:to_i).reduce(:+)\n    end\n  end\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map { |num| num.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+) }.max\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend",
  "  lst.sort.reverse.each do |i|\n    if i.prime?\n      return i.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    end\n  end\nend", "  lst.sort.reverse.each do |x|\n    if x.to_s.split('').map(&:to_i).inject(:+)\
    \ == x\n      return x.to_s.split('').map(&:to_i).inject(:+)\n    end\n  end\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).sum\nend", " \
    \ lst.sort.reverse.each do |x|\n    if x.prime?\n      return x.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    end\n  end\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", " \
    \ lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map { |x|\
    \ x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select { |n| prime?(n)\
    \ }.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.select { |x| x.prime? }.max.digits.sum\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend",
  "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|i|\
    \ i.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.sort.reverse.each\
    \ do |i|\n    return i.to_s.split('').map(&:to_i).reduce(:+) if i.prime?\n  end\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", " \
    \ lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "  lst.map! { |x| x.to_s.split('').map(&:to_i) }\n \
    \ lst.flatten!\n  lst.sort!\n  lst.reverse!\n  lst.each do |x|\n    if x.prime?\n\
    \      return x.to_s.split('').map(&:to_i).reduce(:+)\n    end\n  end\nend", " \
    \ lst.map { |e| e.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.each do |i|\n    if i.is_a?(Integer)\n\
    \      if i.prime?\n        return i.digits.sum\n      end\n    end\n  end\nend",
  "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.chars.map(&:to_i).inject(:+)\nend",
  "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |i| i.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map!{|x|\
    \ x.to_s.split(\"\")}.flatten!\n  lst.map!{|x| x.to_i}\n  lst.sort!\n  lst.reverse!\n\
    \  lst.each do |x|\n    if x.prime?\n      return x.to_s.split(\"\").map{|x| x.to_i}.inject(:+)\n\
    \    end\n  end\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", " \
    \ lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.select { |x|\
    \ x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend",
  "  lst.map { |i| i.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select{|x|\
    \ x.prime?}.max.digits.sum\nend", "  lst.select{|x| x.prime?}.max.digits.sum\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.sort.reverse.each\
    \ do |i|\n    if i.prime?\n      return i.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    end\n  end\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", " \
    \ lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |x| x.to_s.chars.map(&:to_i)\
    \ }.flatten.inject(:+)\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\n\
    end", "  lst.sort.reverse.each do |x|\n    if x.prime?\n      return x.to_s.split('').map(&:to_i).inject(:+)\n\
    \    end\n  end\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).sum\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.sort.reverse.each\
    \ do |num|\n    return num.to_s.split('').map(&:to_i).reduce(:+) if prime?(num)\n\
    \  end\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+) }.max\nend", " \
    \ lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.map { |x|\
    \ x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.sort.reverse.each\
    \ do |i|\n    return i.to_s.split('').map(&:to_i).inject(:+) if is_prime?(i)\n\
    \  end\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).sum\n\
    end", "  lst.sort.reverse.each do |i|\n    return i.to_s.split('').map(&:to_i).reduce(:+)\
    \ if is_prime?(i)\n  end\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend",
  "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend",
  "  lst.map { |e| e.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map\
    \ { |x| x.to_s.chars.map(&:to_i) }.flatten.inject(:+)\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.map { |x|\
    \ x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend",
  "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+)\
    \ }.max\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map{|i| i.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map {\
    \ |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|i|\
    \ i.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map { |n| n.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+) }.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.sort.reverse.each\
    \ do |i|\n    if i.prime?\n      return i.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    end\n  end\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend",
  "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select\
    \ { |n| n.prime? }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map!{|x| x.to_s.split(\"\
    \")}.flatten!\n  lst.map!{|x| x.to_i}\n  lst.sort!\n  lst.reverse!\n  lst.each\
    \ do |x|\n    if x.prime?\n      return x.to_s.split(\"\").map!{|x| x.to_i}.reduce(:+)\n\
    \    end\n  end\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.map { |x|\
    \ x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\n\
    end", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|i| i.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select { |x| x.prime?\
    \ }.max.digits.sum\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).reduce(:+)}.max\n\
    end", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).reduce(:+) }.max\nend", "  lst.map { |x|\
    \ x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select{|x| x.prime?}.max.to_s.chars.map(&:to_i).reduce(:+)\n\
    end", "  lst.map{|n| n.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.select\
    \ { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", " \
    \ lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.map { |i| i.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend",
  "  lst.map { |x| x.to_s.split('').map(&:to_i).reduce(:+) }.max\nend", "  lst.map\
    \ { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.chars.map(&:to_i).reduce(:+)\nend", "  lst.select{|x| x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ # your code here\nend", "  lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\n\
    end", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+) }.max\nend", " \
    \ lst.map{|x| x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map{|x|\
    \ x.to_s.split('').map(&:to_i).inject(:+)}.max\nend", "  lst.map { |x| x.to_s.split('').map(&:to_i).inject(:+)\
    \ }.max\nend", "  lst.select { |x| x.prime? }.max.digits.sum\nend", "  lst.select{|x|\
    \ x.prime?}.max.to_s.split('').map(&:to_i).reduce(:+)\nend", "  lst.select { |x|\
    \ x.prime? }.max.digits.sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
