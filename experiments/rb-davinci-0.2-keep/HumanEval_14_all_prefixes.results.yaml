name: HumanEval_14_all_prefixes
language: ruby
results:
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  return\
    \ [string] if string.length == 1\n  [string] + all_prefixes(string[0..-2])\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6jqs_ozz\nStarted\nE\n===============================================================================\n\
    Error: test_all_prefixes(TestHumanEval): SystemStackError: stack level too deep\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n/tmp/tmp6jqs_ozz.rb:6:in `all_prefixes'\n\
    /tmp/tmp"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7az_jf8r\nStarted\n.\nFinished in 0.000519415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1925.24 tests/s, 5775.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmpqvvlq4\nStarted\n.\nFinished in 0.000600318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1665.78 tests/s, 4997.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptqubnxxn\nStarted\n.\nFinished in 0.000805481 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1241.49 tests/s, 3724.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx0demzbq\nStarted\n.\nFinished in 0.000538179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.12 tests/s, 5574.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxoj0l98j\nStarted\n.\nFinished in 0.000569245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1756.71 tests/s, 5270.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpulu0aqa7\nStarted\n.\nFinished in 0.001259182 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    794.17 tests/s, 2382.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjef6hq22\nStarted\n.\nFinished in 0.000616206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1622.83 tests/s, 4868.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi3p_wddf\nStarted\n.\nFinished in 0.000611406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1635.57 tests/s, 4906.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr6g1h491\nStarted\n.\nFinished in 0.000525862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1901.64 tests/s, 5704.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6lb3kkxk\nStarted\n.\nFinished in 0.000555045 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1801.66 tests/s, 5404.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvtndjn_9\nStarted\n.\nFinished in 0.000634964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1574.89 tests/s, 4724.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0h1h8vmy\nStarted\n.\nFinished in 0.000967427 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1033.67 tests/s, 3101.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq3yfny6i\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpq3yfny6i.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.010215637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.89 tests/s, 97.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp802cf_fu\nStarted\n.\nFinished in 0.001244739 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    803.38 tests/s, 2410.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmjkmbx7e\nStarted\n.\nFinished in 0.002969728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    336.73 tests/s, 1010.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph3714cyb\nStarted\n.\nFinished in 0.000553678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1806.10 tests/s, 5418.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnsojyg53\nStarted\n.\nFinished in 0.000887616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1126.61 tests/s, 3379.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuwwkbss8\nStarted\n.\nFinished in 0.000554404 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1803.74 tests/s, 5411.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1kyimhca\nStarted\n.\nFinished in 0.00104198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.71 tests/s, 2879.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0idpcd4\nStarted\n.\nFinished in 0.000706689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1415.05 tests/s, 4245.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppp8dtq8z\nStarted\n.\nFinished in 0.000501996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1992.05 tests/s, 5976.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsgsuov3x\nStarted\n.\nFinished in 0.000940645 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.10 tests/s, 3189.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  return\
    \ [string] if string.length == 1\n  [string] + all_prefixes(string[0..-2])\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmgjc4tds\nStarted\nE\n===============================================================================\n\
    Error: test_all_prefixes(TestHumanEval): SystemStackError: stack level too deep\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n/tmp/tmpmgjc4tds.rb:6:in `all_prefixes'\n\
    /tmp/tmp"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuvp8letg\nStarted\n.\nFinished in 0.0009092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1099.87 tests/s, 3299.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbtab38tf\nStarted\n.\nFinished in 0.0007159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1396.84 tests/s, 4190.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplcq9xqde\nStarted\n.\nFinished in 0.000543856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1838.72 tests/s, 5516.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length-1).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_z8ijdh3\nStarted\n.\nFinished in 0.000526765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1898.38 tests/s, 5695.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptbheixn7\nStarted\n.\nFinished in 0.000680663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1469.16 tests/s, 4407.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7555_ixu\nStarted\n.\nFinished in 0.000600179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1666.17 tests/s, 4998.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm59p1tlc\nStarted\n.\nFinished in 0.000599272 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1668.69 tests/s, 5006.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp3mup3sz\nStarted\n.\nFinished in 0.000576762 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1733.82 tests/s, 5201.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7jjeqf8f\nStarted\n.\nFinished in 0.000588716 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1698.61 tests/s, 5095.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxvaedvw\nStarted\n.\nFinished in 0.000792134 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1262.41 tests/s, 3787.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n\t\
    prefixes = []\n\t(0..string.length).each do |i|\n\t\tprefixes << string[0..i]\n\
    \tend\n\tprefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpylup1zlf\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpylup1zlf.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.012489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.07 tests/s, 80.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2bcsoflm\nStarted\n.\nFinished in 0.001061333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    942.21 tests/s, 2826.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf1rxnfzf\nStarted\n.\nFinished in 0.000720648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1387.64 tests/s, 4162.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg7_3it86\nStarted\n.\nFinished in 0.000996697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1003.31 tests/s, 3009.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpizmjv7qg\nStarted\n.\nFinished in 0.001309934 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    763.40 tests/s, 2290.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmb0twcr6\nStarted\n.\nFinished in 0.000805115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1242.06 tests/s, 3726.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1hfw0rn2\nStarted\n.\nFinished in 0.000912057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1096.42 tests/s, 3289.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvikzirqc\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpvikzirqc.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.010024823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.75 tests/s, 99.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmploa1b4ui\nStarted\n.\nFinished in 0.001749378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    571.63 tests/s, 1714.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpha3srcem\nStarted\n.\nFinished in 0.000900861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.05 tests/s, 3330.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7gz954ff\nStarted\n.\nFinished in 0.000910293 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1098.55 tests/s, 3295.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |n| string[0, n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_gdi5393\nStarted\n.\nFinished in 0.000764915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1307.33 tests/s, 3922.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp63mj6jk7\nStarted\n.\nFinished in 0.000637624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1568.32 tests/s, 4704.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8i1t2n88\nStarted\n.\nFinished in 0.000942732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1060.75 tests/s, 3182.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppuwg6t3j\nStarted\n.\nFinished in 0.000635356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1573.92 tests/s, 4721.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkjr8emcd\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpkjr8emcd.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.007406244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.02 tests/s, 135.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmekw57p5\nStarted\n.\nFinished in 0.000530875 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1883.68 tests/s, 5651.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppzq6sqez\nStarted\n.\nFinished in 0.0008712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.84 tests/s, 3443.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsn7f_aul\nStarted\n.\nFinished in 0.000548128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1824.39 tests/s, 5473.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp5_7npqa\nStarted\n.\nFinished in 0.001237224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    808.26 tests/s, 2424.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp850aw_1r\nStarted\n.\nFinished in 0.001323685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    755.47 tests/s, 2266.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsojbw0ly\nStarted\n.\nFinished in 0.000887469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1126.80 tests/s, 3380.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg3hkiezw\nStarted\n.\nFinished in 0.000872872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1145.64 tests/s, 3436.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpem4ynkwi\nStarted\n.\nFinished in 0.000922999 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1083.42 tests/s, 3250.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a1p0ced\nStarted\n.\nFinished in 0.001091259 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    916.37 tests/s, 2749.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx34aeax3\nStarted\n.\nFinished in 0.000615861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1623.74 tests/s, 4871.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  0.upto(string.length - 1) do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd1vknqyk\nStarted\n.\nFinished in 0.000607538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1645.99 tests/s, 4937.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpli23r2ki\nStarted\n.\nFinished in 0.00095461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.55 tests/s, 3142.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp7pu4k2_\nStarted\n.\nFinished in 0.001087102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    919.88 tests/s, 2759.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0baaydau\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmp0baaydau.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.009095915 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.94 tests/s, 109.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.size.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3krz9zs0\nStarted\n.\nFinished in 0.000596808 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1675.58 tests/s, 5026.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  result\
    \ = []\n  (1..string.length).each do |i|\n    result << string[0..i-1]\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7g9letnf\nStarted\n.\nFinished in 0.001411028 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    708.70 tests/s, 2126.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2k2emk65\nStarted\n.\nFinished in 0.001163024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    859.83 tests/s, 2579.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgf19kpag\nStarted\n.\nFinished in 0.000758269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1318.79 tests/s, 3956.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkll2afww\nStarted\n.\nFinished in 0.000524291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1907.34 tests/s, 5722.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8975d6f8\nStarted\n.\nFinished in 0.000906171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1103.54 tests/s, 3310.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpulvkqb6z\nStarted\n.\nFinished in 0.000864554 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.67 tests/s, 3470.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsdm7xg_g\nStarted\n.\nFinished in 0.000751511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1330.65 tests/s, 3991.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb8a2gv7s\nStarted\n.\nFinished in 0.00054156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1846.52 tests/s, 5539.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length-1).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1obx_28w\nStarted\n.\nFinished in 0.000602731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1659.11 tests/s, 4977.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpathdtlyc\nStarted\n.\nFinished in 0.000814313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.03 tests/s, 3684.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7m5c574t\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmp7m5c574t.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.014970273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.80 tests/s, 66.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpihiqo9qs\nStarted\n.\nFinished in 0.000507265 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1971.36 tests/s, 5914.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl77y2x5f\nStarted\n.\nFinished in 0.000541068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1848.20 tests/s, 5544.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc1xulkp9\nStarted\n.\nFinished in 0.000553447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1806.86 tests/s, 5420.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptoywp76g\nStarted\n.\nFinished in 0.00070605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1416.33 tests/s, 4248.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjy05vh8_\nStarted\n.\nFinished in 0.000804442 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1243.10 tests/s, 3729.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15106zo9\nStarted\n.\nFinished in 0.000541621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1846.31 tests/s, 5538.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmj92car3\nStarted\n.\nFinished in 0.000995775 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1004.24 tests/s, 3012.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpua55au4n\nStarted\n.\nFinished in 0.000917625 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1089.77 tests/s, 3269.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph3woxz9l\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmph3woxz9l.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.009294644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.59 tests/s, 107.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length-1).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnnj30b_1\nStarted\n.\nFinished in 0.000513748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1946.48 tests/s, 5839.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuyd3j6v9\nStarted\n.\nFinished in 0.000840697 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.49 tests/s, 3568.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj3d9zrkv\nStarted\n.\nFinished in 0.000824772 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1212.46 tests/s, 3637.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk_veg5p4\nStarted\n.\nFinished in 0.001070693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    933.97 tests/s, 2801.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp33wrmyza\nStarted\n.\nFinished in 0.000587622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1701.77 tests/s, 5105.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp57_52xh6\nStarted\n.\nFinished in 0.000589992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1694.94 tests/s, 5084.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpklnksc7p\nStarted\n.\nFinished in 0.000662215 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1510.08 tests/s, 4530.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt0_k5nxg\nStarted\n.\nFinished in 0.001187024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    842.44 tests/s, 2527.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt0b8gvgs\nStarted\n.\nFinished in 0.000574823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1739.67 tests/s, 5219.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfvpo78_x\nStarted\n.\nFinished in 0.001113101 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    898.39 tests/s, 2695.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0p9sgha8\nStarted\n.\nFinished in 0.000881301 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.69 tests/s, 3404.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnaoenogu\nStarted\n.\nFinished in 0.000597355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1674.05 tests/s, 5022.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmyac56ci\nStarted\n.\nFinished in 0.000503693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1985.34 tests/s, 5956.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzk59dm_3\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpzk59dm_3.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.012132474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.42 tests/s, 82.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_p44j80\nStarted\n.\nFinished in 0.000910016 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1098.88 tests/s, 3296.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0i5byydf\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmp0i5byydf.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.014499647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.97 tests/s, 68.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4quole8d\nStarted\n.\nFinished in 0.001020176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    980.22 tests/s, 2940.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw7lxcwm1\nStarted\n.\nFinished in 0.001199426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    833.73 tests/s, 2501.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length-1).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp299l4mw4\nStarted\n.\nFinished in 0.001045866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    956.15 tests/s, 2868.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_4e6f91\nStarted\n.\nFinished in 0.001131881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    883.49 tests/s, 2650.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptag838ve\nStarted\n.\nFinished in 0.000599518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1668.01 tests/s, 5004.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfl8_r5gw\nStarted\n.\nFinished in 0.000567745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1761.35 tests/s, 5284.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwyxm05yh\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpwyxm05yh.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.012105943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.60 tests/s, 82.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  result\
    \ = []\n  (1..string.length).each do |i|\n    result << string[0...i]\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwgy68fls\nStarted\n.\nFinished in 0.000736417 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1357.93 tests/s, 4073.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp82bpib3a\nStarted\n.\nFinished in 0.000776634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.61 tests/s, 3862.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp427cnb2v\nStarted\n.\nFinished in 0.000764161 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1308.62 tests/s, 3925.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbqb23xq_\nStarted\n.\nFinished in 0.000528025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1893.85 tests/s, 5681.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpagemgxn5\nStarted\n.\nFinished in 0.000858796 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1164.42 tests/s, 3493.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeeu1sa5n\nStarted\n.\nFinished in 0.001008563 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    991.51 tests/s, 2974.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc0m1rn0f\nStarted\n.\nFinished in 0.000908189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1101.09 tests/s, 3303.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjxj6lf2x\nStarted\n.\nFinished in 0.001094584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    913.59 tests/s, 2740.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_k6rp112\nStarted\n.\nFinished in 0.001601732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    624.32 tests/s, 1872.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoxgkkufd\nStarted\n.\nFinished in 0.001250124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    799.92 tests/s, 2399.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0las1qa\nStarted\n.\nFinished in 0.000643425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1554.18 tests/s, 4662.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppdm1f79i\nStarted\n.\nFinished in 0.001124282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    889.46 tests/s, 2668.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp80pgr9w5\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmp80pgr9w5.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.018321461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.58 tests/s, 54.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3e7z39o4\nStarted\n.\nFinished in 0.001247429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    801.65 tests/s, 2404.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgt4c2z2x\nStarted\n.\nFinished in 0.000863943 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1157.48 tests/s, 3472.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk9hvmkd6\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpk9hvmkd6.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.017007788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.80 tests/s, 58.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxp_aw_qy\nStarted\n.\nFinished in 0.000873799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1144.43 tests/s, 3433.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp48proc_4\nStarted\n.\nFinished in 0.000931146 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1073.95 tests/s, 3221.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpehmi_cij\nStarted\n.\nFinished in 0.00077929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1283.22 tests/s, 3849.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg095int2\nStarted\n.\nFinished in 0.000924341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1081.85 tests/s, 3245.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppaqmbj5i\nStarted\n.\nFinished in 0.001449707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    689.79 tests/s, 2069.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7hvr5sn0\nStarted\n.\nFinished in 0.000546535 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1829.71 tests/s, 5489.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_1axe_f\nStarted\n.\nFinished in 0.001150494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    869.19 tests/s, 2607.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vflw6rj\nStarted\n.\nFinished in 0.000494619 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2021.76 tests/s, 6065.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoki7u3ao\nStarted\n.\nFinished in 0.001341108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    745.65 tests/s, 2236.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptsy8rznr\nStarted\n.\nFinished in 0.001290055 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    775.16 tests/s, 2325.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvxpgikrw\nStarted\n.\nFinished in 0.001071214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    933.52 tests/s, 2800.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8l2fqjlt\nStarted\n.\nFinished in 0.000647436 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1544.55 tests/s, 4633.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmw0zq8kq\nStarted\n.\nFinished in 0.000721849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1385.33 tests/s, 4155.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9roavx4n\nStarted\n.\nFinished in 0.001276262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    783.54 tests/s, 2350.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi1ia6lcd\nStarted\n.\nFinished in 0.001736352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    575.92 tests/s, 1727.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6n5hdm3\nStarted\n.\nFinished in 0.000699866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1428.84 tests/s, 4286.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgqko90lb\nStarted\n.\nFinished in 0.001078681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    927.06 tests/s, 2781.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfua11jm5\nStarted\n.\nFinished in 0.001277954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    782.50 tests/s, 2347.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcbai20ht\nStarted\n.\nFinished in 0.000822093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1216.41 tests/s, 3649.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5g_c9mau\nStarted\n.\nFinished in 0.000981014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1019.35 tests/s, 3058.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl_no7i_4\nStarted\n.\nFinished in 0.001242854 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    804.60 tests/s, 2413.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnbmae7vp\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpnbmae7vp.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.008104416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.39 tests/s, 123.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzqay42dg\nStarted\n.\nFinished in 0.000778562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1284.42 tests/s, 3853.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2l3bo208\nStarted\n.\nFinished in 0.000787109 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1270.47 tests/s, 3811.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  result\
    \ = []\n  (1..string.length).each do |i|\n    result << string[0...i]\n  end\n\
    \  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpylgdki_a\nStarted\n.\nFinished in 0.000644546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1551.48 tests/s, 4654.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf519djb8\nStarted\n.\nFinished in 0.000585609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1707.62 tests/s, 5122.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2tf37415\nStarted\n.\nFinished in 0.0005884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1699.52 tests/s, 5098.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppzti0axe\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmppzti0axe.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.009880446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.21 tests/s, 101.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc62_yonn\nStarted\n.\nFinished in 0.000775419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1289.63 tests/s, 3868.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0upb1tld\nStarted\n.\nFinished in 0.000642944 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1555.35 tests/s, 4666.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpds9ar6ln\nStarted\n.\nFinished in 0.001218331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    820.80 tests/s, 2462.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaj2d9rrs\nStarted\n.\nFinished in 0.0005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2000.00 tests/s, 6000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp22zlg6jg\nStarted\n.\nFinished in 0.001467218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    681.56 tests/s, 2044.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_39afvon\nStarted\n.\nFinished in 0.001152779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    867.47 tests/s, 2602.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6aq8olmi\nStarted\n.\nFinished in 0.000833255 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1200.11 tests/s, 3600.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppw439zyp\nStarted\n.\nFinished in 0.000643725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1553.46 tests/s, 4660.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps32mvwvh\nStarted\n.\nFinished in 0.000895829 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1116.28 tests/s, 3348.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn8d9warn\nStarted\n.\nFinished in 0.000740415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1350.59 tests/s, 4051.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsfx0v8kb\nStarted\n.\nFinished in 0.000551457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.38 tests/s, 5440.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyephkq37\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpyephkq37.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.012091943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.70 tests/s, 82.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpktv78p7q\nStarted\n.\nFinished in 0.000859566 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.38 tests/s, 3490.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplowvqb7g\nStarted\n.\nFinished in 0.000766637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1304.40 tests/s, 3913.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6naofsz\nStarted\n.\nFinished in 0.000775058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1290.23 tests/s, 3870.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4jrw6jtk\nStarted\n.\nFinished in 0.001025578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    975.06 tests/s, 2925.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbm5z9133\nStarted\n.\nFinished in 0.001067561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    936.71 tests/s, 2810.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb2b3vhwx\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpb2b3vhwx.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.018005749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.54 tests/s, 55.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpysn_oe6s\nStarted\n.\nFinished in 0.000981209 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1019.15 tests/s, 3057.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4347b3d5\nStarted\n.\nFinished in 0.001312457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    761.93 tests/s, 2285.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1cuyssx8\nStarted\n.\nFinished in 0.001843156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    542.55 tests/s, 1627.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphg08v9ch\nStarted\n.\nFinished in 0.001694485 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    590.15 tests/s, 1770.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppotmhl4o\nStarted\n.\nFinished in 0.001127291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    887.08 tests/s, 2661.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ed7e1zw\nStarted\n.\nFinished in 0.000931904 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1073.07 tests/s, 3219.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a2_8hil\nStarted\n.\nFinished in 0.000623415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1604.07 tests/s, 4812.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw5xku5c_\nStarted\n.\nFinished in 0.000808759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1236.46 tests/s, 3709.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplu6gdts_\nStarted\n.\nFinished in 0.00116492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    858.43 tests/s, 2575.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprr_ek5a8\nStarted\n.\nFinished in 0.001558239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    641.75 tests/s, 1925.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwr0mjmn8\nStarted\n.\nFinished in 0.000872921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1145.58 tests/s, 3436.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp6hfmqnr\nStarted\n.\nFinished in 0.001007438 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    992.62 tests/s, 2977.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpschfu1qp\nStarted\n.\nFinished in 0.00103651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    964.78 tests/s, 2894.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkfb_88uc\nStarted\n.\nFinished in 0.000998651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.35 tests/s, 3004.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsjtd977d\nStarted\n.\nFinished in 0.001210224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    826.29 tests/s, 2478.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqta_emsf\nStarted\n.\nFinished in 0.000549762 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1818.97 tests/s, 5456.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzce9hnlf\nStarted\n.\nFinished in 0.001073391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    931.63 tests/s, 2794.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcc2n35jr\nStarted\n.\nFinished in 0.00105877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    944.49 tests/s, 2833.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkf6bf79c\nStarted\n.\nFinished in 0.000573232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1744.49 tests/s, 5233.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppsk2uut7\nStarted\n.\nFinished in 0.001187644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    842.00 tests/s, 2526.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpshuy6sfn\nStarted\n.\nFinished in 0.000768431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1301.35 tests/s, 3904.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpatz8ostl\nStarted\n.\nFinished in 0.001291218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    774.46 tests/s, 2323.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjyyy1esi\nStarted\n.\nFinished in 0.00086761 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1152.59 tests/s, 3457.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmvkkf8fv\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpmvkkf8fv.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.007621364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.21 tests/s, 131.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  (1..string.length).map\
    \ { |i| string[0...i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpji0_8_ls\nStarted\n.\nFinished in 0.000542528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1843.22 tests/s, 5529.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjj7cvcop\nStarted\nF\n===============================================================================\n\
    Failure: test_all_prefixes(TestHumanEval)\n/tmp/tmpjj7cvcop.rb:15:in `test_all_prefixes'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_all_prefixes\n\
    \     14:     candidate = method(:all_prefixes)\n  => 15:     assert_equal([],\
    \ candidate.call(\"\"))\n     16:     assert_equal([\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n     17:     assert_equal([\"\
    W\", \"WW\", \"WWW\"], candidate.call(\"WWW\"))\n     18:   end\n<[]> expected\
    \ but was\n<[\"\"]>\n\ndiff:\n? [\"\"]\n===============================================================================\n\
    \nFinished in 0.00722289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.45 tests/s, 138.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2p0cx0pc\nStarted\n.\nFinished in 0.000937358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1066.83 tests/s, 3200.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8odgo500\nStarted\n.\nFinished in 0.00046059 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2171.13 tests/s, 6513.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
    \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\
    \"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
    WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv_oim6_0\nStarted\n.\nFinished in 0.000615836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1623.81 tests/s, 4871.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return list of all prefixes from shortest to longest of the input string\n\
    # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_all_prefixes\n    candidate = method(:all_prefixes)\n    assert_equal([],\
    \ candidate.call(\"\"))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"], candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"\
    WW\", \"WWW\"], candidate.call(\"WWW\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptwj_i3ko\nStarted\n.\nFinished in 0.000492343 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2031.10 tests/s, 6093.31 assertions/s\n"
  exit_code: 0
  status: OK
