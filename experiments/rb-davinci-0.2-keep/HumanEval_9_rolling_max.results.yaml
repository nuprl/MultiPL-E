name: HumanEval_9_rolling_max
language: ruby
results:
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers.first\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3wkbr26x\nStarted\n.\nFinished in 0.000697269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1434.17 tests/s, 5736.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgxyujggd\nStarted\n.\nFinished in 0.000614578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1627.13 tests/s, 6508.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgwjq09r2\nStarted\n.\nFinished in 0.000567878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1760.94 tests/s, 7043.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplbngiquj\nStarted\n.\nFinished in 0.000936742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1067.53 tests/s, 4270.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwfrlyy85\nStarted\n.\nFinished in 0.000523186 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1911.37 tests/s, 7645.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7zfbw4gc\nStarted\n.\nFinished in 0.000521571 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1917.28 tests/s, 7669.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps2nacq3q\nStarted\n.\nFinished in 0.000687657 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1454.21 tests/s, 5816.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppe9qqm3n\nStarted\n.\nFinished in 0.000569495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1755.94 tests/s, 7023.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7bpmk8pz\nStarted\n.\nFinished in 0.000876364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1141.08 tests/s, 4564.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnt0h62dn\nStarted\n.\nFinished in 0.000887073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1127.30 tests/s, 4509.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb_n74gsw\nStarted\n.\nFinished in 0.00085463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1170.10 tests/s, 4680.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzthmjz5j\nStarted\n.\nFinished in 0.000661503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1511.71 tests/s, 6046.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_xfrki0g\nStarted\n.\nFinished in 0.00053465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1870.38 tests/s, 7481.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl1adnaau\nStarted\n.\nFinished in 0.000599216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1668.85 tests/s, 6675.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9nz7mbxf\nStarted\n.\nFinished in 0.000475601 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2102.60 tests/s, 8410.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn9bsri8n\nStarted\n.\nFinished in 0.00096693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1034.20 tests/s, 4136.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5vyle70u\nStarted\n.\nFinished in 0.001117851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    894.57 tests/s, 3578.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |number, index| numbers[0..index].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw4_cp6ew\nStarted\n.\nFinished in 0.001036727 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    964.57 tests/s, 3858.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpra3_dm1r\nStarted\n.\nFinished in 0.001208164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    827.70 tests/s, 3310.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpso34no9h\nStarted\n.\nFinished in 0.000602092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1660.88 tests/s, 6643.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmp7uwm0bpw.rb:9: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7uwm0bpw.rb:17: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5uy9jqbq\nStarted\n.\nFinished in 0.000925565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1080.42 tests/s, 4321.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0i76o3k4\nStarted\n.\nFinished in 0.000941793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1061.80 tests/s, 4247.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << numbers[0..numbers.index(number)].max\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprks5jitr\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmprks5jitr.rb:17:in `test_rolling_max'\n\
    \     14:     assert_equal([], candidate.call([]))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n  => 17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n     19: end\n<[3,\
    \ 3, 3, 100, 100]> expected but was\n<[3, 3, 3, 100, 3]>\n\ndiff:\n? [3, 3, 3,\
    \ 100, 100]\n?                3   \n===============================================================================\n\
    \nFinished in 0.009360931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.83 tests/s, 427.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmi1f7ay\nStarted\n.\nFinished in 0.000728297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1373.07 tests/s, 5492.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpparwuv14\nStarted\n.\nFinished in 0.001366582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    731.75 tests/s, 2927.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    max_numbers << max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbdj7440e\nStarted\n.\nFinished in 0.001288339 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    776.19 tests/s, 3104.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpersvbe87\nStarted\n.\nFinished in 0.00055036 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1816.99 tests/s, 7267.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    if number > max\n      max = number\n    else\n\
    \      max\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpln9fxt4k\nStarted\n.\nFinished in 0.000862849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1158.95 tests/s, 4635.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdbsk8pvp\nStarted\n.\nFinished in 0.000992866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1007.19 tests/s, 4028.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |n, result|\n    result << (result.last || n)\n    result[-1] = n if n >\
    \ result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6tzbr16m\nStarted\n.\nFinished in 0.00061515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1625.62 tests/s, 6502.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_35fdnb_\nStarted\n.\nFinished in 0.000939888 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.96 tests/s, 4255.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvigk_lyl\nStarted\n.\nFinished in 0.000894197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1118.32 tests/s, 4473.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6tz_jd1p\nStarted\n.\nFinished in 0.000541082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1848.15 tests/s, 7392.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    if number > max\n    \
    \  max = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6uzrwj2y\nStarted\n.\nFinished in 0.000731881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1366.34 tests/s, 5465.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_8f2hto9\nStarted\n.\nFinished in 0.000952677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1049.67 tests/s, 4198.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8epiaf9s\nStarted\n.\nFinished in 0.000825156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1211.89 tests/s, 4847.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfh7_90t3\nStarted\n.\nFinished in 0.000811035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1232.99 tests/s, 4931.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number >= max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplc4kri94\nStarted\n.\nFinished in 0.000723588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1382.00 tests/s, 5528.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprgmaa8ih\nStarted\n.\nFinished in 0.000668164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1496.64 tests/s, 5986.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each_with_index do |number, index|\n    max << numbers[0..index].max\n\
    \  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_l823gyt\nStarted\n.\nFinished in 0.000506019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1976.21 tests/s, 7904.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbj8p8wri\nStarted\n.\nFinished in 0.000765856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1305.73 tests/s, 5222.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplk5wk4bg\nStarted\n.\nFinished in 0.00078888 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1267.62 tests/s, 5070.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpokcygjqd\nStarted\n.\nFinished in 0.000515776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1938.83 tests/s, 7755.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_a0sfhg_\nStarted\n.\nFinished in 0.001012574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    987.58 tests/s, 3950.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf72mkich\nStarted\n.\nFinished in 0.000959906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1041.77 tests/s, 4167.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx_6mt7xq\nStarted\n.\nFinished in 0.000862078 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1159.99 tests/s, 4639.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each_with_index do |number, index|\n    max[index] = numbers[0..index].max\n\
    \  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp19ijptb3\nStarted\n.\nFinished in 0.001486314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    672.81 tests/s, 2691.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  numbers.each_with_index do |number, index|\n    max_numbers[index] =\
    \ numbers[0..index].max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2m42xuwi\nStarted\n.\nFinished in 0.000665783 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1501.99 tests/s, 6007.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |num|\n    if num > max\n      max = num\n    end\n    max\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo40uxjqk\nStarted\n.\nFinished in 0.001079421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    926.42 tests/s, 3705.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result.last\
    \ = number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmptk6jcgwh\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [1, 1]:Array\n  Did you mean?  last\n/tmp/tmptk6jcgwh.rb:8:in `block in\
    \ rolling_max'\n/tmp/tmptk6jcgwh.rb:6:in `each'\n/tmp/tmptk6jcgwh.rb:6:in `each_with_object'\n\
    /tmp/tmptk6jcgwh.rb:6:in `rolling_max'\n/tmp/tmptk6jcgwh.rb:16:in `call'\n/tmp/tmptk6jcgwh.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.012784318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.22 tests/s, 78.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg2ogf5gp\nStarted\n.\nFinished in 0.000736403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1357.95 tests/s, 5431.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |num|\n    max = num if num > max\n    max\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy5gk1zeb\nStarted\n.\nFinished in 0.000992519 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1007.54 tests/s, 4030.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_j5pfx_p\nStarted\n.\nFinished in 0.001236304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    808.86 tests/s, 3235.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0iv_g2nb\nStarted\n.\nFinished in 0.001269834 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    787.50 tests/s, 3150.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3p5b9w5n\nStarted\n.\nFinished in 0.000538025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.65 tests/s, 7434.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3cwh7bjy\nStarted\n.\nFinished in 0.001233631 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    810.62 tests/s, 3242.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5nbjck8a\nStarted\n.\nFinished in 0.000591398 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1690.91 tests/s, 6763.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnd7agkef\nStarted\n.\nFinished in 0.000793955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1259.52 tests/s, 5038.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmper_6pu1r\nStarted\n.\nFinished in 0.000522265 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1914.74 tests/s, 7658.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92__va0q\nStarted\n.\nFinished in 0.000573472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1743.76 tests/s, 6975.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpann71s4p\nStarted\n.\nFinished in 0.00055594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1798.76 tests/s, 7195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp402mwm7v\nStarted\n.\nFinished in 0.000505871 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1976.79 tests/s, 7907.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << result.last.to_i.max(num)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptnmb7uk9\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval): NoMethodError: undefined method `max'\
    \ for 0:Integer\n/tmp/tmptnmb7uk9.rb:7:in `block in rolling_max'\n/tmp/tmptnmb7uk9.rb:6:in\
    \ `each'\n/tmp/tmptnmb7uk9.rb:6:in `each_with_object'\n/tmp/tmptnmb7uk9.rb:6:in\
    \ `rolling_max'\n/tmp/tmptnmb7uk9.rb:15:in `call'\n/tmp/tmptnmb7uk9.rb:15:in `test_rolling_max'\n\
    \     12:   def test_rolling_max\n     13:     candidate = method(:rolling_max)\n\
    \     14:     assert_equal([], candidate.call([]))\n  => 15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n===============================================================================\n\
    \nFinished in 0.004326794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.12 tests/s, 231.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpltsdc3ru\nStarted\n.\nFinished in 0.000514684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1942.94 tests/s, 7771.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = nil\n  numbers.each do |number|\n    max = number if max.nil? || number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptz_jwpd9\nStarted\n.\nFinished in 0.000798487 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1252.37 tests/s, 5009.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4fo35bqw\nStarted\n.\nFinished in 0.001073876 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    931.21 tests/s, 3724.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8fhjuzq8\nStarted\n.\nFinished in 0.00054849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1823.19 tests/s, 7292.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb2eifxac\nStarted\n.\nFinished in 0.000541286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1847.45 tests/s, 7389.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkgfxwoi5\nStarted\n.\nFinished in 0.000777495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1286.18 tests/s, 5144.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb40fsv2b\nStarted\n.\nFinished in 0.000871318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.69 tests/s, 4590.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4uphzsml\nStarted\n.\nFinished in 0.000786881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1270.84 tests/s, 5083.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfg9mz6b3\nStarted\n.\nFinished in 0.00059381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1684.04 tests/s, 6736.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0ox_8rz\nStarted\n.\nFinished in 0.000998124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.88 tests/s, 4007.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp87xlnluu\nStarted\n.\nFinished in 0.000549144 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1821.02 tests/s, 7284.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprey1wnjw\nStarted\n.\nFinished in 0.000962648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1038.80 tests/s, 4155.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx5q61uyo\nStarted\n.\nFinished in 0.001407369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    710.55 tests/s, 2842.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb_de_exs\nStarted\n.\nFinished in 0.000564835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1770.43 tests/s, 7081.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkgh1c4v4\nStarted\n.\nFinished in 0.000510125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1960.30 tests/s, 7841.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  # TODO: implement\
    \ me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzkl8zkli\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpzkl8zkli.rb:12:in `test_rolling_max'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_rolling_max\n\
    \     11:     candidate = method(:rolling_max)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     14:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     15:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015134507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.07 tests/s, 66.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe086sdqh\nStarted\n.\nFinished in 0.000693021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1442.96 tests/s, 5771.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp27721u6c\nStarted\n.\nFinished in 0.00073554 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1359.55 tests/s, 5438.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuhj7jsit\nStarted\n.\nFinished in 0.000774438 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1291.26 tests/s, 5165.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptj6ol8qc\nStarted\n.\nFinished in 0.000619536 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1614.11 tests/s, 6456.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjrpbwuit\nStarted\n.\nFinished in 0.000548443 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1823.34 tests/s, 7293.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkwkjkekf\nStarted\n.\nFinished in 0.000933039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1071.77 tests/s, 4287.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe3ybls5g\nStarted\n.\nFinished in 0.00076338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1309.96 tests/s, 5239.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptnbkfwn0\nStarted\n.\nFinished in 0.000568188 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1759.98 tests/s, 7039.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9h2_prup\nStarted\n.\nFinished in 0.000629955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1587.41 tests/s, 6349.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2q5cy2ac\nStarted\n.\nFinished in 0.001022581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    977.92 tests/s, 3911.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1w4jyvsk\nStarted\n.\nFinished in 0.000783789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1275.85 tests/s, 5103.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbm4leuiq\nStarted\n.\nFinished in 0.000541806 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1845.68 tests/s, 7382.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_h_r7d8u\nStarted\n.\nFinished in 0.001386077 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    721.46 tests/s, 2885.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92gtvtpz\nStarted\n.\nFinished in 0.001034344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    966.80 tests/s, 3867.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpinuah2ce\nStarted\n.\nFinished in 0.000957651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1044.22 tests/s, 4176.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp964bh4z_\nStarted\n.\nFinished in 0.000837713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1193.73 tests/s, 4774.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_values =\
    \ []\n  max_value = numbers.first\n  numbers.each do |number|\n    max_value =\
    \ number if number > max_value\n    max_values << max_value\n  end\n  max_values\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0n13my2h\nStarted\n.\nFinished in 0.001285939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    777.64 tests/s, 3110.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxjm28swz\nStarted\n.\nFinished in 0.000816643 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1224.53 tests/s, 4898.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    if number > max\n    \
    \  max = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvs0fcs9h\nStarted\n.\nFinished in 0.000927168 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1078.55 tests/s, 4314.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || 0)\n    result.last = [result.last,\
    \ number].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm2n4s3ru\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [0]:Array\n  Did you mean?  last\n/tmp/tmpm2n4s3ru.rb:8:in `block in rolling_max'\n\
    /tmp/tmpm2n4s3ru.rb:6:in `each'\n/tmp/tmpm2n4s3ru.rb:6:in `each_with_object'\n\
    /tmp/tmpm2n4s3ru.rb:6:in `rolling_max'\n/tmp/tmpm2n4s3ru.rb:16:in `call'\n/tmp/tmpm2n4s3ru.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.006036038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.67 tests/s, 165.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp77kk8kup\nStarted\n.\nFinished in 0.001638835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    610.19 tests/s, 2440.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdr1u9e3e\nStarted\n.\nFinished in 0.000785403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1273.23 tests/s, 5092.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_vsxx6e\nStarted\n.\nFinished in 0.000952291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1050.10 tests/s, 4200.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzs8_n9tw\nStarted\n.\nFinished in 0.000546973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1828.24 tests/s, 7312.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |_, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvo6x_o0e\nStarted\n.\nFinished in 0.000801529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.62 tests/s, 4990.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb8ml6mi2\nStarted\n.\nFinished in 0.000594453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1682.22 tests/s, 6728.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "/tmp/tmp9znpc2s7.rb:9: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9znpc2s7.rb:17: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ej0zqhc\nStarted\n.\nFinished in 0.000802899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1245.49 tests/s, 4981.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00sp9h2s\nStarted\n.\nFinished in 0.001116026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    896.04 tests/s, 3584.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxvadt373\nStarted\n.\nFinished in 0.000514869 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1942.24 tests/s, 7768.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiz3gl_r3\nStarted\n.\nFinished in 0.000971124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1029.73 tests/s, 4118.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg0y96ql1\nStarted\n.\nFinished in 0.000551796 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1812.26 tests/s, 7249.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbafnpkah\nStarted\n.\nFinished in 0.000633224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1579.22 tests/s, 6316.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqx7bl0e\nStarted\n.\nFinished in 0.0008304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1204.24 tests/s, 4816.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo6_w227a\nStarted\n.\nFinished in 0.001286596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    777.24 tests/s, 3108.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvscea7pq\nStarted\n.\nFinished in 0.000551268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1814.00 tests/s, 7256.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp051czlu6\nStarted\n.\nFinished in 0.001012978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    987.19 tests/s, 3948.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq3d_i9xm\nStarted\n.\nFinished in 0.000707237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1413.95 tests/s, 5655.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.empty? ? number : [result.last, number].max)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpee9yjhh0\nStarted\n.\nFinished in 0.000547001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1828.15 tests/s, 7312.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_srtvxzj\nStarted\n.\nFinished in 0.000655835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1524.77 tests/s, 6099.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each do |number|\n    max << number if max.empty? || number > max.last\n\
    \    max << max.last if number <= max.last\n  end\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu89wsweb\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpu89wsweb.rb:18:in `test_rolling_max'\n\
    \     15:   def test_rolling_max\n     16:     candidate = method(:rolling_max)\n\
    \     17:     assert_equal([], candidate.call([]))\n  => 18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     21:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 2, 3, 3, 4, 4]>\n\ndiff:\n? [1, 1, 2, 2, 3, 3, 4, 4]\n===============================================================================\n\
    \nFinished in 0.009410386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.27 tests/s, 212.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaipthx8z\nStarted\n.\nFinished in 0.000687346 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1454.87 tests/s, 5819.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpil8qc7dh\nStarted\n.\nFinished in 0.000965313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1035.93 tests/s, 4143.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppe9ge8i8\nStarted\n.\nFinished in 0.000523707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1909.46 tests/s, 7637.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps1jlx97p\nStarted\n.\nFinished in 0.000908916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.21 tests/s, 4400.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmpll7r_7\nStarted\n.\nFinished in 0.000511752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1954.07 tests/s, 7816.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr85o_8sb\nStarted\n.\nFinished in 0.000533723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1873.63 tests/s, 7494.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_numbers << numbers[0]\n  numbers[1..-1].each do |number|\n    max_numbers\
    \ << [max_numbers.last, number].max\n  end\n  max_numbers\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpokfh_hwf\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval): NoMethodError: undefined method `each'\
    \ for nil:NilClass\n/tmp/tmpokfh_hwf.rb:8:in `rolling_max'\n/tmp/tmpokfh_hwf.rb:17:in\
    \ `call'\n/tmp/tmpokfh_hwf.rb:17:in `test_rolling_max'\n     14: class TestHumanEval\
    \ < Test::Unit::TestCase\n     15:   def test_rolling_max\n     16:     candidate\
    \ = method(:rolling_max)\n  => 17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n===============================================================================\n\
    \nFinished in 0.007088617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_skzh9vx\nStarted\n.\nFinished in 0.000938248 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1065.82 tests/s, 4263.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppm0u80b0\nStarted\n.\nFinished in 0.00095206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1050.35 tests/s, 4201.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4fd45j1m\nStarted\n.\nFinished in 0.000930211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1075.02 tests/s, 4300.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9y10qgl0\nStarted\n.\nFinished in 0.001497895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    667.60 tests/s, 2670.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplzhgdi2l\nStarted\n.\nFinished in 0.000758001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1319.26 tests/s, 5277.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxu1gz1zx\nStarted\n.\nFinished in 0.000705693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1417.05 tests/s, 5668.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ypoi4s6\nStarted\n.\nFinished in 0.001195994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    836.12 tests/s, 3344.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppd0ty3vp\nStarted\n.\nFinished in 0.000502204 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1991.22 tests/s, 7964.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvh2bvsou\nStarted\n.\nFinished in 0.000622062 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1607.56 tests/s, 6430.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_0_n9j5\nStarted\n.\nFinished in 0.001005027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    995.00 tests/s, 3979.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv3a995p6\nStarted\n.\nFinished in 0.001213337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    824.17 tests/s, 3296.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd41yp3_y\nStarted\n.\nFinished in 0.001699565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    588.39 tests/s, 2353.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6geec1i3\nStarted\n.\nFinished in 0.001277274 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    782.92 tests/s, 3131.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgx4wg1d0\nStarted\n.\nFinished in 0.000988309 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1011.83 tests/s, 4047.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |num, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7qv0ooe\nStarted\n.\nFinished in 0.000527486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1895.78 tests/s, 7583.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << (result.last || num)\n    result[-1] = num if\
    \ num > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2gubg95k\nStarted\n.\nFinished in 0.000551898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1811.93 tests/s, 7247.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp79b7dsdd\nStarted\n.\nFinished in 0.00070721 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1414.01 tests/s, 5656.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers.first\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpco8ppsz8\nStarted\n.\nFinished in 0.000531132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1882.77 tests/s, 7531.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprxknskx9\nStarted\n.\nFinished in 0.000924914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1081.18 tests/s, 4324.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnephrn1w\nStarted\n.\nFinished in 0.000664427 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1505.06 tests/s, 6020.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpylcmw8jh\nStarted\n.\nFinished in 0.001792576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    557.86 tests/s, 2231.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl429cepa\nStarted\n.\nFinished in 0.001124957 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    888.92 tests/s, 3555.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8vw6guv3\nStarted\n.\nFinished in 0.000589481 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1696.41 tests/s, 6785.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcd05fgq0\nStarted\n.\nFinished in 0.001029952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    970.92 tests/s, 3883.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3fot0snu\nStarted\n.\nFinished in 0.001316874 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    759.37 tests/s, 3037.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |n, result|\n    result << numbers[0..numbers.index(n)].max\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk4qykbmc\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpk4qykbmc.rb:17:in `test_rolling_max'\n\
    \     14:     assert_equal([], candidate.call([]))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n  => 17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n     19: end\n<[3,\
    \ 3, 3, 100, 100]> expected but was\n<[3, 3, 3, 100, 3]>\n\ndiff:\n? [3, 3, 3,\
    \ 100, 100]\n?                3   \n===============================================================================\n\
    \nFinished in 0.012076773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.80 tests/s, 331.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsiqzw3ob\nStarted\n.\nFinished in 0.000865681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1155.16 tests/s, 4620.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqgmbtklo\nStarted\n.\nFinished in 0.000660332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1514.39 tests/s, 6057.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwkke0_eb\nStarted\n.\nFinished in 0.000576214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1735.47 tests/s, 6941.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd7jwqt1e\nStarted\n.\nFinished in 0.000568434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1759.22 tests/s, 7036.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_b_19od4\nStarted\n.\nFinished in 0.000649834 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1538.85 tests/s, 6155.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each do |number|\n    max << number if max.empty? || number > max.last\n\
    \    max << max.last if number <= max.last\n  end\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphi60irfx\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmphi60irfx.rb:18:in `test_rolling_max'\n\
    \     15:   def test_rolling_max\n     16:     candidate = method(:rolling_max)\n\
    \     17:     assert_equal([], candidate.call([]))\n  => 18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     21:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 2, 3, 3, 4, 4]>\n\ndiff:\n? [1, 1, 2, 2, 3, 3, 4, 4]\n===============================================================================\n\
    \nFinished in 0.017243255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.99 tests/s, 115.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6q5kucdi\nStarted\n.\nFinished in 0.000988656 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1011.47 tests/s, 4045.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << number if result.empty?\n    result << [result.last,\
    \ number].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuxl8bj5b\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpuxl8bj5b.rb:16:in `test_rolling_max'\n\
    \     13:   def test_rolling_max\n     14:     candidate = method(:rolling_max)\n\
    \     15:     assert_equal([], candidate.call([]))\n  => 16:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 3, 4]>\n\ndiff:\n? [1, 1, 2, 3, 4]\n===============================================================================\n\
    \nFinished in 0.019008555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.61 tests/s, 105.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5leolshl\nStarted\n.\nFinished in 0.001209814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    826.57 tests/s, 3306.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppv9ljc03\nStarted\n.\nFinished in 0.001024779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    975.82 tests/s, 3903.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0o4_nqm\nStarted\n.\nFinished in 0.00081337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1229.45 tests/s, 4917.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhf_mimp\nStarted\n.\nFinished in 0.000609908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1639.59 tests/s, 6558.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ry2bvs5\nStarted\n.\nFinished in 0.001139345 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    877.70 tests/s, 3510.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwzyeg5q2\nStarted\n.\nFinished in 0.000553568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1806.46 tests/s, 7225.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn0z2bq61\nStarted\n.\nFinished in 0.000772856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1293.90 tests/s, 5175.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbdpgx2pq\nStarted\n.\nFinished in 0.000784647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1274.46 tests/s, 5097.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_numbers << numbers[0]\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    max_numbers << [max_numbers[index - 1], number].max\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt45_wq7d\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpt45_wq7d.rb:18:in `test_rolling_max'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rolling_max\n\
    \     17:     candidate = method(:rolling_max)\n  => 18:     assert_equal([],\
    \ candidate.call([]))\n     19:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     20:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     21:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<[nil]>\n\ndiff:\n? [nil]\n===============================================================================\n\
    \nFinished in 0.013034738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.72 tests/s, 76.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    max_numbers << max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pxtug6o\nStarted\n.\nFinished in 0.000813517 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1229.23 tests/s, 4916.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4arpkfr4\nStarted\n.\nFinished in 0.000551365 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.68 tests/s, 7254.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk5n7sh73\nStarted\n.\nFinished in 0.000531235 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1882.41 tests/s, 7529.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7y586z4q\nStarted\n.\nFinished in 0.000802811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1245.62 tests/s, 4982.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwhcz9m4e\nStarted\n.\nFinished in 0.000611729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1634.71 tests/s, 6538.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf0cch6wn\nStarted\n.\nFinished in 0.000789385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1266.81 tests/s, 5067.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5_mwqrpg\nStarted\n.\nFinished in 0.000899504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1111.72 tests/s, 4446.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpujbc67pf\nStarted\n.\nFinished in 0.000562626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1777.38 tests/s, 7109.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk173cbog\nStarted\n.\nFinished in 0.000997039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1002.97 tests/s, 4011.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp25o46ksb\nStarted\n.\nFinished in 0.000929198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1076.20 tests/s, 4304.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz7fd35bh\nStarted\n.\nFinished in 0.000737416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1356.09 tests/s, 5424.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ezx9cir\nStarted\n.\nFinished in 0.000546433 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1830.05 tests/s, 7320.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsbkat4w0\nStarted\n.\nFinished in 0.000685768 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1458.22 tests/s, 5832.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4co_jn3j\nStarted\n.\nFinished in 0.000809063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1236.00 tests/s, 4943.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnsg3kryc\nStarted\n.\nFinished in 0.000892805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.07 tests/s, 4480.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptwgg_tew\nStarted\n.\nFinished in 0.000583616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1713.46 tests/s, 6853.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9tjv6fq7\nStarted\n.\nFinished in 0.000650039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1538.37 tests/s, 6153.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpffsv5ago\nStarted\n.\nFinished in 0.000474511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2107.43 tests/s, 8429.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnlnmsukd\nStarted\n.\nFinished in 0.001164179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    858.97 tests/s, 3435.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9hklcq9q\nStarted\n.\nFinished in 0.000496596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2013.71 tests/s, 8054.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptp5a5hb9\nStarted\n.\nFinished in 0.000873476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1144.85 tests/s, 4579.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp863oz6rr\nStarted\n.\nFinished in 0.000887205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1127.14 tests/s, 4508.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph31cq6el\nStarted\n.\nFinished in 0.000738024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1354.97 tests/s, 5419.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj1sy_c0u\nStarted\n.\nFinished in 0.001834166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    545.21 tests/s, 2180.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp93_yoqvg\nStarted\n.\nFinished in 0.000463131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2159.22 tests/s, 8636.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << (result.last || num)\n    result.last = num\
    \ if num > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpki9od_uq\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [1, 1]:Array\n  Did you mean?  last\n/tmp/tmpki9od_uq.rb:8:in `block in\
    \ rolling_max'\n/tmp/tmpki9od_uq.rb:6:in `each'\n/tmp/tmpki9od_uq.rb:6:in `each_with_object'\n\
    /tmp/tmpki9od_uq.rb:6:in `rolling_max'\n/tmp/tmpki9od_uq.rb:16:in `call'\n/tmp/tmpki9od_uq.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.009605082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.11 tests/s, 104.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm0e7hh6j\nStarted\n.\nFinished in 0.000508169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1967.85 tests/s, 7871.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphau7assw\nStarted\n.\nFinished in 0.001257852 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    795.01 tests/s, 3180.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt802afev\nStarted\n.\nFinished in 0.000507186 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1971.66 tests/s, 7886.65 assertions/s\n"
  exit_code: 0
  status: OK
