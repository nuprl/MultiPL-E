name: HumanEval_156_int_to_mini_roman
language: ruby
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n#\
  \ >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
  \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
  \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
  \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
  \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
  \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
  \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
  \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
  \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
completions: ["  roman_numeral = ''\n  roman_numeral << 'm' * (number / 1000)\n  roman_numeral\
    \ << 'd' * (number % 1000 / 500)\n  roman_numeral << 'c' * (number % 500 / 100)\n\
    \  roman_numeral << 'l' * (number % 100 / 50)\n  roman_numeral << 'x' * (number\
    \ % 50 / 10)\n  roman_numeral << 'v' * (number % 10 / 5)\n  roman_numeral << 'i'\
    \ * (number % 5 / 1)\n  roman_numeral\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus\
    \ = number.divmod(divisor)\n    result << roman_numerals[divisor] * quotient\n\
    \    number = modulus\n  end\n  result\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = \"\"\n  roman_numerals.each do\
    \ |key, value|\n    while number >= key\n      result << value\n      number -=\
    \ key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1 => 'i',\n\
    \    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n\
    \    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 =>\
    \ 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object('')\
    \ do |key, result|\n    while number >= key\n      result << roman_numerals[key]\n\
    \      number -= key\n    end\n  end\nend", "  # TODO: implement me!\nend", " \
    \ roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n  \
    \  400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while number >=\
    \ key\n      result += value\n      number -= key\n    end\n  end\n  result\n\
    end", "  # your code here\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  # TODO: implement this method\nend", "  # Your\
    \ code here\nend", "  # TODO: Implement me!\nend", "  roman_numerals = {\n   \
    \ 1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n \
    \   40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n      result\
    \ += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while number >=\
    \ key\n      result += value\n      number -= key\n    end\n  end\n  result\n\
    end", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n    result\
    \ << value * (number / key)\n    number = number % key\n  end\n  result\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while number >=\
    \ key\n      result += value\n      number -= key\n    end\n  end\n  result\n\
    end", "  # Your code here\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object(\"\") do |(arabic,\
    \ roman), result|\n    while number >= arabic\n      result << roman\n      number\
    \ -= arabic\n    end\n  end\nend", "  roman_numerals = {\n    1000 => 'm',\n \
    \   900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  # TODO: implement me!\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  # your code here\nend", "  roman_numerals = {\n\
    \    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100\
    \ => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    result << value * (number / key)\n\
    \    number = number % key\n  end\n  result\nend", "  roman_numerals = {\n   \
    \ 1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 =>\
    \ 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n   \
    \ 9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n\
    \  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object(\"\
    \") do |key, roman|\n    roman << roman_numerals[key] * (number / key)\n    number\
    \ %= key\n  end\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # TODO: Implement me!\nend", "  roman_numerals = {\n\
    \    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100\
    \ => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |k, v|\n    (number / k).times { result << v; number\
    \ -= k }\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral = ''\n  roman_numerals.each\
    \ do |key, value|\n    roman_numeral << value * (number / key)\n    number = number\
    \ % key\n  end\n  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral = ''\n  roman_numerals.each\
    \ do |key, value|\n    roman_numeral << value * (number / key)\n    number = number\
    \ % key\n  end\n  roman_numeral\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  # your code here\nend", "  # TODO: implement me\nend",
  "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n\
    \    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 =>\
    \ 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n\
    \  }\n  result = ''\n  roman_numerals.keys.reverse.each do |key|\n    while number\
    \ >= key\n      result += roman_numerals[key]\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # TODO: Implement this method\nend", "  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend", "  # your code here\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while number >=\
    \ key\n      result += value\n      number -= key\n    end\n  end\n  result\n\
    end", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while\
    \ number >= key\n      result += value\n      number -= key\n    end\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n \
    \   500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while\
    \ number >= key\n      result += value\n      number -= key\n    end\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n \
    \   500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key, value|\n    if number\
    \ / key > 0\n      return value * (number / key) + int_to_mini_roman(number %\
    \ key)\n    end\n  end\nend", "  # your code here\nend", "  roman = \"\"\n  roman\
    \ << \"m\" * (number / 1000)\n  roman << \"d\" * (number % 1000 / 500)\n  roman\
    \ << \"c\" * (number % 500 / 100)\n  roman << \"l\" * (number % 100 / 50)\n  roman\
    \ << \"x\" * (number % 50 / 10)\n  roman << \"v\" * (number % 10 / 5)\n  roman\
    \ << \"i\" * (number % 5 / 1)\n  roman\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    result << value * (number / key)\n    number = number % key\n  end\n\
    \  result\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_string = ''\n  roman_numerals.each do |key,\
    \ value|\n    roman_string << value * (number / key)\n    number = number % key\n\
    \  end\n  roman_string\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    result << value * (number / key)\n    number = number % key\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n \
    \   500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  output = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      output << value\n      number -= key\n    end\n\
    \  end\n  output\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('') do |(arabic,\
    \ roman), result|\n    while number >= arabic\n      result << roman\n      number\
    \ -= arabic\n    end\n  end\nend", "  roman_numerals = {\n    1000 => 'm',\n \
    \   900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # Your code here\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # TODO: implement me!\nend", "  roman_numerals = {\n\
    \    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100\
    \ => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ += value\n      number -= key\n    end\n  end\n  result\nend", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  roman_numeral = \"\"\n  roman_numeral += \"m\" * (number / 1000)\n  roman_numeral\
    \ += \"d\" * (number % 1000 / 500)\n  roman_numeral += \"c\" * (number % 500 /\
    \ 100)\n  roman_numeral += \"l\" * (number % 100 / 50)\n  roman_numeral += \"\
    x\" * (number % 50 / 10)\n  roman_numeral += \"v\" * (number % 10 / 5)\n  roman_numeral\
    \ += \"i\" * (number % 5 / 1)\n  roman_numeral\nend", "  # your code here\nend",
  "  # TODO: implement this method\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key, value|\n    if number\
    \ >= key\n      return value + int_to_mini_roman(number - key)\n    end\n  end\n\
    \  ''\nend", "  roman_numeral = \"\"\n  roman_numeral += \"m\" * (number / 1000)\n\
    \  roman_numeral += \"d\" * (number % 1000 / 500)\n  roman_numeral += \"c\" *\
    \ (number % 500 / 100)\n  roman_numeral += \"l\" * (number % 100 / 50)\n  roman_numeral\
    \ += \"x\" * (number % 50 / 10)\n  roman_numeral += \"v\" * (number % 10 / 5)\n\
    \  roman_numeral += \"i\" * (number % 5 / 1)\n  roman_numeral\nend", "  # Your\
    \ code here\nend", "  # TODO: implement this method\nend", "  roman_numerals =\
    \ {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n\
    \    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n      result\
    \ += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  roman_numerals.each do |key, value|\n    return value + int_to_mini_roman(number\
    \ - key) if number >= key\n  end\n  ''\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    if number / key > 0\n      return value * (number / key) + int_to_mini_roman(number\
    \ % key)\n    end\n  end\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  # TODO: implement this method\nend", "  #\
    \ TODO: implement this method\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # TODO: implement me\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  roman_numeral = \"\"\n  roman_numeral << \"\
    m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n  roman_numeral\
    \ << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number % 100 /\
    \ 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral << \"v\"\
    \ * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n  roman_numeral\n\
    end", "  # your code here\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman = ''\n  roman = roman + 'm' * (number /\
    \ 1000)\n  roman = roman + 'd' * (number % 1000 / 500)\n  roman = roman + 'c'\
    \ * (number % 500 / 100)\n  roman = roman + 'l' * (number % 100 / 50)\n  roman\
    \ = roman + 'x' * (number % 50 / 10)\n  roman = roman + 'v' * (number % 10 / 5)\n\
    \  roman = roman + 'i' * (number % 5 / 1)\n  roman\nend", "  roman_numerals =\
    \ {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n \
    \   100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    result << value * (number / key)\n\
    \    number = number % key\n  end\n  result\nend", "  roman_numerals = {\n   \
    \ 1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 =>\
    \ 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n   \
    \ 9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n\
    \  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number / key > 0\n      return value * (number / key)\
    \ + int_to_mini_roman(number % key)\n    end\n  end\n  ''\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend", "  # Write your code\
    \ here\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500\
    \ => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n\
    \    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n\
    \    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n   \
    \ result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n    result\
    \ << value * (number / key)\n    number = number % key\n  end\n  result\nend",
  "  # your code here\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key, value|\n    if number\
    \ >= key\n      return value + int_to_mini_roman(number - key)\n    end\n  end\n\
    \  ''\nend", "  # TODO: Implement this method\nend", "  roman_numerals = {\n \
    \   1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100\
    \ => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    result << value * (number / key)\n\
    \    number = number % key\n  end\n  result\nend", "  # TODO: your code here\n\
    end", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  }\n  roman_numerals.each do |key, value|\n    return value + int_to_mini_roman(number\
    \ - key) if number >= key\n  end\n  ''\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend", "  roman = ''\n  roman = roman + 'm' * (number\
    \ / 1000)\n  roman = roman + 'd' * (number % 1000 / 500)\n  roman = roman + 'c'\
    \ * (number % 500 / 100)\n  roman = roman + 'l' * (number % 100 / 50)\n  roman\
    \ = roman + 'x' * (number % 50 / 10)\n  roman = roman + 'v' * (number % 10 / 5)\n\
    \  roman = roman + 'i' * (number % 5 / 1)\n  roman\nend", "  roman_numerals =\
    \ {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n \
    \   100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ roman_numeral << value\n      number -= key\n    end\n  end\n  roman_numeral\n\
    end", "  # TODO: implement this method\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  roman_numeral = \"\"\n  roman_numeral << \"m\" * (number\
    \ / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n  roman_numeral <<\
    \ \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number % 100 / 50)\n\
    \  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral << \"v\" * (number\
    \ % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n  roman_numeral\nend",
  "  roman_numeral = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each\
    \ do |key, value|\n    roman_numeral << value * (number / key)\n    number = number\
    \ % key\n  end\n  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend", "  roman = ''\n  roman = roman\
    \ + 'm' * (number / 1000)\n  roman = roman + 'd' * (number % 1000 / 500)\n  roman\
    \ = roman + 'c' * (number % 500 / 100)\n  roman = roman + 'l' * (number % 100\
    \ / 50)\n  roman = roman + 'x' * (number % 50 / 10)\n  roman = roman + 'v' * (number\
    \ % 10 / 5)\n  roman = roman + 'i' * (number % 5 / 1)\n  roman\nend", "  # your\
    \ code here\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  roman = ''\n  roman << 'm' * (number / 1000)\n  roman << 'd' * (number\
    \ % 1000 / 500)\n  roman << 'c' * (number % 500 / 100)\n  roman << 'l' * (number\
    \ % 100 / 50)\n  roman << 'x' * (number % 50 / 10)\n  roman << 'v' * (number %\
    \ 10 / 5)\n  roman << 'i' * (number % 5 / 1)\n  roman\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend", "  roman_numerals =\
    \ {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n \
    \   100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |k, v|\n    result << v * (number / k)\n    number\
    \ = number % k\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  # your code here\nend", "  # TODO: implement\
    \ me\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500\
    \ => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n\
    \    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n\
    \    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n   \
    \ while number >= key\n      result += value\n      number -= key\n    end\n \
    \ end\n  result\nend", "  # your code here\nend", "  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    while number >= key\n      result += value\n      number -= key\n\
    \    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral = ''\n  roman_numerals.each\
    \ do |key, value|\n    roman_numeral << value * (number / key)\n    number = number\
    \ % key\n  end\n  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    return value + int_to_mini_roman(number - key) if number >= key\n\
    \  end\n  ''\nend", "  roman_numeral = \"\"\n  roman_numerals = {\n    1000 =>\
    \ \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 =>\
    \ \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"\
    x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n\
    \  roman_numerals.each do |key, value|\n    roman_numeral << value * (number /\
    \ key)\n    number = number % key\n  end\n  roman_numeral\nend", "  # your code\
    \ here\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500\
    \ => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n\
    \    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n\
    \    1 => 'i'\n  }\n  roman_numerals.each do |key, value|\n    return value +\
    \ int_to_mini_roman(number - key) if number >= key\n  end\n  ''\nend", "  # your\
    \ code here\nend", "  return '' if number == 0\n  roman_numerals = {\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |k,\
    \ v|\n    return v + int_to_mini_roman(number - k) if number >= k\n  end\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  roman_numerals.each do |key, value|\n    if number >= key\n      return\
    \ value + int_to_mini_roman(number - key)\n    end\n  end\n  ''\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  # TODO:\
    \ Implement this function\nend", "  roman_numerals = {\n    1000 => 'm',\n   \
    \ 900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |key,\
    \ value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n\
    \    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n\
    \    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900\
    \ => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |key|\n    while number >= key\n      result += roman_numerals[key]\n   \
    \   number -= key\n    end\n  end\n  result\nend", "  roman_numeral = \"\"\n \
    \ roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number\
    \ % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral\
    \ << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n\
    \  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number\
    \ % 5 / 1)\n  roman_numeral\nend", "  roman_numerals = {\n    1000 => 'm',\n \
    \   900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 =>\
    \ 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n   \
    \ 5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    result << value * (number / key)\n    number = number %\
    \ key\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900\
    \ => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('') do |(arabic,\
    \ roman), result|\n    while number >= arabic\n      result << roman\n      number\
    \ -= arabic\n    end\n  end\nend", "  # Your code here\nend", "  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      roman_numeral << value\n      number -= key\n\
    \    end\n  end\n  roman_numeral\nend", "  # TODO: implement this method\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    while number >=\
    \ key\n      result += value\n      number -= key\n    end\n  end\n  result\n\
    end", "  # Your code here\nend", "  # TODO: Implement this method\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend", "  # Your code here\nend", "  #\
    \ TODO: implement this method\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend", "  # TODO: implement me\nend",
  "  # TODO: implement the method\nend", "  roman_numerals = {\n    'M' => 1000,\n\
    \    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC'\
    \ => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n  \
    \  'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  }\n  roman_numerals.each do |key,\
    \ value|\n    if number >= value\n      return key + int_to_mini_roman(number\
    \ - value)\n    end\n  end\n  ''\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # TODO: implement this method\nend",
  "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n   \
    \ 400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  }\n  result = ''\n  roman_numerals.each do |key, value|\n    result << value\
    \ * (number / key)\n    number = number % key\n  end\n  result\nend", "  # your\
    \ code here\nend", "  # TODO: Implement this method\nend", "  roman_numerals =\
    \ {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n \
    \   100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    result << value * (number / key)\n\
    \    number = number % key\n  end\n  result\nend", "  # Your code here\nend",
  "  # TODO: implement me\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
