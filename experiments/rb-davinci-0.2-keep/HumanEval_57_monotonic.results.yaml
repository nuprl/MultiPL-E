name: HumanEval_57_monotonic
language: ruby
results:
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptksk6tha\nStarted\n.\nFinished in 0.001394859 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    716.92 tests/s, 5735.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn88vrloq\nStarted\n.\nFinished in 0.000940344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.44 tests/s, 8507.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ <= 1\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv08zqhj1\nStarted\n.\nFinished in 0.000596608 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1676.14 tests/s, 13409.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr2bnlcil\nStarted\n.\nFinished in 0.000881267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.73 tests/s, 9077.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8zuhe6jw\nStarted\n.\nFinished in 0.000796066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1256.18 tests/s, 10049.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp060lk_rq\nStarted\n.\nFinished in 0.000665415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1502.82 tests/s, 12022.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm8rld44t\nStarted\n.\nFinished in 0.000684066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1461.85 tests/s, 11694.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i]\
    \ > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return false if\
    \ l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu9s80jaj\nStarted\n.\nFinished in 0.001044855 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    957.07 tests/s, 7656.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1_xpwn0v\nStarted\n.\nFinished in 0.000840939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.15 tests/s, 9513.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    for i in 1..l.length-1\n      return false if l[i]\
    \ < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n      return false if\
    \ l[i] > l[i-1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwcrgg52z\nStarted\n.\nFinished in 0.000978627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1021.84 tests/s, 8174.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxp9kezfr\nStarted\n.\nFinished in 0.000754518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1325.35 tests/s, 10602.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptmvtvl0q\nStarted\n.\nFinished in 0.000933752 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1070.95 tests/s, 8567.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphsq3dukq\nStarted\n.\nFinished in 0.001021255 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    979.19 tests/s, 7833.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7u7z7van\nStarted\n.\nFinished in 0.000708322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1411.79 tests/s, 11294.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkoi_kvk2\nStarted\n.\nFinished in 0.001072802 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.14 tests/s, 7457.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzcbdltkc\nStarted\n.\nFinished in 0.001299086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    769.77 tests/s, 6158.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfsgmt9qw\nStarted\n.\nFinished in 0.00090829 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.97 tests/s, 8807.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18ctkygy\nStarted\n.\nFinished in 0.001055926 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    947.04 tests/s, 7576.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphrwkprbd\nStarted\n.\nFinished in 0.000820966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1218.08 tests/s, 9744.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6czwki74\nStarted\n.\nFinished in 0.001266573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    789.53 tests/s, 6316.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_with_index\
    \ do |e, i|\n    if i != 0\n      if l[i-1] > e\n        return false\n      end\n\
    \    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20,\
    \ 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnk_m0srx\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpnk_m0srx.rb:25:in `test_monotonic'\n\
    \     22:     assert_equal(true, candidate.call([1, 2, 4, 10]))\n     23:    \
    \ assert_equal(true, candidate.call([1, 2, 4, 20]))\n     24:     assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n  => 25:     assert_equal(true, candidate.call([4,\
    \ 1, 0, -10]))\n     26:     assert_equal(true, candidate.call([4, 1, 1, 0]))\n\
    \     27:     assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n     28:\
    \     assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.012086558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.74 tests/s, 330.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbrrt_rdi\nStarted\n.\nFinished in 0.000668434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1496.03 tests/s, 11968.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgiz2pzub\nStarted\n.\nFinished in 0.000574937 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1739.32 tests/s, 13914.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  # TODO: implement\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpygn4rncz\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpygn4rncz.rb:15:in `test_monotonic'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_monotonic\n\
    \     14:     candidate = method(:monotonic)\n  => 15:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     16:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n     17:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     18:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011430852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.48 tests/s, 87.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiubviqfs\nStarted\n.\nFinished in 0.001003326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    996.69 tests/s, 7973.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2xlflqp9\nStarted\n.\nFinished in 0.000630727 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1585.47 tests/s, 12683.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_vhnca2\nStarted\n.\nFinished in 0.001024248 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    976.33 tests/s, 7810.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20,\
    \ 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp936d8um\nStarted\n.\nFinished in 0.000564732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1770.75 tests/s, 14166.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_z2o872r\nStarted\n.\nFinished in 0.00088449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1130.60 tests/s, 9044.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp4x3d1340\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp4x3d1340.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008169708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.40 tests/s, 367.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi3lb5fbz\nStarted\n.\nFinished in 0.000900574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.40 tests/s, 8883.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_rr1elkb\nStarted\n.\nFinished in 0.001290584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    774.84 tests/s, 6198.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i > 0 && num < l[i-1]\n    end\n  else\n    l.each_with_index do |num, i|\n\
    \      return false if i > 0 && num > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvgmwmu1t\nStarted\n.\nFinished in 0.00083867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1192.36 tests/s, 9538.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp859u799i\nStarted\n.\nFinished in 0.001303691 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    767.05 tests/s, 6136.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |num, i|\n      return false if i != l.length - 1 && num < l[i + 1]\n   \
    \ end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzxhh377f\nStarted\n.\nFinished in 0.000769023 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1300.35 tests/s, 10402.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjin00iw4\nStarted\n.\nFinished in 0.001364159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    733.05 tests/s, 5864.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjezvl8cc\nStarted\n.\nFinished in 0.000782867 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1277.36 tests/s, 10218.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpguk4zfth\nStarted\n.\nFinished in 0.001177488 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    849.27 tests/s, 6794.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  # TODO: implement\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpbftmwa54\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpbftmwa54.rb:15:in `test_monotonic'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_monotonic\n\
    \     14:     candidate = method(:monotonic)\n  => 15:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     16:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n     17:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     18:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014260033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.13 tests/s, 70.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ <= 1\n  return true if l.length == 2\n  if l[0] < l[1]\n    for i in 1..l.length-1\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n\
    \      return false if l[i] > l[i-1]\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6jj4ukfh\nStarted\n.\nFinished in 0.001483451 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    674.10 tests/s, 5392.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return true if l.length\
    \ == 2 && l[0] < l[1]\n  return true if l.length == 2 && l[0] > l[1]\n  return\
    \ true if l.length == 3 && l[0] < l[1] && l[1] < l[2]\n  return true if l.length\
    \ == 3 && l[0] > l[1] && l[1] > l[2]\n  return false if l.length == 3 && l[0]\
    \ < l[1] && l[1] > l[2]\n  return false if l.length == 3 && l[0] > l[1] && l[1]\
    \ < l[2]\n  return false if l.length == 3 && l[0] == l[1] && l[1] == l[2]\n  return\
    \ false if l.length == 3 && l[0] == l[1] && l[1] != l[2]\n  return false if l.length\
    \ == 3 && l[0] != l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] < l[2]\n  return false if l.length == 3 && l[0] == l[1] && l[1] > l[2]\n\
    \  return false if l.length == 3 && l[0] < l[1] && l[1] == l[2]\n  return false\
    \ if l.length == 3 && l[0] > l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] < l[1] && l[1] < l[2]\n  return false if l.length == 3 && l[0]\
    \ > l[1] && l[1] > l[2]\n  return false if l.length == 3 && l[0] > l[1] && l\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "/tmp/tmpjgut2vpy.rb:29: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjgut2vpy.rb:41: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz5tjwk1h\nStarted\n.\nFinished in 0.00057213 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1747.85 tests/s, 13982.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    return true if l.each_cons(2).all? { |a, b| a <=\
    \ b }\n  elsif l[0] > l[1]\n    return true if l.each_cons(2).all? { |a, b| a\
    \ >= b }\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv3ew1fz1\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpv3ew1fz1.rb:28:in `test_monotonic'\n\
    \     25:     assert_equal(true, candidate.call([4, 1, 1, 0]))\n     26:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n     27:     assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n  => 28:     assert_equal(true, candidate.call([9, 9, 9,\
    \ 9]))\n     29:   end\n     30: end\n<true> expected but was\n<false>\n\ndiff:\n\
    ? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.011796209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.77 tests/s, 678.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa6drb98r\nStarted\n.\nFinished in 0.000846071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1181.93 tests/s, 9455.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ == 1\n  return true if l.size == 2 && l[0] == l[1]\n  return false if l.size\
    \ == 2 && l[0] != l[1]\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n     \
    \ return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n\
    \      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2gzyeh0e\nStarted\n.\nFinished in 0.001642418 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    608.86 tests/s, 4870.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuqf_03yd\nStarted\n.\nFinished in 0.001283319 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    779.23 tests/s, 6233.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsyeludau\nStarted\n.\nFinished in 0.000957765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1044.10 tests/s, 8352.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnid5najo\nStarted\n.\nFinished in 0.001347754 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    741.98 tests/s, 5935.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplz8waktg\nStarted\n.\nFinished in 0.000573307 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1744.27 tests/s, 13954.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpds78se7o\nStarted\n.\nFinished in 0.000832421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1201.32 tests/s, 9610.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5bazwni7\nStarted\n.\nFinished in 0.001168766 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    855.60 tests/s, 6844.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ltf7rzu\nStarted\n.\nFinished in 0.001747256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    572.33 tests/s, 4578.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return false if l[0] == l[1]\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp6xw1qise\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp6xw1qise.rb:33:in `test_monotonic'\n\
    \     30:     assert_equal(true, candidate.call([4, 1, 1, 0]))\n     31:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n     32:     assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n  => 33:     assert_equal(true, candidate.call([9, 9, 9,\
    \ 9]))\n     34:   end\n     35: end\n<true> expected but was\n<false>\n\ndiff:\n\
    ? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.007438402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.44 tests/s, 1075.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwd87y_9p\nStarted\n.\nFinished in 0.001141805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    875.81 tests/s, 7006.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |num, i|\n      return false if i != l.length - 1 && num < l[i + 1]\n   \
    \ end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptyl7s6ud\nStarted\n.\nFinished in 0.00107863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    927.10 tests/s, 7416.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugi7h6n0\nStarted\n.\nFinished in 0.000570126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1754.00 tests/s, 14031.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n\
    \  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpmnkov1a5\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpmnkov1a5.rb:19:in `test_monotonic'\n\
    \     16:     candidate = method(:monotonic)\n     17:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     18:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 19:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     20:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     21:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     22:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010265068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.42 tests/s, 292.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplxwzvdho\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmplxwzvdho.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011828515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.54 tests/s, 253.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return false if l[0] == l[1]\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp9bpt4s16\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp9bpt4s16.rb:33:in `test_monotonic'\n\
    \     30:     assert_equal(true, candidate.call([4, 1, 1, 0]))\n     31:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n     32:     assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n  => 33:     assert_equal(true, candidate.call([9, 9, 9,\
    \ 9]))\n     34:   end\n     35: end\n<true> expected but was\n<false>\n\ndiff:\n\
    ? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.011213784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.18 tests/s, 713.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpicpevgal\nStarted\n.\nFinished in 0.00129098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    774.61 tests/s, 6196.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiuamgkut\nStarted\n.\nFinished in 0.001100178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    908.94 tests/s, 7271.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |num, i|\n      return false if i != l.length - 1 && num < l[i + 1]\n   \
    \ end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpluzg1_3w\nStarted\n.\nFinished in 0.000570538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1752.73 tests/s, 14021.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0lv_kfvy\nStarted\n.\nFinished in 0.000948262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1054.56 tests/s, 8436.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20,\
    \ 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp84bhicpf\nStarted\n.\nFinished in 0.001337822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    747.48 tests/s, 5979.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkg2nz9uk\nStarted\n.\nFinished in 0.00100626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    993.78 tests/s, 7950.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |x, y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgywlg7bk\nStarted\n.\nFinished in 0.000978292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1022.19 tests/s, 8177.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpowpqxgo3\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpowpqxgo3.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007797484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.25 tests/s, 384.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp36_22_8t\nStarted\n.\nFinished in 0.000663578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1506.98 tests/s, 12055.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeuxeul5e\nStarted\n.\nFinished in 0.000682411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1465.39 tests/s, 11723.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return true if l.length\
    \ == 2 && l[0] != l[1]\n  return false if l.length == 2 && l[0] > l[1]\n  return\
    \ false if l.length == 2 && l[0] < l[1]\n  return false if l.length == 3 && l[0]\
    \ == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 3 && l[0] > l[1] && l[1] > l[2]\n  return false if l.length ==\
    \ 3 && l[0] < l[1] && l[1] < l[2]\n  return false if l.length == 3 && l[0] > l[1]\
    \ && l[1] < l[2]\n  return false if l.length == 3 && l[0] < l[1] && l[1] > l[2]\n\
    \  return true if l.length == 3 && l[0] > l[1] && l[1] == l[2]\n  return true\
    \ if l.length == 3 && l[0] < l[1] && l[1] == l[2]\n  return true if l.length ==\
    \ 3 && l[0] == l[1] && l[1] > l[2]\n  return true if l.length == 3 && l[0] ==\
    \ l[1] && l[1] < l[2]\n  return false if l.length == 4 && l[0] == l[1] && l[1]\
    \ == l[2] && l[2] == l[3]\n  return false if l.length == 4 && l[0] == l[1] &&\
    \ l\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "/tmp/tmpm7aspo6i.rb:29: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm7aspo6i.rb:41: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7v9owzn6\nStarted\n.\nFinished in 0.001666198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    600.17 tests/s, 4801.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbwep_4dt\nStarted\n.\nFinished in 0.00094561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1057.52 tests/s, 8460.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpq6_f0sxm\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpq6_f0sxm.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.020844978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.97 tests/s, 143.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppu6z2val\nStarted\n.\nFinished in 0.000885921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1128.77 tests/s, 9030.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoylegq0b\nStarted\n.\nFinished in 0.000575408 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1737.90 tests/s, 13903.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzzilvrme\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpzzilvrme.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011414472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.61 tests/s, 262.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |x, y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmr9e22pb\nStarted\n.\nFinished in 0.000719227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1390.38 tests/s, 11123.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp4t4v4ue3\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp4t4v4ue3.rb:15:in `test_monotonic'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_monotonic\n\
    \     14:     candidate = method(:monotonic)\n  => 15:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     16:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n     17:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     18:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012866366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.72 tests/s, 77.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjf0d4_u3\nStarted\n.\nFinished in 0.000759323 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1316.96 tests/s, 10535.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp98mng3dy\nStarted\n.\nFinished in 0.000982137 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1018.19 tests/s, 8145.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_x627x6b\nStarted\n.\nFinished in 0.000572434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1746.93 tests/s, 13975.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    for i in 0..l.length-2\n\
    \      return false if l[i] > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n\
    \      return false if l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbhph7dni\nStarted\n.\nFinished in 0.000898704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1112.71 tests/s, 8901.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  elsif l[0] > l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl5cvfijl\nStarted\n.\nFinished in 0.000743721 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1344.59 tests/s, 10756.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i]\
    \ > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return false if\
    \ l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6t3740cp\nStarted\n.\nFinished in 0.00076063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1314.70 tests/s, 10517.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp88mtkeie\nStarted\n.\nFinished in 0.001115188 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    896.71 tests/s, 7173.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptloqrl2m\nStarted\n.\nFinished in 0.000582505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1716.72 tests/s, 13733.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_with_index do |e, i|\n      return false\
    \ if i < l.length - 1 && e > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |e, i|\n      return false if i < l.length - 1 && e < l[i + 1]\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz1ukmalx\nStarted\n.\nFinished in 0.000663646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1506.83 tests/s, 12054.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjf8rb9y8\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpjf8rb9y8.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010301711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.07 tests/s, 291.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcqn03319\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpcqn03319.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008918816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.12 tests/s, 336.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_with_index do |e, i|\n      return false\
    \ if i > 0 && e < l[i-1]\n    end\n  else\n    l.each_with_index do |e, i|\n \
    \     return false if i > 0 && e > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp553n96z2\nStarted\n.\nFinished in 0.000575113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1738.79 tests/s, 13910.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv3wr8gf0\nStarted\n.\nFinished in 0.000564064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1772.85 tests/s, 14182.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbwx8ek4n\nStarted\n.\nFinished in 0.000588281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1699.87 tests/s, 13598.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp45tubepy\nStarted\n.\nFinished in 0.001201999 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    831.95 tests/s, 6655.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsjhfqdu0\nStarted\n.\nFinished in 0.000658742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1518.05 tests/s, 12144.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpegrj3_n3\nStarted\n.\nFinished in 0.000930818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1074.32 tests/s, 8594.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    l.each_with_index do |e, i|\n      return false\
    \ if i > 0 && e < l[i-1]\n    end\n  else\n    l.each_with_index do |e, i|\n \
    \     return false if i > 0 && e > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl419obxe\nStarted\n.\nFinished in 0.001235816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    809.18 tests/s, 6473.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpib13e6j3\nStarted\n.\nFinished in 0.001243741 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    804.03 tests/s, 6432.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i < l.length - 1 && num > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |num, i|\n      return false if i < l.length - 1 && num < l[i + 1]\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpds453oi5\nStarted\n.\nFinished in 0.001067217 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    937.02 tests/s, 7496.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoch5ozys\nStarted\n.\nFinished in 0.001072341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.54 tests/s, 7460.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_hfchuyj\nStarted\n.\nFinished in 0.001108122 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.43 tests/s, 7219.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppz9c3u6s\nStarted\n.\nFinished in 0.000665946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1501.62 tests/s, 12012.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw5aoa4d2\nStarted\n.\nFinished in 0.000723933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1381.34 tests/s, 11050.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return false if l.length\
    \ == 2 && l[0] != l[1]\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n   \
    \   return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do\
    \ |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmarhlmpb\nStarted\n.\nFinished in 0.001924067 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    519.73 tests/s, 4157.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj9p8u70v\nStarted\n.\nFinished in 0.0008748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1143.12 tests/s, 9144.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3j4w3uu9\nStarted\n.\nFinished in 0.000609386 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1641.00 tests/s, 13127.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnwo0koii\nStarted\n.\nFinished in 0.000924912 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1081.18 tests/s, 8649.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_u1h8uvf\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp_u1h8uvf.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006896268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.01 tests/s, 435.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt8m0_4jv\nStarted\n.\nFinished in 0.001320987 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    757.01 tests/s, 6056.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n\
    \  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplhy9xp6u\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmplhy9xp6u.rb:19:in `test_monotonic'\n\
    \     16:     candidate = method(:monotonic)\n     17:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     18:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 19:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     20:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     21:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     22:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007363858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.80 tests/s, 407.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_o8m6jp7\nStarted\n.\nFinished in 0.000801432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.77 tests/s, 9982.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3x_46vd8\nStarted\n.\nFinished in 0.001068356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    936.02 tests/s, 7488.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8zezfk9f\nStarted\n.\nFinished in 0.001118889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    893.74 tests/s, 7149.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_7rh36d0\nStarted\n.\nFinished in 0.001020644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    979.77 tests/s, 7838.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfin09tmx\nStarted\n.\nFinished in 0.001095751 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    912.62 tests/s, 7300.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return true if l.sort == l\n  return true if l.sort.reverse == l\n \
    \ false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa74czwzj\nStarted\n.\nFinished in 0.001907501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    524.25 tests/s, 4193.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj6yv3w5j\nStarted\n.\nFinished in 0.001465553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    682.34 tests/s, 5458.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_3lzsmvs\nStarted\n.\nFinished in 0.001085132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    921.55 tests/s, 7372.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp953rmqye\nStarted\n.\nFinished in 0.001444524 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    692.27 tests/s, 5538.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz3w6e2f3\nStarted\n.\nFinished in 0.000811624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1232.10 tests/s, 9856.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ == 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpom5asyor\nStarted\n.\nFinished in 0.00128073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    780.80 tests/s, 6246.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmphgss_f86\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmphgss_f86.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007511945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.12 tests/s, 399.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6rcgavl5\nStarted\n.\nFinished in 0.001649538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    606.23 tests/s, 4849.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu9m77o6v\nStarted\n.\nFinished in 0.000618577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1616.61 tests/s, 12932.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp94cejd96\nStarted\n.\nFinished in 0.000641989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1557.66 tests/s, 12461.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnw9te4ka\nStarted\n.\nFinished in 0.000591826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1689.69 tests/s, 13517.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgvikwf5j\nStarted\n.\nFinished in 0.000592305 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1688.32 tests/s, 13506.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return true if l.length\
    \ == 2 && l[0] < l[1]\n  return true if l.length == 2 && l[0] > l[1]\n  return\
    \ false if l.length == 2 && l[0] != l[1]\n  if l[0] < l[1]\n    l.each_with_index\
    \ do |num, i|\n      return false if i != l.length - 1 && num > l[i + 1]\n   \
    \ end\n  elsif l[0] > l[1]\n    l.each_with_index do |num, i|\n      return false\
    \ if i != l.length - 1 && num < l[i + 1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5se4dbyo\nStarted\n.\nFinished in 0.000723568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1382.04 tests/s, 11056.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn50rnpat\nStarted\n.\nFinished in 0.000839587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1191.06 tests/s, 9528.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.sort == l\n  return true if l.sort.reverse == l\n \
    \ false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuzac_2s5\nStarted\n.\nFinished in 0.000558656 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1790.01 tests/s, 14320.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfwgig9ay\nStarted\n.\nFinished in 0.000809224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1235.75 tests/s, 9886.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprkxzc7_t\nStarted\n.\nFinished in 0.001053333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    949.37 tests/s, 7594.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphxjlrg2t\nStarted\n.\nFinished in 0.001141214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    876.26 tests/s, 7010.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvc3v9pjr\nStarted\n.\nFinished in 0.000843496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1185.54 tests/s, 9484.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each { |i| return false if l[i] < l[i-1]\
    \ }\n  else\n    (1...l.size).each { |i| return false if l[i] > l[i-1] }\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdsrvhzyy\nStarted\n.\nFinished in 0.00077388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1292.19 tests/s, 10337.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkkmup4hx\nStarted\n.\nFinished in 0.000989995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1010.11 tests/s, 8080.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph7yq8bdw\nStarted\n.\nFinished in 0.001172027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    853.22 tests/s, 6825.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpfjlfqyxm\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpfjlfqyxm.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015466317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.66 tests/s, 193.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20,\
    \ 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbnzf0fg0\nStarted\n.\nFinished in 0.001450441 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    689.45 tests/s, 5515.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnyywi9na\nStarted\n.\nFinished in 0.000602959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1658.49 tests/s, 13267.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptoavbj5m\nStarted\n.\nFinished in 0.000814194 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.21 tests/s, 9825.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphws2xwi_\nStarted\n.\nFinished in 0.000838042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1193.26 tests/s, 9546.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1m4_qw58\nStarted\n.\nFinished in 0.00072367 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1381.85 tests/s, 11054.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0ke6dx1y\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp0ke6dx1y.rb:15:in `test_monotonic'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_monotonic\n\
    \     14:     candidate = method(:monotonic)\n  => 15:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     16:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n     17:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     18:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012456773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.28 tests/s, 80.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] <= l[1]\n    (1...l.length).each do |i|\n      return false\
    \ if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7f6b_0h\nStarted\n.\nFinished in 0.001050227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    952.18 tests/s, 7617.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp818d187o\nStarted\n.\nFinished in 0.001129901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    885.03 tests/s, 7080.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm3shll1j\nStarted\n.\nFinished in 0.000862383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1159.58 tests/s, 9276.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjenb2_f\nStarted\n.\nFinished in 0.00058424 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1711.63 tests/s, 13693.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz5pb6742\nStarted\n.\nFinished in 0.001576753 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    634.21 tests/s, 5073.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp85e_2ab7\nStarted\n.\nFinished in 0.000621634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1608.66 tests/s, 12869.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i]\
    \ > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return false if\
    \ l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqqj58jmb\nStarted\n.\nFinished in 0.000780675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1280.94 tests/s, 10247.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpgvgrh_qa\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpgvgrh_qa.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011464809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.22 tests/s, 261.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9z30v01b\nStarted\n.\nFinished in 0.000990904 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1009.18 tests/s, 8073.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1zp5b2yn\nStarted\n.\nFinished in 0.000674694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1482.15 tests/s, 11857.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0je31ke\nStarted\n.\nFinished in 0.001115232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    896.67 tests/s, 7173.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    for i in 0..l.length-2\n\
    \      return false if l[i] > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n\
    \      return false if l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ni_9k6i\nStarted\n.\nFinished in 0.000964917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1036.36 tests/s, 8290.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp4paufsbn\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp4paufsbn.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008006378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.90 tests/s, 374.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l == l.sort\n\
    \    return true\n  elsif l == l.sort.reverse\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd7c9bl6l\nStarted\n.\nFinished in 0.001475508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    677.73 tests/s, 5421.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i]\
    \ > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return false if\
    \ l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb5fzehug\nStarted\n.\nFinished in 0.000657414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1521.11 tests/s, 12168.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_with_index\
    \ do |e, i|\n    next if i == 0\n    if l[i] > l[i-1]\n      return false if l[i]\
    \ < l[i-1]\n    elsif l[i] < l[i-1]\n      return false if l[i] > l[i-1]\n   \
    \ end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf482uj7j\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpf482uj7j.rb:25:in `test_monotonic'\n\
    \     22:     candidate = method(:monotonic)\n     23:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     24:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 25:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     26:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     27:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     28:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014498781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.97 tests/s, 206.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    for i in 1..l.length-1\n      return false if l[i]\
    \ < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n      return false if\
    \ l[i] > l[i-1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu0ookset\nStarted\n.\nFinished in 0.000891064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1122.25 tests/s, 8978.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    for i in 0..l.length-2\n\
    \      return false if l[i] > l[i+1]\n    end\n  elsif l[0] > l[1]\n    for i\
    \ in 0..l.length-2\n      return false if l[i] < l[i+1]\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5q1nrfl5\nStarted\n.\nFinished in 0.001278581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    782.12 tests/s, 6256.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgfw6dnw6\nStarted\n.\nFinished in 0.001800573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    555.38 tests/s, 4443.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    for i in 1..l.length-2\n\
    \      return false if l[i] > l[i+1]\n    end\n  else\n    for i in 1..l.length-2\n\
    \      return false if l[i] < l[i+1]\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzeiqximi\nStarted\n.\nFinished in 0.001115432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    896.51 tests/s, 7172.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  return l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpib3eiwm_\nStarted\n.\nFinished in 0.001222112 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    818.26 tests/s, 6546.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzjja0rlj\nStarted\n.\nFinished in 0.000718795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1391.22 tests/s, 11129.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  elsif l[0] > l[1]\n\
    \    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_jd4eb9\nStarted\n.\nFinished in 0.001761921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    567.56 tests/s, 4540.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg2qguwps\nStarted\n.\nFinished in 0.000611225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.06 tests/s, 13088.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbr1_ek2f\nStarted\n.\nFinished in 0.000581276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1720.35 tests/s, 13762.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn_rtww3z\nStarted\n.\nFinished in 0.000716876 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1394.94 tests/s, 11159.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_f25osod\nStarted\n.\nFinished in 0.000672429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1487.15 tests/s, 11897.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  if l[0] < l[1]\n   \
    \ (0..l.length-2).each do |i|\n      return false if l[i] > l[i+1]\n    end\n\
    \  else\n    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqxcntlva\nStarted\n.\nFinished in 0.00070814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1412.15 tests/s, 11297.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmup2lo2c\nStarted\n.\nFinished in 0.000945713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1057.40 tests/s, 8459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (0..l.size-2).each do |i|\n      return false if\
    \ l[i] > l[i+1]\n    end\n  else\n    (0..l.size-2).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj3ii6de6\nStarted\n.\nFinished in 0.000791643 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1263.20 tests/s, 10105.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp42ni9aur\nStarted\n.\nFinished in 0.000621383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1609.31 tests/s, 12874.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    l.each_with_index do |e, i|\n      return false\
    \ if i > 0 && e < l[i-1]\n    end\n  else\n    l.each_with_index do |e, i|\n \
    \     return false if i > 0 && e > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7vp2vfni\nStarted\n.\nFinished in 0.000621154 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1609.91 tests/s, 12879.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9wdeidhy\nStarted\n.\nFinished in 0.000991862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1008.20 tests/s, 8065.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpxk2wv351\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpxk2wv351.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009864181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.38 tests/s, 304.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnpmww1u4\nStarted\n.\nFinished in 0.00080145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.74 tests/s, 9981.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_monotonic\n    candidate = method(:monotonic)\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 20]))\n    assert_equal(false, candidate.call([1, 20,\
    \ 4, 10]))\n    assert_equal(true, candidate.call([4, 1, 0, -10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 1, 0]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadeahzml\nStarted\n.\nFinished in 0.000784135 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1275.29 tests/s, 10202.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj19dqbxe\nStarted\n.\nFinished in 0.001234494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    810.05 tests/s, 6480.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqr7ns9__\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpqr7ns9__.rb:15:in `test_monotonic'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_monotonic\n\
    \     14:     candidate = method(:monotonic)\n  => 15:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     16:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n     17:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     18:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n<true> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011320573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.33 tests/s, 88.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfv1dhi95\nStarted\n.\nFinished in 0.000937087 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1067.14 tests/s, 8537.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplifhntvf\nStarted\n.\nFinished in 0.000892495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.45 tests/s, 8963.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.size\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[0..-2])\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp3hwdw2ca\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmp3hwdw2ca.rb:18:in `test_monotonic'\n\
    \     15:     candidate = method(:monotonic)\n     16:     assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n     17:     assert_equal(true, candidate.call([1,\
    \ 2, 4, 20]))\n  => 18:     assert_equal(false, candidate.call([1, 20, 4, 10]))\n\
    \     19:     assert_equal(true, candidate.call([4, 1, 0, -10]))\n     20:   \
    \  assert_equal(true, candidate.call([4, 1, 1, 0]))\n     21:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013597696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.54 tests/s, 220.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a < b } || l.each_cons(2).all? { |a, b| a > b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpje93p2dv\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpje93p2dv.rb:19:in `test_monotonic'\n\
    \     16:     assert_equal(true, candidate.call([1, 2, 4, 20]))\n     17:    \
    \ assert_equal(false, candidate.call([1, 20, 4, 10]))\n     18:     assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n  => 19:     assert_equal(true, candidate.call([4,\
    \ 1, 1, 0]))\n     20:     assert_equal(false, candidate.call([1, 2, 3, 2, 5,\
    \ 60]))\n     21:     assert_equal(true, candidate.call([1, 2, 3, 4, 5, 60]))\n\
    \     22:     assert_equal(true, candidate.call([9, 9, 9, 9]))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.013033017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.73 tests/s, 383.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphfg7smh5\nStarted\n.\nFinished in 0.000573518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1743.62 tests/s, 13949.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6e7b4xfl\nStarted\n.\nFinished in 0.000893583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1119.09 tests/s, 8952.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
    \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1,\
    \ 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcc1lw9ju\nStarted\n.\nFinished in 0.000551439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.44 tests/s, 14507.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprt8g3g0h\nStarted\n.\nFinished in 0.000562348 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1778.26 tests/s, 14226.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk3geg9kq\nStarted\n.\nFinished in 0.000537913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1859.04 tests/s, 14872.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4zgu971b\nStarted\n.\nFinished in 0.001293401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    773.16 tests/s, 6185.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmtdfscxy\nStarted\n.\nFinished in 0.000850789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1175.38 tests/s, 9403.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp219u1zsc\nStarted\n.\nFinished in 0.000532367 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1878.40 tests/s, 15027.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqklvc4bd\nStarted\n.\nFinished in 0.00057365 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1743.22 tests/s, 13945.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    l.each_with_index\
    \ do |e, i|\n      return false if i < l.length - 1 && e > l[i + 1]\n    end\n\
    \  elsif l[0] > l[1]\n    l.each_with_index do |e, i|\n      return false if i\
    \ < l.length - 1 && e < l[i + 1]\n    end\n  else\n    return false\n  end\n \
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdl88sn9l\nStarted\nF\n===============================================================================\n\
    Failure: test_monotonic(TestHumanEval)\n/tmp/tmpdl88sn9l.rb:35:in `test_monotonic'\n\
    \     32:     assert_equal(true, candidate.call([4, 1, 1, 0]))\n     33:     assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n     34:     assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n  => 35:     assert_equal(true, candidate.call([9, 9, 9,\
    \ 9]))\n     36:   end\n     37: end\n<true> expected but was\n<false>\n\ndiff:\n\
    ? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.006873468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.49 tests/s, 1163.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_monotonic\n    candidate = method(:monotonic)\n    assert_equal(true,\
    \ candidate.call([1, 2, 4, 10]))\n    assert_equal(true, candidate.call([1, 2,\
    \ 4, 20]))\n    assert_equal(false, candidate.call([1, 20, 4, 10]))\n    assert_equal(true,\
    \ candidate.call([4, 1, 0, -10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 1, 0]))\n    assert_equal(false, candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true,\
    \ candidate.call([1, 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9,\
    \ 9, 9, 9]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpha6pzvog\nStarted\n.\nFinished in 0.000499177 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2003.30 tests/s, 16026.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1t0ugwlt\nStarted\n.\nFinished in 0.000510784 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1957.77 tests/s, 15662.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  l.each_cons(2).all?\
    \ { |x, y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplhjk71px\nStarted\n.\nFinished in 0.000892564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1120.37 tests/s, 8962.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate\
    \ = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa0sp68l7\nStarted\n.\nFinished in 0.000572624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1746.35 tests/s, 13970.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    for i in 1..l.length-1\n      return false if l[i]\
    \ < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n      return false if\
    \ l[i] > l[i-1]\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n    candidate =\
    \ method(:monotonic)\n    assert_equal(true, candidate.call([1, 2, 4, 10]))\n\
    \    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
    \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
    \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
    \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8pxp33e0\nStarted\n.\nFinished in 0.00104883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    953.44 tests/s, 7627.55 assertions/s\n"
  exit_code: 0
  status: OK
