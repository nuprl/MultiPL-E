{
  "name": "HumanEval_56_correct_bracketing",
  "language": "ruby",
  "results": [
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqx6i6p96\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqx6i6p96.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006804175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.97 tests/s, 146.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpp0vox4sr\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpp0vox4sr.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007744252 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.13 tests/s, 129.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiitpqwwl\nStarted\n.\nFinished in 0.000759679 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1316.35 tests/s, 15796.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8_yg4h4c\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8_yg4h4c.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007652949 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.67 tests/s, 130.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpo30b6jon\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo30b6jon.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008058567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.09 tests/s, 124.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp55ewzpzs\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp55ewzpzs.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007800869 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.19 tests/s, 128.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n    return False\n  elsif brackets[0] == '>'\n    return False\n  elsif brackets[0] == '<'\n    return correct_bracketing(brackets[1..-1])\n  elsif brackets[-1] == '<'\n    return False\n  elsif brackets[-1] == '>'\n    return correct_bracketing(brackets[0..-2])\n  else\n    return correct_bracketing(brackets[1..-2])\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpe9d71wr7\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmpe9d71wr7.rb:17:in `correct_bracketing'\n/tmp/tmpe9d71wr7.rb:19:in `correct_bracketing'\n/tmp/tmpe9d71wr7.rb:32:in `call'\n/tmp/tmpe9d71wr7.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\nFinished in 0.0063169 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.31 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpj1f_877m\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj1f_877m.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010458736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.61 tests/s, 95.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpslq7_zhe\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpslq7_zhe.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006900994 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.91 tests/s, 144.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpubbiqn79\nStarted\n.\nFinished in 0.001023432 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n977.10 tests/s, 11725.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpchq3hqxp\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpchq3hqxp.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015220486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.70 tests/s, 65.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpr_hp5wwj\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr_hp5wwj.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010302211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.07 tests/s, 97.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp4v6ows3h\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4v6ows3h.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011350032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.11 tests/s, 88.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxlfxyumj\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxlfxyumj.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012657725 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.00 tests/s, 79.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfoqwpuk_\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfoqwpuk_.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013152667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n76.03 tests/s, 76.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjv1pkli3\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjv1pkli3.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01017445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.29 tests/s, 98.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp85nk56_g\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp85nk56_g.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008652417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.57 tests/s, 115.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpd8a7zg7z\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpd8a7zg7z.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010767235 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.87 tests/s, 92.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1hotu9mb\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1hotu9mb.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009046887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.54 tests/s, 110.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpq9ky0xh9\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq9ky0xh9.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008206366 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.86 tests/s, 121.86 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp2og0c3nf\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2og0c3nf.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015826517 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.19 tests/s, 63.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp6kuhsydy\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6kuhsydy.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007212922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.64 tests/s, 138.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length % 2 != 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      stack.pop\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprifx8346\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprifx8346.rb:40:in `test_correct_bracketing'\n     37:     assert_equal(false, candidate.call(\">\"))\n     38:     assert_equal(false, candidate.call(\"<<>\"))\n     39:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n  => 40:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     41:   end\n     42: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.01822875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n54.86 tests/s, 658.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprfckjx6r\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprfckjx6r.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007474235 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.79 tests/s, 133.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets.length == 0\n  #   return true\n  # end\n  #\n  # if brackets[0] == \"<\"\n  #   return correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "/tmp/tmpjpzd7hmn.rb:63: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjpzd7hmn.rb:79: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpb19to4ib\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpb19to4ib.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00944938 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.83 tests/s, 105.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9y3afeq7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9y3afeq7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011062569 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.39 tests/s, 90.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length == 1\n  return true if brackets.length == 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_eo8rq1v\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_eo8rq1v.rb:23:in `test_correct_bracketing'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_correct_bracketing\n     22:     candidate = method(:correct_bracketing)\n  => 23:     assert_equal(true, candidate.call(\"<>\"))\n     24:     assert_equal(true, candidate.call(\"<<><>>\"))\n     25:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     26:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\nFinished in 0.011140312 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n89.76 tests/s, 89.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\n  return false if brackets.length == 1\n  return true if brackets.length == 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpg5yvf_kf\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg5yvf_kf.rb:34:in `test_correct_bracketing'\n     31:     assert_equal(false, candidate.call(\"<<<<\"))\n     32:     assert_equal(false, candidate.call(\">\"))\n     33:     assert_equal(false, candidate.call(\"<<>\"))\n  => 34:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n     35:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     36:   end\n     37: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.021724499 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n46.03 tests/s, 506.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpaxb6y8h6\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpaxb6y8h6.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014029428 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.28 tests/s, 71.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvs2976l2\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvs2976l2.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010409175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.07 tests/s, 96.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpyc891mem\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyc891mem.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.016242031 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n61.57 tests/s, 61.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp560qtki8\nStarted\n.\nFinished in 0.000711123 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1406.23 tests/s, 16874.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpckk6v7dw\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpckk6v7dw.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.022185186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n45.08 tests/s, 45.08 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpmxun878j\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmxun878j.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007474648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.79 tests/s, 133.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkt6u436q\nStarted\n.\nFinished in 0.001088799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n918.44 tests/s, 11021.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdlk0nxwf\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdlk0nxwf.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015876154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n62.99 tests/s, 62.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmphn4buart\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphn4buart.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008565465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.75 tests/s, 116.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpike7b14r\nStarted\n.\nFinished in 0.001046975 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n955.13 tests/s, 11461.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpiozubdui\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpiozubdui.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007381745 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.47 tests/s, 135.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # if brackets.length % 2 == 1\n  #   return false\n  # end\n  #\n  # if brackets[0] == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n  #   return false\n  # end\n  #\n  # if brackets.count(\"<\") != brackets.count(\">\")\n  #   return false\n  # end\n  #\n  # return true\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "/tmp/tmpz4j6nxf5.rb:30: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz4j6nxf5.rb:46: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf4zukwq9\nStarted\n.\nFinished in 0.001628467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n614.07 tests/s, 7368.89 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5mpbjyj7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5mpbjyj7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014078658 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.03 tests/s, 71.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpakh_o9hq\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpakh_o9hq.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009201816 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.67 tests/s, 108.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpc3pv_x1t\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpc3pv_x1t.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00785433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.32 tests/s, 127.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqrnqrfnz\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqrnqrfnz.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007976005 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.38 tests/s, 125.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length % 2 != 0\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppkjtsr7q\nStarted\n.\nFinished in 0.001014246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n985.95 tests/s, 11831.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8y8r2u2g\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8y8r2u2g.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012671307 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.92 tests/s, 78.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmps3tqpz0g\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmps3tqpz0g.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010499939 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.24 tests/s, 95.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw8huf2g3\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw8huf2g3.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011450723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.33 tests/s, 87.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpan22alm1\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpan22alm1.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00858461 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.49 tests/s, 116.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmphbej0ox3\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphbej0ox3.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.62 tests/s, 125.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpox9lyiqa\nStarted\n.\nFinished in 0.001159759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n862.25 tests/s, 10346.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdmeezg1_\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdmeezg1_.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013436495 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.42 tests/s, 74.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n    return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] == \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n        return False\n      end\n    else\n      return False\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpealuqrda\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant True\n/tmp/tmpealuqrda.rb:13:in `correct_bracketing'\n/tmp/tmpealuqrda.rb:19:in `correct_bracketing'\n/tmp/tmpealuqrda.rb:32:in `call'\n/tmp/tmpealuqrda.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\nFinished in 0.006214539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.91 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpv5p3gyiw\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv5p3gyiw.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009122727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.62 tests/s, 109.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8_f96lu7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8_f96lu7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012372151 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.83 tests/s, 80.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprhpmwm_w\nStarted\n.\nFinished in 0.001358855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n735.91 tests/s, 8830.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpf0401llz\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf0401llz.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011333383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.23 tests/s, 88.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppsasfapc\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppsasfapc.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01215465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.27 tests/s, 82.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqqvl4xxt\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqqvl4xxt.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00774492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.12 tests/s, 129.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdm86xqq1\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdm86xqq1.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012871181 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.69 tests/s, 77.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpkpe_i0g7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkpe_i0g7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010483383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.39 tests/s, 95.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpufy96u5g\nStarted\n.\nFinished in 0.00099858 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1001.42 tests/s, 12017.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp75jznt6k\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp75jznt6k.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007476987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.74 tests/s, 133.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpl8tvd2ra\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl8tvd2ra.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00973339 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.74 tests/s, 102.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_xu1tof\nStarted\n.\nFinished in 0.001093953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n914.12 tests/s, 10969.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpbs8ptj4o\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbs8ptj4o.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007796783 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.26 tests/s, 128.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw0agj6yy\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw0agj6yy.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010169277 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.34 tests/s, 98.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfo_2a_n2\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfo_2a_n2.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014635154 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n68.33 tests/s, 68.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppd27_ad2\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppd27_ad2.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012311295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.23 tests/s, 81.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpfr_02f29\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfr_02f29.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009529733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.93 tests/s, 104.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpy62f2fyy\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpy62f2fyy.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007204158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.81 tests/s, 138.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxbv021kd\nStarted\n.\nFinished in 0.0009215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.19 tests/s, 13022.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpljdj9clk\nStarted\n.\nFinished in 0.001417799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n705.32 tests/s, 8463.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjogj_l7p\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjogj_l7p.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008319797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.20 tests/s, 120.20 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length % 2 != 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp6z3ghnlj\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6z3ghnlj.rb:32:in `test_correct_bracketing'\n     29:     assert_equal(false, candidate.call(\"<<<<\"))\n     30:     assert_equal(false, candidate.call(\">\"))\n     31:     assert_equal(false, candidate.call(\"<<>\"))\n  => 32:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n     33:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     34:   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.011153357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n89.66 tests/s, 986.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpt9roeiaf\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpt9roeiaf.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012425677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.48 tests/s, 80.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpv5pmdgie\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv5pmdgie.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014052607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.16 tests/s, 71.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp02_un8cc\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp02_un8cc.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.02024866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n49.39 tests/s, 49.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmprfsueabq\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprfsueabq.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011127299 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n89.87 tests/s, 89.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpczdgg5u7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpczdgg5u7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.017022332 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n58.75 tests/s, 58.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9c6k1ywa\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmp9c6k1ywa.rb:20:in `block in correct_bracketing'\n/tmp/tmp9c6k1ywa.rb:13:in `each_char'\n/tmp/tmp9c6k1ywa.rb:13:in `correct_bracketing'\n/tmp/tmp9c6k1ywa.rb:33:in `call'\n/tmp/tmp9c6k1ywa.rb:33:in `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"))\n===============================================================================\n\nFinished in 0.008484111 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.87 tests/s, 471.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx0k9fne6\nStarted\n.\nFinished in 0.000826227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1210.32 tests/s, 14523.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbrrhhcp1\nStarted\n.\nFinished in 0.000596352 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.86 tests/s, 20122.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpaqlxbjdi\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpaqlxbjdi.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010414047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.02 tests/s, 96.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyj0pc0jp\nStarted\n.\nFinished in 0.000797256 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1254.30 tests/s, 15051.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpawnzvc2g\nStarted\n.\nFinished in 0.000922977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1083.45 tests/s, 13001.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpyjg07r89\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyjg07r89.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012895132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n77.55 tests/s, 77.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  if brackets.length % 2 != 0\n    return false\n  end\n  if brackets.length == 0\n    return true\n  end\n  if brackets[0] == '>'\n    return false\n  end\n  if brackets[0] == '<'\n    return correct_bracketing(brackets[1..-1])\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpicxfhcy2\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpicxfhcy2.rb:29:in `test_correct_bracketing'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_correct_bracketing\n     28:     candidate = method(:correct_bracketing)\n  => 29:     assert_equal(true, candidate.call(\"<>\"))\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\nFinished in 0.009038038 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.64 tests/s, 110.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5p35hmp0\nStarted\n.\nFinished in 0.000705478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1417.48 tests/s, 17009.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpf2t4ky5_\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf2t4ky5_.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007746744 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.09 tests/s, 129.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqasurxv7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqasurxv7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008295008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.55 tests/s, 120.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp7htkfxoq\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7htkfxoq.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010438919 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.80 tests/s, 95.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw7juioo4\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmpw7juioo4.rb:20:in `block in correct_bracketing'\n/tmp/tmpw7juioo4.rb:13:in `each_char'\n/tmp/tmpw7juioo4.rb:13:in `correct_bracketing'\n/tmp/tmpw7juioo4.rb:33:in `call'\n/tmp/tmpw7juioo4.rb:33:in `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"))\n===============================================================================\n\nFinished in 0.005497069 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n181.92 tests/s, 727.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpm4nrttpu\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpm4nrttpu.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008081947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.73 tests/s, 123.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw5d3owwj\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw5d3owwj.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007082475 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.19 tests/s, 141.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdr_q1pny\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdr_q1pny.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008003944 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.94 tests/s, 124.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    stack = []\n    brackets.each_char do |char|\n        if char == \"<\"\n            stack.push(char)\n        elsif char == \">\"\n            if stack.empty?\n                return false\n            else\n                stack.pop\n            end\n        end\n    end\n    return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsbe8qls4\nStarted\n.\nFinished in 0.001607847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n621.95 tests/s, 7463.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: complete this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpf0z60op3\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf0z60op3.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013540312 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n73.85 tests/s, 73.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw3xp1bwr\nStarted\n.\nFinished in 0.001682582 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n594.32 tests/s, 7131.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpy616dz7a\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpy616dz7a.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007983001 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.27 tests/s, 125.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length == 1\n  return true if brackets.length == 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8rw6uwci\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8rw6uwci.rb:23:in `test_correct_bracketing'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_correct_bracketing\n     22:     candidate = method(:correct_bracketing)\n  => 23:     assert_equal(true, candidate.call(\"<>\"))\n     24:     assert_equal(true, candidate.call(\"<<><>>\"))\n     25:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     26:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\nFinished in 0.016970963 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n58.92 tests/s, 58.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpj6freht1\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj6freht1.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015119931 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n66.14 tests/s, 66.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpdnvm8hgg\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdnvm8hgg.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.0092089 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.59 tests/s, 108.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9qysb25n\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9qysb25n.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007188101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.12 tests/s, 139.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp3a_kibgu\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3a_kibgu.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008362689 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.58 tests/s, 119.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5nddrtz8\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5nddrtz8.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008303148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.44 tests/s, 120.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmplxul9u_0\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplxul9u_0.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008524924 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n117.30 tests/s, 117.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjamrrkw_\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjamrrkw_.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007666474 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n130.44 tests/s, 130.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  return false if count != 0\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpowrquzaw\nStarted\n.\nFinished in 0.000870765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1148.42 tests/s, 13780.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpo16f6_y7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo16f6_y7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010892307 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n91.81 tests/s, 91.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpsefna8_0\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsefna8_0.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011559067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.51 tests/s, 86.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4lixcty7\nStarted\n.\nFinished in 0.00186985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n534.80 tests/s, 6417.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfn1j2h5e\nStarted\n.\nFinished in 0.000872186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1146.54 tests/s, 13758.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8gzk84be\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8gzk84be.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008911196 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.22 tests/s, 112.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvm_q114q\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvm_q114q.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010581373 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n94.51 tests/s, 94.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpex1fy4by\nStarted\n.\nFinished in 0.0006759 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1479.51 tests/s, 17754.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppbpft_zl\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppbpft_zl.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007072744 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.39 tests/s, 141.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5gru3yo0\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5gru3yo0.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008411506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.88 tests/s, 118.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp2v2jfxnv\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2v2jfxnv.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011069982 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.33 tests/s, 90.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpj3g481_n\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj3g481_n.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011274566 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.70 tests/s, 88.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpnxnsneg0\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpnxnsneg0.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.019441999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n51.44 tests/s, 51.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpixzvedio\nStarted\n.\nFinished in 0.000703734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1420.99 tests/s, 17051.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpbpsubokd\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbpsubokd.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007839556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.56 tests/s, 127.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpwav5sqey\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwav5sqey.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009590562 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.27 tests/s, 104.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvopen32g\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvopen32g.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009240907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.21 tests/s, 108.21 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    if count < 0\n      return false\n    end\n  end\n  if count == 0\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8uv3q7nz\nStarted\n.\nFinished in 0.000623386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1604.14 tests/s, 19249.71 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8x4gm34w\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8x4gm34w.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013157573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n76.00 tests/s, 76.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2gouo6r\nStarted\n.\nFinished in 0.000585683 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1707.41 tests/s, 20488.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpr09k4cyd\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr09k4cyd.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007323086 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.55 tests/s, 136.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n    end\n    return false if open_brackets < 0\n  end\n  open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpezixxn_u\nStarted\n.\nFinished in 0.001045574 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n956.41 tests/s, 11476.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\n  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets[0] == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"<>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><><>\")\n \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "/tmp/tmpx1y9a4_s.rb:80: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1y9a4_s.rb:96: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp41menu7t\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp41menu7t.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007947901 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.82 tests/s, 125.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp64wed9sy\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmp64wed9sy.rb:20:in `block in correct_bracketing'\n/tmp/tmp64wed9sy.rb:13:in `each_char'\n/tmp/tmp64wed9sy.rb:13:in `correct_bracketing'\n/tmp/tmp64wed9sy.rb:33:in `call'\n/tmp/tmp64wed9sy.rb:33:in `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"))\n===============================================================================\n\nFinished in 0.005813467 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n172.01 tests/s, 688.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjoddec2i\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmpjoddec2i.rb:20:in `block in correct_bracketing'\n/tmp/tmpjoddec2i.rb:13:in `each_char'\n/tmp/tmpjoddec2i.rb:13:in `correct_bracketing'\n/tmp/tmpjoddec2i.rb:33:in `call'\n/tmp/tmpjoddec2i.rb:33:in `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"))\n===============================================================================\n\nFinished in 0.004999978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n200.00 tests/s, 800.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp6gy5klp6\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6gy5klp6.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008673058 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.30 tests/s, 115.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc4dq5kqu\nStarted\n.\nFinished in 0.001337336 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n747.76 tests/s, 8973.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvwgq2y0o\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvwgq2y0o.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011425253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.53 tests/s, 87.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpw6o41yas\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw6o41yas.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006764984 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.82 tests/s, 147.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  return false if brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_dm792xs\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_dm792xs.rb:32:in `test_correct_bracketing'\n     29:     assert_equal(false, candidate.call(\"<<<<\"))\n     30:     assert_equal(false, candidate.call(\">\"))\n     31:     assert_equal(false, candidate.call(\"<<>\"))\n  => 32:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n     33:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     34:   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.014959719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n66.85 tests/s, 735.31 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpli24851h\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpli24851h.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007430648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.58 tests/s, 134.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpthcm7mkc\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpthcm7mkc.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010322227 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.88 tests/s, 96.88 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1gvjxlbd\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1gvjxlbd.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011052068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.48 tests/s, 90.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    if count == 0\n        return True\n    else\n        return False\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp89lrz06n\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant True\n/tmp/tmp89lrz06n.rb:24:in `correct_bracketing'\n/tmp/tmp89lrz06n.rb:33:in `call'\n/tmp/tmp89lrz06n.rb:33:in `test_correct_bracketing'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_correct_bracketing\n     32:     candidate = method(:correct_bracketing)\n  => 33:     assert_equal(true, candidate.call(\"<>\"))\n     34:     assert_equal(true, candidate.call(\"<<><>>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     36:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\nFinished in 0.00781129 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.02 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n    return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] == \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n        return False\n      end\n    else\n      return False\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpg265u1po\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant True\n/tmp/tmpg265u1po.rb:13:in `correct_bracketing'\n/tmp/tmpg265u1po.rb:19:in `correct_bracketing'\n/tmp/tmpg265u1po.rb:32:in `call'\n/tmp/tmpg265u1po.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\nFinished in 0.005041506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n198.35 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpwb5zl6ih\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwb5zl6ih.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007916279 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.32 tests/s, 126.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpetijs4v5\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpetijs4v5.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010220283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.84 tests/s, 97.84 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpghd5x1n_\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpghd5x1n_.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008357924 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.65 tests/s, 119.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp_b_r0_kb\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_b_r0_kb.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008768511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n114.04 tests/s, 114.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpf056drh3\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf056drh3.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008033163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.48 tests/s, 124.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  left_brackets = 0\n  right_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      left_brackets += 1\n    elsif char == \">\"\n      right_brackets += 1\n    end\n  end\n  left_brackets == right_brackets\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxppqae97\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxppqae97.rb:32:in `test_correct_bracketing'\n     29:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     30:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n     31:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n  => 32:     assert_equal(false, candidate.call(\"><<>\"))\n     33:     assert_equal(false, candidate.call(\"<\"))\n     34:     assert_equal(false, candidate.call(\"<<<<\"))\n     35:     assert_equal(false, candidate.call(\">\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.013409383 seconds.\n-------------------------------------------------------------------------------\n1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.57 tests/s, 447.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpceskxhdc\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpceskxhdc.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007964648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.55 tests/s, 125.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpvp1psy7y\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvp1psy7y.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008283259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.73 tests/s, 120.73 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9the6ot9\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9the6ot9.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015287799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.41 tests/s, 65.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1qxlnl33\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1qxlnl33.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015346345 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n65.16 tests/s, 65.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            count += 1\n        elsif char == \">\"\n            count -= 1\n        end\n        if count < 0\n            return False\n        end\n    end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpjpt4k2dk\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant False\n/tmp/tmpjpt4k2dk.rb:20:in `block in correct_bracketing'\n/tmp/tmpjpt4k2dk.rb:13:in `each_char'\n/tmp/tmpjpt4k2dk.rb:13:in `correct_bracketing'\n/tmp/tmpjpt4k2dk.rb:33:in `call'\n/tmp/tmpjpt4k2dk.rb:33:in `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"))\n===============================================================================\n\nFinished in 0.006268528 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.53 tests/s, 638.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # check if the brackets are balanced\n  # if not, return false\n  # if balanced, return true\n  # create a stack\n  # loop through the brackets\n  # if the bracket is an opening bracket, push it to the stack\n  # if the bracket is a closing bracket, pop the stack\n  # if the stack is empty, return true\n  # if the stack is not empty, return false\n  stack = []\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\n      stack.pop\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9el55v9y\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9el55v9y.rb:39:in `test_correct_bracketing'\n     36:     assert_equal(true, candidate.call(\"<<><>>\"))\n     37:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     38:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n  => 39:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     40:     assert_equal(false, candidate.call(\"><<>\"))\n     41:     assert_equal(false, candidate.call(\"<\"))\n     42:     assert_equal(false, candidate.call(\"<<<<\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\nFinished in 0.018625672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n53.69 tests/s, 268.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp4phu9eeg\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4phu9eeg.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012600774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.36 tests/s, 79.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp9yu16xnu\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9yu16xnu.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012136246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n82.40 tests/s, 82.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmplidyb18y\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplidyb18y.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008677173 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.24 tests/s, 115.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpqjfpl2ex\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqjfpl2ex.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011417851 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.58 tests/s, 87.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpift32jfz\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpift32jfz.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625505 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp4yt8k52e\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4yt8k52e.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.015923777 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n62.80 tests/s, 62.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpddmvv0hy\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpddmvv0hy.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011756465 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.06 tests/s, 85.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmps1j5gd40\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmps1j5gd40.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014355452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.66 tests/s, 69.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp6849521o\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp6849521o.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00846651 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.11 tests/s, 118.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5zl_87j6\nStarted\n.\nFinished in 0.001303529 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n767.15 tests/s, 9205.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmplseib97k\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplseib97k.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008256548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.12 tests/s, 121.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp31n9msp4\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp31n9msp4.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008984899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n111.30 tests/s, 111.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # fill in your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmplslyzg2x\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplslyzg2x.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00952718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.96 tests/s, 104.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1ehr4pf8\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1ehr4pf8.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012472632 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.18 tests/s, 80.18 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmppgdx6it1\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppgdx6it1.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011546563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.61 tests/s, 86.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp5f4604yw\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5f4604yw.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.016270303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n61.46 tests/s, 61.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpck3al1rq\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpck3al1rq.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01626628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n61.48 tests/s, 61.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp0tvogie7\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0tvogie7.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01278303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.23 tests/s, 78.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmd6rmh6x\nStarted\n.\nFinished in 0.001326483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n753.87 tests/s, 9046.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpa30ev4p4\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpa30ev4p4.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010499555 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.24 tests/s, 95.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxga9dgpk\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxga9dgpk.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007355787 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.95 tests/s, 135.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnsh1dsdd\nStarted\n.\nFinished in 0.0011946 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n837.10 tests/s, 10045.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpg0h3qd_6\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg0h3qd_6.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009648374 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.64 tests/s, 103.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1qyxuj32\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1qyxuj32.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.016705245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n59.86 tests/s, 59.86 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpambjyekx\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpambjyekx.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.020082095 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n49.80 tests/s, 49.80 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpwnwzin5x\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwnwzin5x.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.016207829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n61.70 tests/s, 61.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz6y1aj1u\nStarted\n.\nFinished in 0.00080008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1249.88 tests/s, 14998.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpofg78okp\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpofg78okp.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013824676 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n72.33 tests/s, 72.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp8x2nd73c\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8x2nd73c.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.01140946 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.65 tests/s, 87.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxaodixbt\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxaodixbt.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007304413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.90 tests/s, 136.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp1qtyqqty\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1qtyqqty.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00649914 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.87 tests/s, 153.87 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpo8gj_f3m\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo8gj_f3m.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007567714 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.14 tests/s, 132.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjx5mmewl\nStarted\n.\nFinished in 0.000582705 seconds.\n-------------------------------------------------------------------------------\n1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1716.13 tests/s, 20593.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpsx095vds\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsx095vds.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007449205 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.24 tests/s, 134.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxcq4t4lk\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxcq4t4lk.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011964372 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n83.58 tests/s, 83.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpt4ehcz5m\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpt4ehcz5m.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009207919 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.60 tests/s, 108.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n    return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] == \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n        return False\n      end\n    else\n      return False\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpblqysooy\nStarted\nE\n===============================================================================\nError: test_correct_bracketing(TestHumanEval): NameError: uninitialized constant True\n/tmp/tmpblqysooy.rb:13:in `correct_bracketing'\n/tmp/tmpblqysooy.rb:19:in `correct_bracketing'\n/tmp/tmpblqysooy.rb:32:in `call'\n/tmp/tmpblqysooy.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\nFinished in 0.004820837 seconds.\n-------------------------------------------------------------------------------\n1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n207.43 tests/s, 0.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpu6vz9sii\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpu6vz9sii.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007051658 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.81 tests/s, 141.81 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmphspr8vxy\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphspr8vxy.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.010459993 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.60 tests/s, 95.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp45i3h4np\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp45i3h4np.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008889646 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.49 tests/s, 112.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmp0skkngjj\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0skkngjj.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014144295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n70.70 tests/s, 70.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return True if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n",
      "stdout": "Loaded suite /tmp/tmpxd6xqmc1\nStarted\nF\n===============================================================================\nFailure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxd6xqmc1.rb:18:in `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.013334606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.99 tests/s, 74.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}