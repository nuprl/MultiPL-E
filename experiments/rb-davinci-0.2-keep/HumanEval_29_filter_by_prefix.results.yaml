name: HumanEval_29_filter_by_prefix
language: ruby
results:
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfdzqkamg\nStarted\n.\nFinished in 0.000587204 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1702.99 tests/s, 3405.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp33m8z01i\nStarted\n.\nFinished in 0.000506572 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1974.05 tests/s, 3948.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ykq2bmb\nStarted\n.\nFinished in 0.001566505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    638.36 tests/s, 1276.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg_48_j7m\nStarted\n.\nFinished in 0.000503957 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1984.30 tests/s, 3968.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpngkcen5z\nStarted\n.\nFinished in 0.000549285 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1820.55 tests/s, 3641.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpor0gc81s\nStarted\n.\nFinished in 0.000489966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2040.96 tests/s, 4081.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph7nde9tt\nStarted\n.\nFinished in 0.000509442 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1962.93 tests/s, 3925.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm1y005tw\nStarted\n.\nFinished in 0.000854692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1170.01 tests/s, 2340.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3yfo69kq\nStarted\n.\nFinished in 0.000843151 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1186.03 tests/s, 2372.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabjlk7bb\nStarted\n.\nFinished in 0.000998405 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.60 tests/s, 2003.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzb9nfhzd\nStarted\n.\nFinished in 0.000551458 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.37 tests/s, 3626.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ppf49v_\nStarted\n.\nFinished in 0.001169327 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    855.19 tests/s, 1710.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsw_emwe8\nStarted\n.\nFinished in 0.000551476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.32 tests/s, 3626.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnagd1xz_\nStarted\n.\nFinished in 0.000584672 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1710.36 tests/s, 3420.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdk2numzt\nStarted\n.\nFinished in 0.000577562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1731.42 tests/s, 3462.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl9ybuqcd\nStarted\n.\nFinished in 0.000699798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1428.98 tests/s, 2857.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp96zdr_p5\nStarted\n.\nFinished in 0.000925779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1080.17 tests/s, 2160.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphwmyi6ep\nStarted\n.\nFinished in 0.000669226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1494.26 tests/s, 2988.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7uaeqcpo\nStarted\n.\nFinished in 0.001256736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    795.71 tests/s, 1591.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyef0xytk\nStarted\n.\nFinished in 0.000785739 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1272.69 tests/s, 2545.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp98vh5oa7\nStarted\n.\nFinished in 0.000634296 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1576.55 tests/s, 3153.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpat0_cpw9\nStarted\n.\nFinished in 0.000732603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1365.00 tests/s, 2729.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvswmnox2\nStarted\n.\nFinished in 0.00097055 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1030.34 tests/s, 2060.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkrww6b2b\nStarted\n.\nFinished in 0.000645689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1548.73 tests/s, 3097.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjskd3tyr\nStarted\n.\nFinished in 0.000607314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1646.59 tests/s, 3293.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzdh6apws\nStarted\n.\nFinished in 0.000571914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1748.51 tests/s, 3497.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2zvwrxf0\nStarted\n.\nFinished in 0.001007668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    992.39 tests/s, 1984.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpblgm891g\nStarted\n.\nFinished in 0.000953431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1048.84 tests/s, 2097.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcwxwr58x\nStarted\n.\nFinished in 0.000528141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1893.43 tests/s, 3786.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo792a05d\nStarted\n.\nFinished in 0.001521886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    657.08 tests/s, 1314.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp8ov8m46\nStarted\n.\nFinished in 0.000551326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1813.81 tests/s, 3627.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvmvp2q71\nStarted\n.\nFinished in 0.001023152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    977.37 tests/s, 1954.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoy8pz1xw\nStarted\n.\nFinished in 0.000509702 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1961.93 tests/s, 3923.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg68sznmh\nStarted\n.\nFinished in 0.001260464 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    793.36 tests/s, 1586.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedkwc23o\nStarted\n.\nFinished in 0.000842437 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1187.03 tests/s, 2374.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz_dh4_84\nStarted\n.\nFinished in 0.000972363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1028.42 tests/s, 2056.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplm3z1xjw\nStarted\n.\nFinished in 0.001140093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    877.12 tests/s, 1754.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2l5lbhr2\nStarted\n.\nFinished in 0.000900305 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1110.73 tests/s, 2221.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2g6nfpm8\nStarted\n.\nFinished in 0.000827532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1208.41 tests/s, 2416.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp877owlsm\nStarted\n.\nFinished in 0.00080142 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.79 tests/s, 2495.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdrxfafdj\nStarted\n.\nFinished in 0.000486328 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2056.23 tests/s, 4112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpptcgg5gg\nStarted\n.\nFinished in 0.001045035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    956.91 tests/s, 1913.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbs7qi8e1\nStarted\n.\nFinished in 0.000572965 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1745.31 tests/s, 3490.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprs3ns84t\nStarted\n.\nFinished in 0.000647225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1545.06 tests/s, 3090.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgvvhxq65\nStarted\n.\nFinished in 0.000670112 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1492.29 tests/s, 2984.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvuxctgnj\nStarted\n.\nFinished in 0.001561075 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    640.58 tests/s, 1281.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphpfa67cz\nStarted\n.\nFinished in 0.000878575 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1138.21 tests/s, 2276.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4yurpr19\nStarted\n.\nFinished in 0.001191437 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    839.32 tests/s, 1678.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwq1l2atk\nStarted\n.\nFinished in 0.00071452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1399.54 tests/s, 2799.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2t59dpn_\nStarted\n.\nFinished in 0.000883658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1131.66 tests/s, 2263.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_04lc9ax\nStarted\n.\nFinished in 0.000684716 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1460.46 tests/s, 2920.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmdc6o7v9\nStarted\n.\nFinished in 0.001111527 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    899.66 tests/s, 1799.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph8dr16l1\nStarted\n.\nFinished in 0.000554266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1804.19 tests/s, 3608.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprj8c0phc\nStarted\n.\nFinished in 0.000780683 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1280.93 tests/s, 2561.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp11qtuxex\nStarted\n.\nFinished in 0.000561012 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1782.49 tests/s, 3564.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy88dh3iw\nStarted\n.\nFinished in 0.000543374 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1840.35 tests/s, 3680.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphhe6dcoo\nStarted\n.\nFinished in 0.001180666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    846.98 tests/s, 1693.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo9vj_wra\nStarted\n.\nFinished in 0.000714256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1400.06 tests/s, 2800.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6f7i4fwn\nStarted\n.\nFinished in 0.000841713 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1188.05 tests/s, 2376.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_5kt20x\nStarted\n.\nFinished in 0.000494822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2020.93 tests/s, 4041.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzqb2y9jc\nStarted\n.\nFinished in 0.000807853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1237.85 tests/s, 2475.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphhucks6d\nStarted\n.\nFinished in 0.000907463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1101.97 tests/s, 2203.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfiobykwo\nStarted\n.\nFinished in 0.000832256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1201.55 tests/s, 2403.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd5di3gyl\nStarted\n.\nFinished in 0.00089352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1119.17 tests/s, 2238.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpltusy5xh\nStarted\n.\nFinished in 0.000727663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1374.26 tests/s, 2748.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8i6z5tls\nStarted\n.\nFinished in 0.000842709 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1186.65 tests/s, 2373.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6yutt9mo\nStarted\n.\nFinished in 0.000638292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1566.68 tests/s, 3133.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpze71nx01\nStarted\n.\nFinished in 0.000859421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.57 tests/s, 2327.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphzbx6c4q\nStarted\n.\nFinished in 0.000539534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1853.45 tests/s, 3706.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0iv1b7un\nStarted\n.\nFinished in 0.000557801 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1792.75 tests/s, 3585.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq8hn0si6\nStarted\n.\nFinished in 0.000910263 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1098.58 tests/s, 2197.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgkvawmc3\nStarted\n.\nFinished in 0.001053283 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    949.41 tests/s, 1898.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplm45euf6\nStarted\n.\nFinished in 0.000548238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1824.03 tests/s, 3648.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppejm2mux\nStarted\n.\nFinished in 0.000975523 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1025.09 tests/s, 2050.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbomgwybl\nStarted\n.\nFinished in 0.000994784 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1005.24 tests/s, 2010.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpih7g51cp\nStarted\n.\nFinished in 0.000515573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1939.59 tests/s, 3879.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxa3ng_j4\nStarted\n.\nFinished in 0.00094456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1058.69 tests/s, 2117.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptai4k232\nStarted\n.\nFinished in 0.000536981 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1862.26 tests/s, 3724.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpliithprl\nStarted\n.\nFinished in 0.001684271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    593.73 tests/s, 1187.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_kdypi2\nStarted\n.\nFinished in 0.000492768 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2029.35 tests/s, 4058.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0d5c9i34\nStarted\n.\nFinished in 0.000553981 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1805.12 tests/s, 3610.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplkkqv7sp\nStarted\n.\nFinished in 0.000612475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1632.72 tests/s, 3265.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi4jsb5vl\nStarted\n.\nFinished in 0.001014484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    985.72 tests/s, 1971.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_2rcuv75\nStarted\n.\nFinished in 0.001219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    820.34 tests/s, 1640.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmx776w79\nStarted\n.\nFinished in 0.000910882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1097.84 tests/s, 2195.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwdze20f_\nStarted\n.\nFinished in 0.000599654 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1667.63 tests/s, 3335.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp45594g6m\nStarted\n.\nFinished in 0.000769449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1299.63 tests/s, 2599.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_s2s2n29\nStarted\n.\nFinished in 0.000751955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1329.87 tests/s, 2659.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdfzmr2_x\nStarted\n.\nFinished in 0.000541723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1845.96 tests/s, 3691.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwvd77hbo\nStarted\n.\nFinished in 0.001041942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.75 tests/s, 1919.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpltae_ikp\nStarted\n.\nFinished in 0.000679294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1472.12 tests/s, 2944.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2qrhqzmo\nStarted\n.\nFinished in 0.000781333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1279.86 tests/s, 2559.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgxqoksxp\nStarted\n.\nFinished in 0.000761661 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1312.92 tests/s, 2625.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphu2vvate\nStarted\n.\nFinished in 0.000564523 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1771.41 tests/s, 3542.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpemcrvrf7\nStarted\n.\nFinished in 0.001229653 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    813.24 tests/s, 1626.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ctlwsw8\nStarted\n.\nFinished in 0.000798979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1251.60 tests/s, 2503.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpim5rwa18\nStarted\n.\nFinished in 0.000615471 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1624.77 tests/s, 3249.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd56pdv69\nStarted\n.\nFinished in 0.000954681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.47 tests/s, 2094.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplc06ntzt\nStarted\n.\nFinished in 0.000505843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1976.90 tests/s, 3953.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsls0t7d_\nStarted\n.\nFinished in 0.000580592 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1722.38 tests/s, 3444.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqnvyu3kz\nStarted\n.\nFinished in 0.000871533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.40 tests/s, 2294.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjlg6uguj\nStarted\n.\nFinished in 0.001243304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    804.31 tests/s, 1608.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaa33n8t6\nStarted\n.\nFinished in 0.0005923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1688.33 tests/s, 3376.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbd121u67\nStarted\n.\nFinished in 0.000622996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1605.15 tests/s, 3210.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplmz2wman\nStarted\n.\nFinished in 0.000545061 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1834.66 tests/s, 3669.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd19zk7xx\nStarted\n.\nFinished in 0.000922918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1083.52 tests/s, 2167.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1mq9fr26\nStarted\n.\nFinished in 0.000804234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1243.42 tests/s, 2486.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3g74tb7e\nStarted\n.\nFinished in 0.000963868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1037.49 tests/s, 2074.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx6bgixpq\nStarted\n.\nFinished in 0.000955195 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1046.91 tests/s, 2093.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphcave6tx\nStarted\n.\nFinished in 0.001005615 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.42 tests/s, 1988.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo42eyln0\nStarted\n.\nFinished in 0.000743314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1345.33 tests/s, 2690.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnkf_qhqg\nStarted\n.\nFinished in 0.000649858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1538.80 tests/s, 3077.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp11wscwa4\nStarted\n.\nFinished in 0.000975644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1024.96 tests/s, 2049.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpakph2mgt\nStarted\n.\nFinished in 0.000766903 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1303.95 tests/s, 2607.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp05lffeae\nStarted\n.\nFinished in 0.000776992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.01 tests/s, 2574.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpezxpizvh\nStarted\n.\nFinished in 0.001008148 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    991.92 tests/s, 1983.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpodekxwbf\nStarted\n.\nFinished in 0.000589459 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1696.47 tests/s, 3392.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx7_cy2hd\nStarted\n.\nFinished in 0.000509805 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1961.53 tests/s, 3923.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc5yae9qr\nStarted\n.\nFinished in 0.000607027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1647.37 tests/s, 3294.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsasckxya\nStarted\n.\nFinished in 0.000525793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1901.89 tests/s, 3803.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpok2apant\nStarted\n.\nFinished in 0.000818506 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1221.74 tests/s, 2443.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwgf81t85\nStarted\n.\nFinished in 0.000688798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1451.80 tests/s, 2903.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdoa81x0b\nStarted\n.\nFinished in 0.000515103 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1941.36 tests/s, 3882.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbf4f1k2\nStarted\n.\nFinished in 0.000894421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1118.04 tests/s, 2236.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8oo98lcb\nStarted\n.\nFinished in 0.000477008 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2096.40 tests/s, 4192.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqjdlefb3\nStarted\n.\nFinished in 0.000509485 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1962.77 tests/s, 3925.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpalv486ry\nStarted\n.\nFinished in 0.000531413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1881.78 tests/s, 3763.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_y13y_fz\nStarted\n.\nFinished in 0.000903675 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1106.59 tests/s, 2213.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  # TODO: Implement this method.\n  strings.select { |string| string.start_with?(prefix)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_prefix\n    candidate = method(:filter_by_prefix)\n    assert_equal([],\
    \ candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"\
    ], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyh9zzhzu\nStarted\n.\nFinished in 0.000671929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1488.25 tests/s, 2976.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7a41_awz\nStarted\n.\nFinished in 0.00051131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1955.76 tests/s, 3911.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppprw7vkh\nStarted\n.\nFinished in 0.001206577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    828.79 tests/s, 1657.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphnp9opri\nStarted\n.\nFinished in 0.00093419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1070.45 tests/s, 2140.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcllqi1mj\nStarted\n.\nFinished in 0.000558091 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1791.82 tests/s, 3583.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcz64ajif\nStarted\n.\nFinished in 0.000616773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1621.34 tests/s, 3242.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa_u4vdw6\nStarted\n.\nFinished in 0.001328486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    752.74 tests/s, 1505.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnhdzttjf\nStarted\n.\nFinished in 0.000651994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1533.76 tests/s, 3067.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr332pjwo\nStarted\n.\nFinished in 0.001066934 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    937.27 tests/s, 1874.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpstxzb1ld\nStarted\n.\nFinished in 0.000912594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1095.78 tests/s, 2191.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeflcw0yq\nStarted\n.\nFinished in 0.000485033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2061.72 tests/s, 4123.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9ixd0dj\nStarted\n.\nFinished in 0.001027624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    973.12 tests/s, 1946.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1dtas0mw\nStarted\n.\nFinished in 0.000632932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1579.95 tests/s, 3159.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe_c00v10\nStarted\n.\nFinished in 0.001442196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    693.39 tests/s, 1386.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_s9z6sf\nStarted\n.\nFinished in 0.000490845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2037.30 tests/s, 4074.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt_kzepj8\nStarted\n.\nFinished in 0.000531529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1881.36 tests/s, 3762.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjkbbdeib\nStarted\n.\nFinished in 0.001041499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    960.15 tests/s, 1920.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiplozzzr\nStarted\n.\nFinished in 0.001656587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    603.65 tests/s, 1207.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyqszky97\nStarted\n.\nFinished in 0.001334191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    749.52 tests/s, 1499.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy3sgwf8v\nStarted\n.\nFinished in 0.001111129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    899.99 tests/s, 1799.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkatpwmn2\nStarted\n.\nFinished in 0.000951682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1050.77 tests/s, 2101.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9w0g4o_o\nStarted\n.\nFinished in 0.000490617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2038.25 tests/s, 4076.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp39lyudk2\nStarted\n.\nFinished in 0.000664018 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1505.98 tests/s, 3011.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gehpxvy\nStarted\n.\nFinished in 0.000655956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1524.49 tests/s, 3048.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqtahxr6r\nStarted\n.\nFinished in 0.001414915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    706.76 tests/s, 1413.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwziwg_iy\nStarted\n.\nFinished in 0.000684851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1460.17 tests/s, 2920.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4g_jmwgv\nStarted\n.\nFinished in 0.000598984 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1669.49 tests/s, 3338.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgj_m8azc\nStarted\n.\nFinished in 0.000573007 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1745.18 tests/s, 3490.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk8h9t7ei\nStarted\n.\nFinished in 0.000650283 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1537.79 tests/s, 3075.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7_htdof\nStarted\n.\nFinished in 0.000688754 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1451.90 tests/s, 2903.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi0na9ips\nStarted\n.\nFinished in 0.000595716 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1678.65 tests/s, 3357.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqdauecsf\nStarted\n.\nFinished in 0.00059172 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1689.99 tests/s, 3379.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5g0tcro1\nStarted\n.\nFinished in 0.001729348 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    578.25 tests/s, 1156.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3eiw1ybb\nStarted\n.\nFinished in 0.001068773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    935.65 tests/s, 1871.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprgekji78\nStarted\n.\nFinished in 0.001092916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    914.98 tests/s, 1829.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp003tj5zm\nStarted\n.\nFinished in 0.001309629 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    763.58 tests/s, 1527.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphbb9xh68\nStarted\n.\nFinished in 0.000758356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1318.64 tests/s, 2637.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0uryfphu\nStarted\n.\nFinished in 0.001072152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    932.70 tests/s, 1865.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjm3ght4e\nStarted\n.\nFinished in 0.0013783 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    725.53 tests/s, 1451.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpovov_odg\nStarted\n.\nFinished in 0.00104587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    956.14 tests/s, 1912.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_yt5fpoi\nStarted\n.\nFinished in 0.000647588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1544.19 tests/s, 3088.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb_w2t34w\nStarted\n.\nFinished in 0.001652011 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    605.32 tests/s, 1210.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7fle230n\nStarted\n.\nFinished in 0.000498463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2006.17 tests/s, 4012.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9f0p9wex\nStarted\n.\nFinished in 0.001083827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    922.66 tests/s, 1845.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpewlv_yax\nStarted\n.\nFinished in 0.000959473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1042.24 tests/s, 2084.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpohsea7io\nStarted\n.\nFinished in 0.000564421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1771.73 tests/s, 3543.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplszqqv_c\nStarted\n.\nFinished in 0.000658269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1519.14 tests/s, 3038.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwqqyg4_q\nStarted\n.\nFinished in 0.000865324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1155.64 tests/s, 2311.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4o0lwy2n\nStarted\n.\nFinished in 0.000647723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1543.87 tests/s, 3087.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7rz4cybt\nStarted\n.\nFinished in 0.000526445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1899.53 tests/s, 3799.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpavba6bup\nStarted\n.\nFinished in 0.001075754 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    929.58 tests/s, 1859.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuasse1nj\nStarted\n.\nFinished in 0.000925192 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1080.86 tests/s, 2161.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpikv5ujgy\nStarted\n.\nFinished in 0.001240993 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    805.81 tests/s, 1611.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphnnlf3m0\nStarted\n.\nFinished in 0.000800827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1248.71 tests/s, 2497.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph1lhui49\nStarted\n.\nFinished in 0.001160544 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    861.66 tests/s, 1723.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo7unkk48\nStarted\n.\nFinished in 0.000538389 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1857.39 tests/s, 3714.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu663o6t1\nStarted\n.\nFinished in 0.000769232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1300.00 tests/s, 2600.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ijaz7nt\nStarted\n.\nFinished in 0.001194169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    837.40 tests/s, 1674.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_acjy0_a\nStarted\n.\nFinished in 0.001577534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    633.90 tests/s, 1267.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpublqaurn\nStarted\n.\nFinished in 0.001027685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    973.06 tests/s, 1946.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp940mza31\nStarted\n.\nFinished in 0.000487558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2051.04 tests/s, 4102.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmu5nfuv7\nStarted\n.\nFinished in 0.000796471 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1255.54 tests/s, 2511.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmfvp8_fq\nStarted\n.\nFinished in 0.001355167 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    737.92 tests/s, 1475.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu77y7sjw\nStarted\n.\nFinished in 0.00069105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1447.07 tests/s, 2894.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp52c36qjl\nStarted\n.\nFinished in 0.000469141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2131.56 tests/s, 4263.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbyt37u19\nStarted\n.\nFinished in 0.001181331 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    846.50 tests/s, 1693.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjove7ya\nStarted\n.\nFinished in 0.000471044 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2122.94 tests/s, 4245.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsj6lb9ks\nStarted\n.\nFinished in 0.000479359 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2086.12 tests/s, 4172.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj1d3a6nx\nStarted\n.\nFinished in 0.000627651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1593.24 tests/s, 3186.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc4k9m23a\nStarted\n.\nFinished in 0.00049979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2000.84 tests/s, 4001.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplqzg30jh\nStarted\n.\nFinished in 0.000518915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1927.10 tests/s, 3854.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpykhmiukd\nStarted\n.\nFinished in 0.000556621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.55 tests/s, 3593.11 assertions/s\n"
  exit_code: 0
  status: OK
