name: HumanEval_108_count_nums
language: ruby
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  # YOUR CODE HERE\nend", "  arr.count { |num| sum_digits(num) > 0\
    \ }\nend", "  # your code here\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  count = 0\n  arr.each do |num|\n\
    \    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n\
    \      sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend", "  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    if num.to_s.split('').map(&:to_i).reduce(:+)\
    \ > 0\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend", "  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend", "  arr.select { |n| n.abs.digits.sum > 0 }.size\n\
    end", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |n| n.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.length\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", " \
    \ arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  # YOUR\
    \ CODE HERE\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.length\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.select { |x| x.abs.digits.sum > 0 }.count\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |x| x.digits.sum > 0\
    \ }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  # YOUR CODE HERE\n\
    end", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num|\
    \ num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend",
  "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |x| x.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  arr.select { |num| num.abs.digits.sum > 0 }.length\nend", " \
    \ arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  # YOUR\
    \ CODE HERE\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  # your code here\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  # your code here\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  count = 0\n  arr.each do |num|\n    if num < 0\n     \
    \ num = num * -1\n    end\n    sum = 0\n    while num > 0\n      sum += num %\
    \ 10\n      num = num / 10\n    end\n    if sum > 0\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  arr.count { |n| n.abs.digits.sum > 0 }\nend",
  "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |x| sum_digits(x)\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend", "  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n   \
    \   sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  arr.select { |x| x.abs.digits.sum\
    \ > 0 }.length\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", " \
    \ arr.count { |num| num.digits.sum > 0 }\nend", "  # YOUR CODE HERE\nend", " \
    \ arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |x| x.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  # your code here\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  # your\
    \ code here\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  # YOUR\
    \ CODE HERE\nend", "  # YOUR CODE HERE\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  # YOUR CODE HERE\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  #\
    \ YOUR CODE HERE\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.digits.sum > 0 }\nend", "  arr.count do |num|\n    num.abs.digits.sum\
    \ > 0\n  end\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  #\
    \ YOUR CODE HERE\nend", "  arr.select { |num| num.abs.digits.sum > 0 }.length\n\
    end", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| sum_digits(num) > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\n\
    end", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0\
    \ }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num| num.digits.sum >\
    \ 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  # YOUR CODE\
    \ HERE\nend", "  # YOUR CODE HERE\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  count = 0\n  arr.each do |num|\n    sum = 0\n    if num < 0\n\
    \      num = num * -1\n    end\n    while num > 0\n      sum += num % 10\n   \
    \   num = num / 10\n    end\n    if sum > 0\n      count += 1\n    end\n  end\n\
    \  count\nend", "  arr.select { |num| num.abs.digits.sum > 0 }.count\nend", " \
    \ arr.select { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.select { |n|\
    \ n.abs.digits.sum > 0 }.size\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.length\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", " \
    \ count = 0\n  arr.each do |num|\n    if num < 0\n      num = num * -1\n    end\n\
    \    sum = 0\n    while num > 0\n      sum += num % 10\n      num = num / 10\n\
    \    end\n    if sum > 0\n      count += 1\n    end\n  end\n  return count\nend",
  "  count = 0\n  arr.each do |num|\n    if num < 0\n      num = num * -1\n    end\n\
    \    sum = 0\n    while num > 0\n      sum += num % 10\n      num = num / 10\n\
    \    end\n    if sum > 0\n      count += 1\n    end\n  end\n  return count\nend",
  "  arr.select { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0\
    \ }\nend", "  arr.count { |x| x.abs.digits.sum > 0 }\nend", "  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend", "  # YOUR CODE HERE\nend", "  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\n\
    end", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend",
  "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend", "  # your code here\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\n\
    end", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |n| n.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.abs.digits.sum > 0 }\nend", "  # YOUR CODE HERE\nend", "  arr.count\
    \ { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |n| n.abs.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum >\
    \ 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  # YOUR\
    \ CODE HERE\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  # YOUR\
    \ CODE HERE\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  count\
    \ = 0\n  arr.each do |num|\n    sum = 0\n    num = num.abs\n    while num > 0\n\
    \      sum += num % 10\n      num /= 10\n    end\n    count += 1 if sum > 0\n\
    \  end\n  count\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  count\
    \ = 0\n  arr.each do |num|\n    if num < 0\n      num = num * -1\n    end\n  \
    \  sum = 0\n    while num > 0\n      sum += num % 10\n      num = num / 10\n \
    \   end\n    if sum > 0\n      count += 1\n    end\n  end\n  return count\nend",
  "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |n| n.digits.sum > 0 }\nend", "  # YOUR CODE HERE\n\
    end", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0\
    \ }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\n\
    end", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |num| sum_digits(num)\
    \ > 0 }\nend", "  # your code here\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.abs.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
