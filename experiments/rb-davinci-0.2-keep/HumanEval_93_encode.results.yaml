name: HumanEval_93_encode
language: ruby
results:
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split(\"\
    \").map do |letter|\n    if letter.match(/[aeiou]/)\n      letter = letter.next.next\n\
    \    elsif letter.match(/[AEIOU]/)\n      letter = letter.next.next.upcase\n \
    \   else\n      letter\n    end\n  end.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpelce_jkh\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpelce_jkh.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.014199983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.42 tests/s, 70.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ayxq2ag\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp9ayxq2ag.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.007888849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.76 tests/s, 126.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdns8j45q\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdns8j45q.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.014342411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.72 tests/s, 69.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzd70vey_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpzd70vey_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006934935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.20 tests/s, 144.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbuh70e0a\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpbuh70e0a.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007092663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.99 tests/s, 140.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9uamfwn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpf9uamfwn.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006885947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.22 tests/s, 145.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmr0htu09\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpmr0htu09.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.014471307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.10 tests/s, 69.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph4s6jpi1\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmph4s6jpi1.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.009435373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.98 tests/s, 105.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioau\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdbpes38m\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdbpes38m.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.01303391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.72 tests/s, 76.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  alphabet\
    \ = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message =\
    \ ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n \
    \     index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoadlj66j\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpoadlj66j.rb:32:in `test_encode'\n\
    \     29:   def test_encode\n     30:     candidate = method(:encode)\n     31:\
    \     assert_equal(\"tgst\", candidate.call(\"TEST\"))\n  => 32:     assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n     33:     assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n     34:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This\
    \ is a message\"))\n     35:     assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n<\"mWDCSKR\"> expected but was\n<\"mwDcSkR\">\n\
    \ndiff:\n? mWDCSKR\n?  w c k \n===============================================================================\n\
    \nFinished in 0.013164238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.96 tests/s, 151.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n\t\
    vowels = \"aeiou\"\n\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencoded_message\
    \ = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char.downcase)\n\
    \t\t\tvowel_index = vowels.index(char.downcase)\n\t\t\tencoded_message += vowels[(vowel_index\
    \ + 2) % 5]\n\t\telsif alphabet.include?(char.downcase)\n\t\t\talphabet_index\
    \ = alphabet.index(char.downcase)\n\t\t\tencoded_message += alphabet[(alphabet_index\
    \ + 2) % 26]\n\t\telse\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsm4jj2kl\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpsm4jj2kl.rb:32:in `test_encode'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_encode\n\
    \     31:     candidate = method(:encode)\n  => 32:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     33:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     34:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  35:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"vouv\">\n===============================================================================\n\
    \nFinished in 0.008909271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.24 tests/s, 112.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwc1sr7ff\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpwc1sr7ff.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013317518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.09 tests/s, 75.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmph2w9tx8b\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmph2w9tx8b.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.011209957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.21 tests/s, 89.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnh8mceui\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnh8mceui.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.014101489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.91 tests/s, 70.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptpxglhju\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptpxglhju.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011085863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.20 tests/s, 90.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk00n13yg\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpk00n13yg.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014733344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.87 tests/s, 67.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfcqv2pab\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpfcqv2pab.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009187219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.85 tests/s, 108.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqe1sdu_j\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpqe1sdu_j.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009406504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.31 tests/s, 106.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptnqtx61t\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptnqtx61t.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.00762092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.22 tests/s, 131.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxk6o0fl\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpzxk6o0fl.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010468765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.52 tests/s, 95.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8v_1yyr7\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8v_1yyr7.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012544539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.72 tests/s, 79.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnkh1tkw2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnkh1tkw2.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012874064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.68 tests/s, 77.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxr0iuihp\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpxr0iuihp.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.009023323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.82 tests/s, 110.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqnedqtol\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpqnedqtol.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011583309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.33 tests/s, 86.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8o7ag9d_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8o7ag9d_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006764527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.83 tests/s, 147.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.chars.map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char.next.next\n    else\n \
    \     char.swapcase\n    end\n  end.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi856f36i\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpi856f36i.rb:24:in `test_encode'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_encode\n\
    \     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n===============================================================================\n\
    \nFinished in 0.011631274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.98 tests/s, 85.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvsn8srb1\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpvsn8srb1.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.009524267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.99 tests/s, 104.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjvv0z93x\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpjvv0z93x.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008105442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.37 tests/s, 123.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3yal3feh\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3yal3feh.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010725875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.23 tests/s, 93.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1042vdge\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp1042vdge.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.012190374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.03 tests/s, 82.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiztuu9cc\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpiztuu9cc.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.013145081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.07 tests/s, 76.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxhk0g3e4\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpxhk0g3e4.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.017941907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.74 tests/s, 55.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4lxffuav\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp4lxffuav.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.00969179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.18 tests/s, 103.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp98qk209l\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp98qk209l.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00815444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.63 tests/s, 122.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      char = vowels[(index + 2) %\
    \ 5]\n    end\n    char == char.upcase ? char.downcase : char.upcase\n  end.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzih6h4zz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpzih6h4zz.rb:25:in `test_encode'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_encode\n\
    \     24:     candidate = method(:encode)\n  => 25:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     26:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     27:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  28:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.013183906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.85 tests/s, 75.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzb8khyla\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpzb8khyla.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.009024831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.81 tests/s, 110.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1vw2jhzf\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp1vw2jhzf.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0090263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.79 tests/s, 110.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwcuqtow\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpwwcuqtow.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009278456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.78 tests/s, 107.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4_t2ly2p\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp4_t2ly2p.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009260955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.98 tests/s, 107.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.split('').map do |char|\n  \
    \  if vowels.include?(char)\n      index = vowels.index(char)\n      vowels[(index\
    \ + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjy5mlooj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpjy5mlooj.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.01206764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.87 tests/s, 82.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpux0ib_br\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpux0ib_br.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014063053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.11 tests/s, 71.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvy1j3kzq\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpvy1j3kzq.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.01800188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.55 tests/s, 55.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      if index == 4\n        encoded_message += vowels[0].upcase\n      else\n\
    \        encoded_message += vowels[index + 1].upcase\n      end\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa7ov2au8\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpa7ov2au8.rb:34:in `test_encode'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_encode\n\
    \     33:     candidate = method(:encode)\n  => 34:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     35:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     36:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  37:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tIst\">\n\ndiff:\n? tgst\n?  I  \n===============================================================================\n\
    \nFinished in 0.008324001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.13 tests/s, 120.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_llkend0\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_llkend0.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.007192604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.03 tests/s, 139.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu4vhsmgx\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpu4vhsmgx.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015448669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.73 tests/s, 64.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase)\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzj21do9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpqzj21do9.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.014981478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.75 tests/s, 66.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgab1wts4\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpgab1wts4.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007855879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.29 tests/s, 127.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaf3ie1g6\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpaf3ie1g6.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.008035587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.45 tests/s, 124.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_w15t_wl\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_w15t_wl.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014614868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.42 tests/s, 68.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnvu5pr9f\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnvu5pr9f.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009050317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.49 tests/s, 110.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmnzewv1a\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpmnzewv1a.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007799164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.22 tests/s, 128.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdy1re78y\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdy1re78y.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013111772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.27 tests/s, 76.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcjj8m51j\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpcjj8m51j.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012215302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.86 tests/s, 81.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3ffjbspn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3ffjbspn.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016368304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.09 tests/s, 61.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split('').map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char = char.next.next\n    elsif\
    \ char.match(/[A-Z]/)\n      char = char.downcase\n    elsif char.match(/[a-z]/)\n\
    \      char = char.upcase\n    end\n  end.join('')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5_jaci65\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp5_jaci65.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n===============================================================================\n\
    \nFinished in 0.009832722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.70 tests/s, 101.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8cbr6w8c\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8cbr6w8c.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015614649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.04 tests/s, 64.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ckccg9v\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp9ckccg9v.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008809891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.51 tests/s, 113.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdjhmstfz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdjhmstfz.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.020322657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.21 tests/s, 49.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = %w(a e i o u)\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      char = vowels[(vowels.index(char.downcase) + 2) % 5]\n    end\n    char.upcase\
    \ == char ? char.downcase : char.upcase\n  end.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0b6g95xs\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp0b6g95xs.rb:24:in `test_encode'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_encode\n\
    \     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.013864109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.13 tests/s, 72.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6af31nxl\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp6af31nxl.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.009211575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.56 tests/s, 108.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_itzamnk\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_itzamnk.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012649134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.06 tests/s, 79.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27rm_d0b\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp27rm_d0b.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01430937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.88 tests/s, 69.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_udqj108\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_udqj108.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.007667758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.42 tests/s, 130.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvs7cd8vi\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpvs7cd8vi.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.008337799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.94 tests/s, 119.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp15qxuq_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpp15qxuq_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011403707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.69 tests/s, 87.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += encode_vowel(char)\n\
    \    else\n      encoded_message += encode_consonant(char)\n    end\n  end\n \
    \ encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmps4dzcop5\nStarted\nE\n===============================================================================\n\
    Error: test_encode(TestHumanEval): NoMethodError: undefined method `encode_consonant'\
    \ for #<TestHumanEval:0x0000563c1d0ac828 @method_name=\"test_encode\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000563c1d0ac800\
    \ @start_time=2022-08-02 03:47:38.621639341 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000563c1ced9b68\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000563c1ce86328\
    \ @test_name=\"test_encode(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `encode_consonant' for #<TestHumanEval:0x0000563c1d0ac828 ...>>, @method_name=\"\
    test_encode\">], @stop_tag=#<Object:0x0000563c1ced8fd8>, @failures=[], @errors=[#<Test::Unit::Error:0x0000563c1ce86328\
    \ @test_name=\"test_encode(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `encode_consonant' for #<TestHumanEval:0x0000563c1d0ac828 ...>>, @method_name=\"\
    test_encode\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000563c1ced8c40\
    \ @a_proc=#<Proc:0x0000563c1ced8ce0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94816183356640>=>#<Proc:0x0000563c1ced8ce0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000563c1cebf5b0\
    \ @a_proc=#<Proc:0x0000563c1cebf650 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94816183252560>=>#<Proc:0x0000563c1cebf650 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: Implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6mhcsauc\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp6mhcsauc.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011982833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.45 tests/s, 83.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpew7rfbmm\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpew7rfbmm.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01708478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.53 tests/s, 58.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split('').map\
    \ do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter\n    end\n  end.join('')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_zvitxnb\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_zvitxnb.rb:24:in `test_encode'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_encode\n\
    \     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.01339693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.64 tests/s, 74.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.upcase.tr('AEIOU',\
    \ 'CGFKQ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptipjbeni\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptipjbeni.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.012615985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.26 tests/s, 79.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7q87k8j0\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp7q87k8j0.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.010995328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.95 tests/s, 90.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmph14_k79n\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmph14_k79n.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007610033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.41 tests/s, 131.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfcjxwypr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpfcjxwypr.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016124035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.02 tests/s, 62.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnxgi7i3\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnnxgi7i3.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.00828706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.67 tests/s, 120.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = %w(a e i o u)\n  encoded_message = ''\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      encoded_message += (char.ord + 2).chr\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1mo3ns6b\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp1mo3ns6b.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n===============================================================================\n\
    \nFinished in 0.014634981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.33 tests/s, 68.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoa4fpggu\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpoa4fpggu.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.0091202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.65 tests/s, 109.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmplt8g46p8\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmplt8g46p8.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012192584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.02 tests/s, 82.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  \
    \  vowels = \"aeiou\"\n    encoded_message = \"\"\n    message.each_char do |char|\n\
    \        if vowels.include?(char.downcase)\n            encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n        else\n            encoded_message += char.swapcase\n\
    \        end\n    end\n    encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2fi72jcr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp2fi72jcr.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.015858516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.06 tests/s, 63.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfmuhmyvm\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpfmuhmyvm.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010522043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.04 tests/s, 95.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeftyl425\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpeftyl425.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.018521906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.99 tests/s, 53.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      if char.downcase == 'u'\n        'a'\n      else\n        vowels[vowels.index(char.downcase)\
    \ + 2]\n      end\n    else\n      char.swapcase\n    end\n  end.join\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcc9kgay3\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpcc9kgay3.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.009375484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.66 tests/s, 106.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdfg9q8ga\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdfg9q8ga.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007945851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.85 tests/s, 125.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5d_hqfzn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp5d_hqfzn.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007827035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.76 tests/s, 127.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.chars.map do |char|\n    if\
    \ vowels.include?(char)\n      index = vowels.index(char)\n      vowels[(index\
    \ + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz1qc13n_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpz1qc13n_.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.007430881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.57 tests/s, 134.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp12j49ngv\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp12j49ngv.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.009173963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.00 tests/s, 109.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmw3swi92\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpmw3swi92.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008719461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.69 tests/s, 114.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      char = vowels[(index + 2) %\
    \ 5]\n    end\n    char.upcase == char ? char.downcase : char.upcase\n  end.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3efqnp9e\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3efqnp9e.rb:25:in `test_encode'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_encode\n\
    \     24:     candidate = method(:encode)\n  => 25:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     26:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     27:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  28:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.007829337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.72 tests/s, 127.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyadnw1m9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpyadnw1m9.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012753355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.41 tests/s, 78.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr89k2e82\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpr89k2e82.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013879361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.05 tests/s, 72.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9cbzznwg\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp9cbzznwg.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007578557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.95 tests/s, 131.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp37vgty6l\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp37vgty6l.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011685672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.57 tests/s, 85.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.upcase.tr('AEIOU',\
    \ 'CGFKP')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpssmu8zb2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpssmu8zb2.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.01498735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 66.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxhkvum9p\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpxhkvum9p.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010867011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.02 tests/s, 92.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvphkkc_2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpvphkkc_2.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012072053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.84 tests/s, 82.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn20t6ep_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpn20t6ep_.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.013269017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.36 tests/s, 75.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy45xtjfr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpy45xtjfr.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008788076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.79 tests/s, 113.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk5sgb5vq\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpk5sgb5vq.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007433941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.52 tests/s, 134.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6fkyj9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp6fkyj9tw.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.011606615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.16 tests/s, 86.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjiriti1c\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpjiriti1c.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007930384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.10 tests/s, 126.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuldv1j14\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpuldv1j14.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012096396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.67 tests/s, 82.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8rl_ir0_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8rl_ir0_.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.015647116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.91 tests/s, 63.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl8qcsrq9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpl8qcsrq9.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.018901255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.91 tests/s, 52.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ys7mbi0\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8ys7mbi0.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012212051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.89 tests/s, 81.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0ss89vo\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpz0ss89vo.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01010292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.98 tests/s, 98.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqqltcclo\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpqqltcclo.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.009411783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.25 tests/s, 106.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf339lrm4\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpf339lrm4.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008249023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.23 tests/s, 121.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3nh8vq9p\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3nh8vq9p.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010444334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.75 tests/s, 95.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp77k4n_q3\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp77k4n_q3.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.011469134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.19 tests/s, 87.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptr5tqxzj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptr5tqxzj.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 129.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdjwob7cj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpdjwob7cj.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010453597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.66 tests/s, 95.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3p3u03m1\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3p3u03m1.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.008754541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.23 tests/s, 114.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjwjsfz72\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpjwjsfz72.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006991676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.03 tests/s, 143.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl6lg2_he\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpl6lg2_he.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007268325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.58 tests/s, 137.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3mp9_j0r\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3mp9_j0r.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017293999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.82 tests/s, 57.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi8qnkqpf\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpi8qnkqpf.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.008255096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.14 tests/s, 121.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcxhwvlmn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpcxhwvlmn.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.01362021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.42 tests/s, 73.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3apzv7v1\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3apzv7v1.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.010677129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.66 tests/s, 93.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptk7tky1w\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptk7tky1w.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.016584678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.30 tests/s, 60.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptlw6fcxe\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmptlw6fcxe.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.01357772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.65 tests/s, 73.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.split('').map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        char\
    \ = vowels[0].upcase\n      else\n        char = vowels[index + 2].upcase\n  \
    \    end\n    else\n      char.swapcase\n    end\n  end.join('')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfgk5g2ft\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpfgk5g2ft.rb:30:in `test_encode'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_encode\n\
    \     29:     candidate = method(:encode)\n  => 30:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     31:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     32:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  33:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.011830881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.52 tests/s, 84.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgbksszwk\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpgbksszwk.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.019638379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.92 tests/s, 50.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpck6jr3ju\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpck6jr3ju.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.02078261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.12 tests/s, 48.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiddk64_1\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpiddk64_1.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015131696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.09 tests/s, 66.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3k5cy4cn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp3k5cy4cn.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.014830939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.43 tests/s, 67.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo_4c8ftq\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpo_4c8ftq.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.0097917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.13 tests/s, 102.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: Implement this function\n  vowels = \"aeiou\"\n  new_message = \"\"\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      new_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n      new_message\
    \ += char\n    end\n  end\n  new_message.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp_z2u8s9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpp_z2u8s9.rb:28:in `test_encode'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_encode\n\
    \     27:     candidate = method(:encode)\n  => 28:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     29:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     30:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  31:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.008445946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.40 tests/s, 118.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprrn2ctme\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmprrn2ctme.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007965649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.54 tests/s, 125.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_1_av5m\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8_1_av5m.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.012482806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.11 tests/s, 80.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n\
    \      index = vowels.index(char)\n      vowels[(index + 2) % 5]\n    else\n \
    \     char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlw7zihr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpmlw7zihr.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.010827789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.35 tests/s, 92.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmxutg2yk\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpmxutg2yk.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.00751288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.10 tests/s, 133.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp69c341lt\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp69c341lt.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011057456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.44 tests/s, 90.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpatqtwdxz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpatqtwdxz.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011583904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.33 tests/s, 86.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxqdziucs\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpxqdziucs.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009652067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.60 tests/s, 103.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpys9bgor9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpys9bgor9.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01401864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.33 tests/s, 71.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphstd94kr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmphstd94kr.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.010331696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.79 tests/s, 96.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp60j6witr\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp60j6witr.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012240108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.70 tests/s, 81.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8hbm5us8\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8hbm5us8.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.011524937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.77 tests/s, 86.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkz9le3ab\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpkz9le3ab.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.016556256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.40 tests/s, 60.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp670c47jt\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp670c47jt.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.018195313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.96 tests/s, 54.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeej0z00n\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpeej0z00n.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.012534579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.78 tests/s, 79.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjt4qn3ne\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpjt4qn3ne.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015878568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.98 tests/s, 62.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnmjqfk3g\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnmjqfk3g.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.00991617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.85 tests/s, 100.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppl0wspol\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmppl0wspol.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017206791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.12 tests/s, 58.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl56ylmrx\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpl56ylmrx.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015666396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.83 tests/s, 63.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp65g7c0fc\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp65g7c0fc.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.022505972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.43 tests/s, 44.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpji10a4kt\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpji10a4kt.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006978818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.29 tests/s, 143.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppg1rm9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmppg1rm9tw.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011036246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.61 tests/s, 90.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf58heh22\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpf58heh22.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.008444443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.42 tests/s, 118.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx5kzsgqj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpx5kzsgqj.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.012298038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.31 tests/s, 81.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4vfvlmc2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp4vfvlmc2.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.008358079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.64 tests/s, 119.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp877cxxl6\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp877cxxl6.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.007387987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.35 tests/s, 135.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp270xpni3\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp270xpni3.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.010076148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.24 tests/s, 99.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprjwuvyic\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmprjwuvyic.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009406112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.31 tests/s, 106.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpto8wb41b\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpto8wb41b.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.011532432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.71 tests/s, 86.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn3ln6sl2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpn3ln6sl2.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012719781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.62 tests/s, 78.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg6gs9k3i\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpg6gs9k3i.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.01249007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.06 tests/s, 80.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr(\"\
    a-z\", \"A-Z\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprm_rwjzo\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmprm_rwjzo.rb:19:in `test_encode'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_encode\n\
    \     18:     candidate = method(:encode)\n  => 19:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     20:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     21:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  22:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.007515783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.05 tests/s, 133.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.match(/[A-Z]/)\n      encoded_message += char.downcase\n\
    \    elsif char.match(/[a-z]/)\n      encoded_message += char.upcase\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeazm6i3q\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpeazm6i3q.rb:31:in `test_encode'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_encode\n\
    \     30:     candidate = method(:encode)\n  => 31:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     32:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     33:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  34:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.017071227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.58 tests/s, 58.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphtbxgy6i\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmphtbxgy6i.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011181384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.43 tests/s, 89.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr('a-z',\
    \ 'A-Z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcix5bcvi\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpcix5bcvi.rb:19:in `test_encode'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_encode\n\
    \     18:     candidate = method(:encode)\n  => 19:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     20:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     21:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  22:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.009339144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.08 tests/s, 107.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp03l33hro\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp03l33hro.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013699107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.00 tests/s, 73.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkpgm04bj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpkpgm04bj.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009261667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.97 tests/s, 107.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5wc8wree\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp5wc8wree.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.010752704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.00 tests/s, 93.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_fxgwiz_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp_fxgwiz_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011854869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.35 tests/s, 84.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnx58zqjj\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpnx58zqjj.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010236283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.69 tests/s, 97.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx8gok6se\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpx8gok6se.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008544081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.04 tests/s, 117.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe8kq_q8g\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpe8kq_q8g.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011480352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.11 tests/s, 87.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0fuaorz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmph0fuaorz.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012021328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.19 tests/s, 83.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr0zf58x9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpr0zf58x9.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009395705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.43 tests/s, 106.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp52t_9mv2\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp52t_9mv2.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.012542534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.73 tests/s, 79.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1mxn1dql\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp1mxn1dql.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011707545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.42 tests/s, 85.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz8g0dxku\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpz8g0dxku.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012948032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.23 tests/s, 77.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5kev5j5_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp5kev5j5_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00713789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.10 tests/s, 140.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiebnfous\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpiebnfous.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008936688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.90 tests/s, 111.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpumdzzkn_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpumdzzkn_.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.0120704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.85 tests/s, 82.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8w28ptl4\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8w28ptl4.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.01317827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.88 tests/s, 75.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzb35dpkd\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpzb35dpkd.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013366727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.81 tests/s, 74.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu_0mszer\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpu_0mszer.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.012623392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.22 tests/s, 79.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp0vmtw8z\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpp0vmtw8z.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.009702685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.06 tests/s, 103.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt00syael\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpt00syael.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007814159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.97 tests/s, 127.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6bujqofe\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp6bujqofe.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014716053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.95 tests/s, 67.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpexenukdl\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpexenukdl.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.017370506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.57 tests/s, 57.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpofu70qvd\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpofu70qvd.rb:27:in `test_encode'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_encode\n\
    \     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n===============================================================================\n\
    \nFinished in 0.009939557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.61 tests/s, 100.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2aj3etz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpo2aj3etz.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012861039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.75 tests/s, 77.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc33k41zz\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpc33k41zz.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015310567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.31 tests/s, 65.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq2ct0aag\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpq2ct0aag.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n===============================================================================\n\
    \nFinished in 0.018694094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.49 tests/s, 53.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpza_pu_64\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpza_pu_64.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013488824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.14 tests/s, 74.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgjlcsmtm\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpgjlcsmtm.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006877823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.39 tests/s, 145.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgkauv0ew\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpgkauv0ew.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.007203751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.82 tests/s, 138.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ok7ebhw\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp0ok7ebhw.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016731609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.77 tests/s, 59.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw2uznj3q\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpw2uznj3q.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007202978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.83 tests/s, 138.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4leka652\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp4leka652.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006956079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.76 tests/s, 143.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprt6665hg\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmprt6665hg.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007016995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.51 tests/s, 142.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhjnoq3t\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpuhjnoq3t.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008905086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.30 tests/s, 112.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  result\
    \ = ''\n  message.each_char do |char|\n    if char.match(/[aeiou]/i)\n      result\
    \ += char.next.next\n    else\n      result += char\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8p_hyi7f\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmp8p_hyi7f.rb:26:in `test_encode'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_encode\n\
    \     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.00731849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.64 tests/s, 136.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx2kg4a9_\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpx2kg4a9_.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006560614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.42 tests/s, 152.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n\t\
    message.downcase!\n\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tencoded_message\
    \ = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\t\t\t\
    index = vowels.index(char)\n\t\t\tif index == 4\n\t\t\t\tindex = -1\n\t\t\tend\n\
    \t\t\tencoded_message += vowels[index + 2]\n\t\telse\n\t\t\tencoded_message +=\
    \ char\n\t\tend\n\tend\n\tencoded_message.upcase!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphfhvkqxn\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmphfhvkqxn.rb:32:in `test_encode'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_encode\n\
    \     31:     candidate = method(:encode)\n  => 32:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     33:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     34:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  35:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.007717344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.58 tests/s, 129.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      new_message += char.downcase\n    else\n      new_message\
    \ += char.upcase\n    end\n  end\n  new_message\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb9963mk9\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpb9963mk9.rb:29:in `test_encode'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_encode\n\
    \     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.007356199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.94 tests/s, 135.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmplehhbe__\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmplehhbe__.rb:18:in `test_encode'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_encode\n\
    \     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008071338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.90 tests/s, 123.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      if char.downcase == 'u'\n\
    \        encoded_message += 'a'\n      else\n        encoded_message += vowels[vowels.index(char.downcase)\
    \ + 2]\n      end\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo60l7xyx\nStarted\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/tmp/tmpo60l7xyx.rb:33:in `test_encode'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_encode\n\
    \     32:     candidate = method(:encode)\n  => 33:     assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n     34:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     35:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  36:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n===============================================================================\n\
    \nFinished in 0.007288777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.20 tests/s, 137.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
