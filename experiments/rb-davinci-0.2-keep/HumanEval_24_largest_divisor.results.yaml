name: HumanEval_24_largest_divisor
language: ruby
results:
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpog95yz_4\nStarted\n.\nFinished in 0.000787812 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1269.34 tests/s, 6346.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3d43gq0h\nStarted\n.\nFinished in 0.000315574 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3168.83 tests/s, 15844.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4wahb_x\nStarted\n.\nFinished in 0.000354687 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2819.39 tests/s, 14096.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuwf66dwj\nStarted\n.\nFinished in 0.000320593 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3119.22 tests/s, 15596.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3e6kqxti\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp3e6kqxti.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2..2>\n===============================================================================\n\
    \nFinished in 0.005442403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.74 tests/s, 183.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7g0xah43\nStarted\n.\nFinished in 0.000337965 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.89 tests/s, 14794.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo5l07qqc\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpo5l07qqc.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004555215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.53 tests/s, 219.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpil7yjf3w\nStarted\n.\nFinished in 0.000454886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2198.35 tests/s, 10991.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwmej17yx\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpwmej17yx.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.005037452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.51 tests/s, 198.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhf1znns\nStarted\n.\nFinished in 0.000343226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.53 tests/s, 14567.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7nkjowyr\nStarted\n.\nFinished in 0.000528995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1890.38 tests/s, 9451.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphvp48f4j\nStarted\n.\nFinished in 0.000326835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3059.65 tests/s, 15298.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    return x if n % x == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp95gg_1bw\nStarted\n.\nFinished in 0.000350469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2853.32 tests/s, 14266.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpus6vcxew\nStarted\n.\nFinished in 0.000374845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2667.77 tests/s, 13338.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxxuro1l6\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpxxuro1l6.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005662325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.61 tests/s, 176.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8psup0g0\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp8psup0g0.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005144853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.37 tests/s, 194.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpubd1adn2\nStarted\n.\nFinished in 0.000326415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3063.58 tests/s, 15317.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfg1x_h8s\nStarted\n.\nFinished in 0.000358033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.04 tests/s, 13965.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcd4n_2dz\nStarted\n.\nFinished in 0.000344258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2904.80 tests/s, 14523.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3gqbu2cn\nStarted\n.\nFinished in 0.000405002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2469.12 tests/s, 12345.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdha9_x4e\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpdha9_x4e.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005157108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.91 tests/s, 193.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_un7kxl\nStarted\n.\nFinished in 0.000454004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2202.62 tests/s, 11013.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplf4mf0lw\nStarted\n.\nFinished in 0.000859896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1162.93 tests/s, 5814.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4v1bw4_p\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4v1bw4_p.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004597515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.51 tests/s, 217.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb7owda1n\nStarted\n.\nFinished in 0.000328599 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3043.22 tests/s, 15216.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3lgqndk_\nStarted\n.\nFinished in 0.000387138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2583.06 tests/s, 12915.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3m9itoz\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpz3m9itoz.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005048553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.08 tests/s, 198.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpne12zvg9\nStarted\n.\nFinished in 0.000328909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3040.35 tests/s, 15201.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp75gi8z6h\nStarted\n.\nFinished in 0.000339028 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2949.61 tests/s, 14748.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg422sjsv\nStarted\n.\nFinished in 0.000349987 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.25 tests/s, 14286.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabenkiw2\nStarted\n.\nFinished in 0.000366709 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2726.96 tests/s, 13634.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplb6d7qwg\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmplb6d7qwg.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004681533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.61 tests/s, 213.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsoxfe17o\nStarted\n.\nFinished in 0.000341683 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2926.69 tests/s, 14633.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while n % divisor != 0\n    divisor -= 1\n  end\n  divisor\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc47c4wnr\nStarted\n.\nFinished in 0.000322808 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3097.82 tests/s, 15489.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptvud089n\nStarted\n.\nFinished in 0.000330843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3022.58 tests/s, 15112.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvdr95zkr\nStarted\n.\nFinished in 0.000386797 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2585.34 tests/s, 12926.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp16p2amvu\nStarted\n.\nFinished in 0.000355989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.08 tests/s, 14045.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzv29nebv\nStarted\n.\nFinished in 0.000384022 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.02 tests/s, 13020.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsf1ocnw9\nStarted\n.\nFinished in 0.000335652 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2979.28 tests/s, 14896.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1a2tv4yy\nStarted\n.\nFinished in 0.000348665 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2868.08 tests/s, 14340.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxo33sto8\nStarted\n.\nFinished in 0.000342594 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2918.91 tests/s, 14594.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzpzfdybu\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpzpzfdybu.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005372311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.14 tests/s, 186.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9b68lbwd\nStarted\n.\nFinished in 0.000311556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3209.70 tests/s, 16048.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpduyq_8h7\nStarted\n.\nFinished in 0.000375045 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.35 tests/s, 13331.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyesksw_t\nStarted\n.\nFinished in 0.000348395 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.31 tests/s, 14351.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbf_vmsgr\nStarted\n.\nFinished in 0.000368002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2717.38 tests/s, 13586.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4tpg87sj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4tpg87sj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004624476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.24 tests/s, 216.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf_ox16pa\nStarted\n.\nFinished in 0.00037201 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2688.10 tests/s, 13440.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3o5vhzvs\nStarted\n.\nFinished in 0.000326013 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3067.36 tests/s, 15336.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).select\
    \ { |x| n % x == 0 }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpox2wztwl\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpox2wztwl.rb:11:in `test_largest_divisor'\n\
    \      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_largest_divisor\n\
    \     10:     candidate = method(:largest_divisor)\n  => 11:     assert_equal(1,\
    \ candidate.call(3))\n     12:     assert_equal(1, candidate.call(7))\n     13:\
    \     assert_equal(5, candidate.call(10))\n     14:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.004550826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.74 tests/s, 219.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzgfbfd56\nStarted\n.\nFinished in 0.000376899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.23 tests/s, 13266.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv1de3esj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpv1de3esj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00451539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.46 tests/s, 221.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4yjtm92f\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4yjtm92f.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.00458486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.11 tests/s, 218.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3kh1700w\nStarted\n.\nFinished in 0.000338497 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.24 tests/s, 14771.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgl8walbq\nStarted\n.\nFinished in 0.000343886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2907.94 tests/s, 14539.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpflkx_41d\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpflkx_41d.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004878463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.98 tests/s, 204.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_vihoz_1\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp_vihoz_1.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004832726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.92 tests/s, 206.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnkrmnu1t\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpnkrmnu1t.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004430641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.70 tests/s, 225.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    return i if n % i == 0\n    i -= 1\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpetphihh3\nStarted\n.\nFinished in 0.000359917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2778.42 tests/s, 13892.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphf4mgcgy\nStarted\n.\nFinished in 0.000365939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2732.70 tests/s, 13663.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    else\n      divisor -= 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp80ihoyxc\nStarted\n.\nFinished in 0.000390203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2562.77 tests/s, 12813.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsro8_cmn\nStarted\n.\nFinished in 0.000485193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2061.04 tests/s, 10305.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpejst7vyf\nStarted\n.\nFinished in 0.000374895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2667.41 tests/s, 13337.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbqk_a0r8\nStarted\n.\nFinished in 0.000324751 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3079.28 tests/s, 15396.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx_p5h0xm\nStarted\n.\nFinished in 0.000448494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2229.68 tests/s, 11148.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |num|\n    return num if n % num == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fpa_ib0\nStarted\n.\nFinished in 0.000335831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.69 tests/s, 14888.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00r7w_4k\nStarted\n.\nFinished in 0.000446569 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2239.30 tests/s, 11196.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplqo9v2wh\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmplqo9v2wh.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005090812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.43 tests/s, 196.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmauut60t\nStarted\n.\nFinished in 0.000591833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1689.67 tests/s, 8448.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuwj7ae5g\nStarted\n.\nFinished in 0.000343306 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2912.85 tests/s, 14564.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp71nyosv2\nStarted\n.\nFinished in 0.00033035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3027.09 tests/s, 15135.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz2wzw5wg\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpz2wzw5wg.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.0048986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.14 tests/s, 204.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxz4vbsu3\nStarted\n.\nFinished in 0.000389683 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2566.19 tests/s, 12830.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw8fdcyrl\nStarted\n.\nFinished in 0.000369475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.54 tests/s, 13532.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1dql6w2e\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp1dql6w2e.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004564743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.07 tests/s, 219.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpak753tpn\nStarted\n.\nFinished in 0.000331844 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3013.46 tests/s, 15067.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3wb17bhx\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp3wb17bhx.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004445939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.92 tests/s, 224.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp39gr0oqa\nStarted\n.\nFinished in 0.000327116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3057.02 tests/s, 15285.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz89pcwt\nStarted\n.\nFinished in 0.000344999 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.56 tests/s, 14492.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwst3xk8n\nStarted\n.\nFinished in 0.000370517 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2698.93 tests/s, 13494.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjbaa_qeu\nStarted\n.\nFinished in 0.000410131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2438.25 tests/s, 12191.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3y51btse\nStarted\n.\nFinished in 0.000346422 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2886.65 tests/s, 14433.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe1puvr6a\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpe1puvr6a.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004643211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.37 tests/s, 215.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqzbgjusv\nStarted\n.\nFinished in 0.000354415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2821.55 tests/s, 14107.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wsqvq1h\nStarted\n.\nFinished in 0.000381347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.28 tests/s, 13111.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6d8n3r52\nStarted\n.\nFinished in 0.000396906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2519.49 tests/s, 12597.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps5my2ouu\nStarted\n.\nFinished in 0.00035626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2806.94 tests/s, 14034.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    if n % x == 0\n      return x\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe_83nr67\nStarted\n.\nFinished in 0.000345289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.12 tests/s, 14480.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqsq3m0ll\nStarted\n.\nFinished in 0.000780167 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1281.78 tests/s, 6408.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprtq5skr_\nStarted\n.\nFinished in 0.000386836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2585.07 tests/s, 12925.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplf2cdbds\nStarted\n.\nFinished in 0.000322988 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3096.09 tests/s, 15480.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp70nrcz1r\nStarted\n.\nFinished in 0.000356951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2801.50 tests/s, 14007.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp44d1rgiw\nStarted\n.\nFinished in 0.00043089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2320.78 tests/s, 11603.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd0mzsed4\nStarted\n.\nFinished in 0.000475764 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2101.88 tests/s, 10509.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpap_141hk\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpap_141hk.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004865609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.52 tests/s, 205.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppaxlg4zv\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmppaxlg4zv.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006065786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.86 tests/s, 164.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_lopvxn3\nStarted\n.\nFinished in 0.000342804 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2917.12 tests/s, 14585.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd_im5zkf\nStarted\n.\nFinished in 0.00032379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3088.42 tests/s, 15442.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfmax5lr\nStarted\n.\nFinished in 0.000336292 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2973.61 tests/s, 14868.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdu_rus8y\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpdu_rus8y.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005058011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.71 tests/s, 197.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcwa9lger\nStarted\n.\nFinished in 0.000332195 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3010.28 tests/s, 15051.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwt77lnou\nStarted\n.\nFinished in 0.000374444 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2670.63 tests/s, 13353.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpehh1thdw\nStarted\n.\nFinished in 0.000380145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.58 tests/s, 13152.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4rhzxs9\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpo4rhzxs9.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004506203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.92 tests/s, 221.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2nlkanoo\nStarted\n.\nFinished in 0.000336533 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2971.48 tests/s, 14857.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9k1hj36q\nStarted\n.\nFinished in 0.00034569 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2892.77 tests/s, 14463.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvddqvxbv\nStarted\n.\nFinished in 0.000399321 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2504.25 tests/s, 12521.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4xjpi_a3\nStarted\n.\nFinished in 0.00031871 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3137.65 tests/s, 15688.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc0hchef2\nStarted\n.\nFinished in 0.000341742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2926.18 tests/s, 14630.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpza2z3erl\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpza2z3erl.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004873794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.18 tests/s, 205.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvfdktutd\nStarted\n.\nFinished in 0.000450037 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2222.04 tests/s, 11110.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbfo2tvbt\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpbfo2tvbt.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004835502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.80 tests/s, 206.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptt2jsx62\nStarted\n.\nFinished in 0.000349206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2863.64 tests/s, 14318.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqaznyz0b\nStarted\n.\nFinished in 0.000763134 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1310.39 tests/s, 6551.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcaj1re1g\nStarted\n.\nFinished in 0.000375035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.42 tests/s, 13332.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpljz7f1hz\nStarted\n.\nFinished in 0.00034573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2892.43 tests/s, 14462.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6off_lgh\nStarted\n.\nFinished in 0.00037744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2649.43 tests/s, 13247.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi6p9j_ev\nStarted\n.\nFinished in 0.000559662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1786.79 tests/s, 8933.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppsy7hzc5\nStarted\n.\nFinished in 0.000344368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2903.87 tests/s, 14519.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc2kz9wcr\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpc2kz9wcr.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006310315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.47 tests/s, 158.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp889xhvg6\nStarted\n.\nFinished in 0.000322136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3104.28 tests/s, 15521.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1zejlpx\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpq1zejlpx.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004601731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.31 tests/s, 217.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdopkuj1l\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpdopkuj1l.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004963192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.48 tests/s, 201.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7chu66v\nStarted\n.\nFinished in 0.000349427 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2861.83 tests/s, 14309.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd_wsl2s7\nStarted\n.\nFinished in 0.000321414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3111.25 tests/s, 15556.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqs9z2r2k\nStarted\n.\nFinished in 0.000327234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3055.92 tests/s, 15279.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9fgylovl\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp9fgylovl.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2..2>\n===============================================================================\n\
    \nFinished in 0.00584484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.09 tests/s, 171.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7pdsfiod\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp7pdsfiod.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00460046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.37 tests/s, 217.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpze6mbodp\nStarted\n.\nFinished in 0.000438785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2279.02 tests/s, 11395.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy70vzyw_\nStarted\n.\nFinished in 0.000371308 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2693.18 tests/s, 13465.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyietiypm\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpyietiypm.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004561917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.21 tests/s, 219.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppv0i8q2d\nStarted\n.\nFinished in 0.000358644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2788.28 tests/s, 13941.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz046w08g\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpz046w08g.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004701139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.71 tests/s, 212.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzuxfhvot\nStarted\n.\nFinished in 0.000391446 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2554.63 tests/s, 12773.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfwz66e_6\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpfwz66e_6.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004622961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.31 tests/s, 216.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    return i if n % i == 0\n    i -= 1\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwd9pknh5\nStarted\n.\nFinished in 0.000577065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1732.91 tests/s, 8664.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp16k4pfjr\nStarted\n.\nFinished in 0.000355609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2812.08 tests/s, 14060.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeukzadlt\nStarted\n.\nFinished in 0.000358995 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2785.55 tests/s, 13927.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuf333m1w\nStarted\n.\nFinished in 0.000388009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2577.26 tests/s, 12886.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc9u6y907\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpc9u6y907.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010298614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.10 tests/s, 97.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaumz6u78\nStarted\n.\nFinished in 0.000348315 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.96 tests/s, 14354.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzrl5oqhh\nStarted\n.\nFinished in 0.000397889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2513.26 tests/s, 12566.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpurob0h6j\nStarted\n.\nFinished in 0.000349778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.96 tests/s, 14294.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_j047zi5\nStarted\n.\nFinished in 0.00032926 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3037.11 tests/s, 15185.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf4f5d5uj\nStarted\n.\nFinished in 0.000408318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2449.07 tests/s, 12245.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxdz19dqh\nStarted\n.\nFinished in 0.000456318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2191.45 tests/s, 10957.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ijy1x2g\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp1ijy1x2g.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004542041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.17 tests/s, 220.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfj6oqxes\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpfj6oqxes.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005215637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.73 tests/s, 191.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |divisor|\n    return divisor if n % divisor == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpef8uujpi\nStarted\n.\nFinished in 0.000329219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3037.49 tests/s, 15187.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt5838n7u\nStarted\n.\nFinished in 0.000354888 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2817.79 tests/s, 14088.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyevqe6h9\nStarted\n.\nFinished in 0.000390033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2563.89 tests/s, 12819.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph5dmguze\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmph5dmguze.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004612212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.82 tests/s, 216.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpouxg_aer\nStarted\n.\nFinished in 0.000334569 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2988.92 tests/s, 14944.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzt24v5wr\nStarted\n.\nFinished in 0.00032425 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3084.04 tests/s, 15420.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph7sap6xv\nStarted\n.\nFinished in 0.000340319 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2938.42 tests/s, 14692.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu4e2o3sw\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpu4e2o3sw.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004563049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.15 tests/s, 219.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfj1spnd\nStarted\n.\nFinished in 0.00031934 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3131.46 tests/s, 15657.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp76kf5k19\nStarted\n.\nFinished in 0.000369565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2705.88 tests/s, 13529.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsnuftq2b\nStarted\n.\nFinished in 0.00036665 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2727.40 tests/s, 13636.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqwt8cp6v\nStarted\n.\nFinished in 0.000387759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2578.92 tests/s, 12894.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ub2xfkj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp1ub2xfkj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.004675381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.89 tests/s, 213.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfbunx0sw\nStarted\n.\nFinished in 0.000393991 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2538.13 tests/s, 12690.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_981gkso\nStarted\n.\nFinished in 0.000389973 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2564.28 tests/s, 12821.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp0l27ff6\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpp0l27ff6.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005996474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.76 tests/s, 166.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcilfsr5n\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpcilfsr5n.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004704305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.57 tests/s, 212.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyfym7nly\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpyfym7nly.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.008055827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.13 tests/s, 124.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgl_qu7qw\nStarted\n.\nFinished in 0.000368032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2717.16 tests/s, 13585.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp23xvqs1j\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp23xvqs1j.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004495402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.45 tests/s, 222.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk87ykqh9\nStarted\n.\nFinished in 0.000383531 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2607.35 tests/s, 13036.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3td01fdj\nStarted\n.\nFinished in 0.000551618 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1812.85 tests/s, 9064.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpq4ygk1\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpqpq4ygk1.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004536149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.45 tests/s, 220.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprm19fm9k\nStarted\n.\nFinished in 0.00030813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3245.38 tests/s, 16226.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy7orrwcw\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpy7orrwcw.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005342265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.19 tests/s, 187.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6pccgvg_\nStarted\n.\nFinished in 0.000338096 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.74 tests/s, 14788.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3157x7i1\nStarted\n.\nFinished in 0.000366189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2730.83 tests/s, 13654.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1vhjyalu\nStarted\n.\nFinished in 0.000353104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.03 tests/s, 14160.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxlc6qmc1\nStarted\n.\nFinished in 0.000320052 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3124.49 tests/s, 15622.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpckxx03px\nStarted\n.\nFinished in 0.000331473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3016.84 tests/s, 15084.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7y6aplgn\nStarted\n.\nFinished in 0.000359696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2780.13 tests/s, 13900.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp30l3z4ql\nStarted\n.\nFinished in 0.000337816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.19 tests/s, 14800.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd5s6j4gp\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpd5s6j4gp.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004655384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.81 tests/s, 214.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplss56l19\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmplss56l19.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004940609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.40 tests/s, 202.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbnag6elv\nStarted\n.\nFinished in 0.000567688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1761.53 tests/s, 8807.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe2s13qy7\nStarted\n.\nFinished in 0.000360288 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2775.56 tests/s, 13877.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4e1_qqs_\nStarted\n.\nFinished in 0.000366249 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2730.38 tests/s, 13651.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4s46p3r0\nStarted\n.\nFinished in 0.00037744 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2649.43 tests/s, 13247.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdm3ncpj1\nStarted\n.\nFinished in 0.000373262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2679.08 tests/s, 13395.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1l1ell33\nStarted\n.\nFinished in 0.000363654 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2749.87 tests/s, 13749.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpizvi0eyx\nStarted\n.\nFinished in 0.000499729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2001.08 tests/s, 10005.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphu9qeohc\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmphu9qeohc.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004467761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.83 tests/s, 223.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsu8qmc5f\nStarted\n.\nFinished in 0.000420771 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2376.59 tests/s, 11882.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2_lfbj2v\nStarted\n.\nFinished in 0.000370668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2697.83 tests/s, 13489.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4iy90yf_\nStarted\n.\nFinished in 0.000363112 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2753.97 tests/s, 13769.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy8dig885\nStarted\n.\nFinished in 0.000297891 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3356.93 tests/s, 16784.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbamytu9u\nStarted\n.\nFinished in 0.000343146 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2914.21 tests/s, 14571.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1o75g8fi\nStarted\n.\nFinished in 0.000322116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3104.47 tests/s, 15522.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2akhddx5\nStarted\n.\nFinished in 0.000315083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3173.77 tests/s, 15868.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt8v0lclx\nStarted\n.\nFinished in 0.000302298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3307.99 tests/s, 16539.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpud6d4y3r\nStarted\n.\nFinished in 0.000302839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3302.08 tests/s, 16510.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    return x if n % x == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5c9_jz8v\nStarted\n.\nFinished in 0.0003035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3294.89 tests/s, 16474.46 assertions/s\n"
  exit_code: 0
  status: OK
