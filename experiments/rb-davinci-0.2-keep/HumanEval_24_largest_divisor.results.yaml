name: HumanEval_24_largest_divisor
language: ruby
results:
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5iwa1myt\nStarted\n.\nFinished in 0.000539121 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1854.87 tests/s, 9274.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdpe1r97y\nStarted\n.\nFinished in 0.00051868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1927.97 tests/s, 9639.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoqo2ntjz\nStarted\n.\nFinished in 0.001048858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    953.42 tests/s, 4767.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl5vvymad\nStarted\n.\nFinished in 0.000539421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1853.84 tests/s, 9269.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprx291wr1\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmprx291wr1.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2..2>\n===============================================================================\n\
    \nFinished in 0.01249318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.04 tests/s, 80.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy30moy6o\nStarted\n.\nFinished in 0.001311509 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    762.48 tests/s, 3812.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpndwjdof6\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpndwjdof6.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.017901258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.86 tests/s, 55.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi5bjza4h\nStarted\n.\nFinished in 0.001030722 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    970.19 tests/s, 4850.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwiw_cpv\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpmwiw_cpv.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.008177809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.28 tests/s, 122.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_w7dxa3w\nStarted\n.\nFinished in 0.000604887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1653.20 tests/s, 8266.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgcolg2dr\nStarted\n.\nFinished in 0.000915507 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1092.29 tests/s, 5461.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx7spffv6\nStarted\n.\nFinished in 0.000547703 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1825.81 tests/s, 9129.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    return x if n % x == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1asfb_ae\nStarted\n.\nFinished in 0.001724029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    580.04 tests/s, 2900.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_hw1oas\nStarted\n.\nFinished in 0.000954313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1047.87 tests/s, 5239.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp45qjrcbp\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp45qjrcbp.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.015384443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.00 tests/s, 65.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqes7fowi\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpqes7fowi.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012334588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.07 tests/s, 81.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgbcomz0o\nStarted\n.\nFinished in 0.00055276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1809.10 tests/s, 9045.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9wnbpqfz\nStarted\n.\nFinished in 0.001098454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    910.37 tests/s, 4551.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2j3egdje\nStarted\n.\nFinished in 0.001276849 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    783.18 tests/s, 3915.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3uh4oq21\nStarted\n.\nFinished in 0.000909353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1099.68 tests/s, 5498.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp17zjdcqj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp17zjdcqj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010178031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.25 tests/s, 98.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoboapeqw\nStarted\n.\nFinished in 0.0011736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    852.08 tests/s, 4260.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn4jci__n\nStarted\n.\nFinished in 0.000644235 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.23 tests/s, 7761.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdmb1a3s5\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpdmb1a3s5.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010970613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.15 tests/s, 91.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp912x7siv\nStarted\n.\nFinished in 0.000583453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1713.93 tests/s, 8569.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbgszuh0\nStarted\n.\nFinished in 0.000781837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1279.04 tests/s, 6395.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpays_g92m\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpays_g92m.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007575117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.01 tests/s, 132.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfxjhhjua\nStarted\n.\nFinished in 0.000639364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1564.05 tests/s, 7820.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmim51j3n\nStarted\n.\nFinished in 0.001757626 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    568.95 tests/s, 2844.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppk56d8lu\nStarted\n.\nFinished in 0.000653174 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1530.99 tests/s, 7654.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0eevdgpq\nStarted\n.\nFinished in 0.001341616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    745.37 tests/s, 3726.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvok01qpt\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpvok01qpt.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00839696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.09 tests/s, 119.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppkzwimvy\nStarted\n.\nFinished in 0.00125011 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    799.93 tests/s, 3999.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while n % divisor != 0\n    divisor -= 1\n  end\n  divisor\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu1pj4o5x\nStarted\n.\nFinished in 0.001355934 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    737.50 tests/s, 3687.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3lfwa6zs\nStarted\n.\nFinished in 0.0009151 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1092.78 tests/s, 5463.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgi25vxxn\nStarted\n.\nFinished in 0.000617716 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1618.87 tests/s, 8094.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcnb4fkgd\nStarted\n.\nFinished in 0.000799762 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1250.37 tests/s, 6251.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp35nsf4cm\nStarted\n.\nFinished in 0.001058371 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    944.85 tests/s, 4724.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp202qg518\nStarted\n.\nFinished in 0.001150794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    868.97 tests/s, 4344.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4b5qmnxe\nStarted\n.\nFinished in 0.001015584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    984.66 tests/s, 4923.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn3luqia4\nStarted\n.\nFinished in 0.000658141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1519.43 tests/s, 7597.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7a8lbiiq\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp7a8lbiiq.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008530122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.23 tests/s, 117.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr2u417b8\nStarted\n.\nFinished in 0.000713285 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1401.96 tests/s, 7009.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpksa4x6ws\nStarted\n.\nFinished in 0.000818358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1221.96 tests/s, 6109.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjh9ghc4j\nStarted\n.\nFinished in 0.001396956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    715.84 tests/s, 3579.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpffbvrao3\nStarted\n.\nFinished in 0.000662939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1508.43 tests/s, 7542.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpomvdk8zh\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpomvdk8zh.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012515959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.90 tests/s, 79.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzvwhxr1u\nStarted\n.\nFinished in 0.000786928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1270.76 tests/s, 6353.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv2loslos\nStarted\n.\nFinished in 0.001152189 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    867.91 tests/s, 4339.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).select\
    \ { |x| n % x == 0 }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkhrgbd6z\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpkhrgbd6z.rb:11:in `test_largest_divisor'\n\
    \      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_largest_divisor\n\
    \     10:     candidate = method(:largest_divisor)\n  => 11:     assert_equal(1,\
    \ candidate.call(3))\n     12:     assert_equal(1, candidate.call(7))\n     13:\
    \     assert_equal(5, candidate.call(10))\n     14:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.010141799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.60 tests/s, 98.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnkr128jd\nStarted\n.\nFinished in 0.000935774 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1068.63 tests/s, 5343.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4t0b76km\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4t0b76km.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01247437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.16 tests/s, 80.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmouzb79l\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpmouzb79l.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.010088545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.12 tests/s, 99.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpieosv1u1\nStarted\n.\nFinished in 0.000604271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1654.89 tests/s, 8274.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp30pp895t\nStarted\n.\nFinished in 0.000560098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1785.40 tests/s, 8927.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvbnfw721\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpvbnfw721.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009547753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.74 tests/s, 104.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9vtwncqo\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp9vtwncqo.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011894337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.07 tests/s, 84.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpftpq9dls\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpftpq9dls.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007836768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.60 tests/s, 127.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    return i if n % i == 0\n    i -= 1\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpctkvmrsg\nStarted\n.\nFinished in 0.001014022 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    986.17 tests/s, 4930.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjopqndr9\nStarted\n.\nFinished in 0.000741108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1349.33 tests/s, 6746.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    else\n      divisor -= 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg3922e8p\nStarted\n.\nFinished in 0.000915862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1091.87 tests/s, 5459.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ijkhxsz\nStarted\n.\nFinished in 0.001134283 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    881.61 tests/s, 4408.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx7y2281a\nStarted\n.\nFinished in 0.001051347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    951.16 tests/s, 4755.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gdx0yn5\nStarted\n.\nFinished in 0.000652862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1531.72 tests/s, 7658.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz2e4wr95\nStarted\n.\nFinished in 0.001287753 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    776.55 tests/s, 3882.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |num|\n    return num if n % num == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp13wnm8_e\nStarted\n.\nFinished in 0.000870258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1149.08 tests/s, 5745.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg7zxidmf\nStarted\n.\nFinished in 0.000929453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1075.90 tests/s, 5379.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk5wwr_c1\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpk5wwr_c1.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008770133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.02 tests/s, 114.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpii6wndbi\nStarted\n.\nFinished in 0.00093652 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1067.78 tests/s, 5338.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwdft_2ty\nStarted\n.\nFinished in 0.001437489 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    695.66 tests/s, 3478.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqysiyvg2\nStarted\n.\nFinished in 0.000545168 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1834.30 tests/s, 9171.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3w2oxax8\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp3w2oxax8.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.007567266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.15 tests/s, 132.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjm_4hqhb\nStarted\n.\nFinished in 0.000890701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1122.71 tests/s, 5613.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5m_x2sky\nStarted\n.\nFinished in 0.000908603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.59 tests/s, 5502.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbk1knhnp\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpbk1knhnp.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.016107076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.08 tests/s, 62.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfsd7gvih\nStarted\n.\nFinished in 0.00099856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.44 tests/s, 5007.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpml8phwfj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpml8phwfj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011570255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.43 tests/s, 86.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiglg8co7\nStarted\n.\nFinished in 0.000867098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1153.27 tests/s, 5766.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvsyqqs8y\nStarted\n.\nFinished in 0.00084825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1178.90 tests/s, 5894.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn94y6kiu\nStarted\n.\nFinished in 0.001510338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    662.10 tests/s, 3310.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxn3o175k\nStarted\n.\nFinished in 0.000899591 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1111.62 tests/s, 5558.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0r_x5j9a\nStarted\n.\nFinished in 0.001019176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    981.18 tests/s, 4905.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu0d7epdj\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpu0d7epdj.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010124693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.77 tests/s, 98.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpptbyu2hn\nStarted\n.\nFinished in 0.001146041 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    872.57 tests/s, 4362.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr4_gkmay\nStarted\n.\nFinished in 0.000874089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1144.05 tests/s, 5720.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3wh8a8rk\nStarted\n.\nFinished in 0.000616459 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1622.17 tests/s, 8110.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpec0i4_7b\nStarted\n.\nFinished in 0.000848879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1178.02 tests/s, 5890.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    if n % x == 0\n      return x\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz8kvg7j_\nStarted\n.\nFinished in 0.001298034 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    770.40 tests/s, 3851.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp66abfygu\nStarted\n.\nFinished in 0.000539209 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1854.57 tests/s, 9272.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmv9zzz7v\nStarted\n.\nFinished in 0.000881426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.53 tests/s, 5672.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6qpdfp79\nStarted\n.\nFinished in 0.001016176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    984.08 tests/s, 4920.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpal2kxyuj\nStarted\n.\nFinished in 0.000684516 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1460.89 tests/s, 7304.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp12xhkbw9\nStarted\n.\nFinished in 0.000575364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1738.03 tests/s, 8690.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf3zu0lcj\nStarted\n.\nFinished in 0.00070644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1415.55 tests/s, 7077.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0apz_hx\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmph0apz_hx.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008205244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.87 tests/s, 121.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxfuyf_53\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpxfuyf_53.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010499232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.25 tests/s, 95.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxgir4izf\nStarted\n.\nFinished in 0.0009087 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1100.47 tests/s, 5502.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp8gk4t64\nStarted\n.\nFinished in 0.001480369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    675.51 tests/s, 3377.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbk5vgyb5\nStarted\n.\nFinished in 0.000619392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1614.49 tests/s, 8072.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9a3b7y_a\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp9a3b7y_a.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00930059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.52 tests/s, 107.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr86to12l\nStarted\n.\nFinished in 0.000735158 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1360.25 tests/s, 6801.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9aoowild\nStarted\n.\nFinished in 0.00078515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1273.64 tests/s, 6368.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpksdcp82u\nStarted\n.\nFinished in 0.001229257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    813.50 tests/s, 4067.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8pq1x7ft\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp8pq1x7ft.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010611546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.24 tests/s, 94.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoj008egt\nStarted\n.\nFinished in 0.001482663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    674.46 tests/s, 3372.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp_vhlsr6\nStarted\n.\nFinished in 0.000634985 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1574.84 tests/s, 7874.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2wnug3oj\nStarted\n.\nFinished in 0.000721485 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1386.03 tests/s, 6930.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3jywkbst\nStarted\n.\nFinished in 0.000776829 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.28 tests/s, 6436.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgkq6gcdx\nStarted\n.\nFinished in 0.000888673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1125.27 tests/s, 5626.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp96mnb98d\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp96mnb98d.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.0079227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.22 tests/s, 126.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeg0d09fi\nStarted\n.\nFinished in 0.001114296 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    897.43 tests/s, 4487.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4qo45ha0\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4qo45ha0.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.013835625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.28 tests/s, 72.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpux3371k4\nStarted\n.\nFinished in 0.001121334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    891.79 tests/s, 4458.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr7ic9luf\nStarted\n.\nFinished in 0.000671659 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1488.85 tests/s, 7444.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpljpc_j0v\nStarted\n.\nFinished in 0.000852525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1172.99 tests/s, 5864.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1nfj8u7a\nStarted\n.\nFinished in 0.000528287 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1892.91 tests/s, 9464.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpipgh8e41\nStarted\n.\nFinished in 0.001317715 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    758.89 tests/s, 3794.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp715i44gk\nStarted\n.\nFinished in 0.000586693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1704.47 tests/s, 8522.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpafh1wksa\nStarted\n.\nFinished in 0.000798764 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1251.93 tests/s, 6259.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpek8954qx\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpek8954qx.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010339699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.71 tests/s, 96.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp__xkoto0\nStarted\n.\nFinished in 0.000579399 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1725.93 tests/s, 8629.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxo1hfnio\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpxo1hfnio.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011009643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.83 tests/s, 90.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr1ugomas\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpr1ugomas.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008593222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.37 tests/s, 116.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6mum_4j5\nStarted\n.\nFinished in 0.001067211 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    937.02 tests/s, 4685.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxlcfq3qa\nStarted\n.\nFinished in 0.001312553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    761.87 tests/s, 3809.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpid8_96y0\nStarted\n.\nFinished in 0.001089801 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    917.60 tests/s, 4587.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptg180c0m\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmptg180c0m.rb:15:in `test_largest_divisor'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_largest_divisor\n\
    \     14:     candidate = method(:largest_divisor)\n  => 15:     assert_equal(1,\
    \ candidate.call(3))\n     16:     assert_equal(1, candidate.call(7))\n     17:\
    \     assert_equal(5, candidate.call(10))\n     18:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2..2>\n===============================================================================\n\
    \nFinished in 0.007187189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.14 tests/s, 139.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptc6kww8z\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmptc6kww8z.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008349557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.77 tests/s, 119.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    if n % i == 0\n      return i\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_5n78mq\nStarted\n.\nFinished in 0.001515143 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    660.00 tests/s, 3300.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx_9q4m7f\nStarted\n.\nFinished in 0.000924746 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1081.38 tests/s, 5406.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp06iu5d0b\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp06iu5d0b.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.015012235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.61 tests/s, 66.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplvh8f25f\nStarted\n.\nFinished in 0.00053492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1869.44 tests/s, 9347.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplornhoe0\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmplornhoe0.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012368232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.85 tests/s, 80.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjl40rtx\nStarted\n.\nFinished in 0.000814589 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1227.61 tests/s, 6138.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4dswpqqc\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp4dswpqqc.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009720292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.88 tests/s, 102.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    return i if n % i == 0\n    i -= 1\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
    \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
    \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
    \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpws_vej__\nStarted\n.\nFinished in 0.000565129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1769.51 tests/s, 8847.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkyjy10wh\nStarted\n.\nFinished in 0.000653936 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1529.20 tests/s, 7646.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfhsk_40a\nStarted\n.\nFinished in 0.001503086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    665.30 tests/s, 3326.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsh3wluzo\nStarted\n.\nFinished in 0.001263558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    791.42 tests/s, 3957.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb38nsjmc\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpb38nsjmc.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.020237781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.41 tests/s, 49.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp918j866t\nStarted\n.\nFinished in 0.001067322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    936.92 tests/s, 4684.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvnq8m2em\nStarted\n.\nFinished in 0.001084168 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    922.37 tests/s, 4611.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbprn6fy3\nStarted\n.\nFinished in 0.00094387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1059.47 tests/s, 5297.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqk9s0oa5\nStarted\n.\nFinished in 0.000805012 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1242.22 tests/s, 6211.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxz_yhmy5\nStarted\n.\nFinished in 0.000851788 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1174.00 tests/s, 5870.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_41c3hc\nStarted\n.\nFinished in 0.001060372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    943.07 tests/s, 4715.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz_q0lf3n\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpz_q0lf3n.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011813355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.65 tests/s, 84.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbbw2ycmz\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpbbw2ycmz.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009820109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.83 tests/s, 101.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |divisor|\n    return divisor if n % divisor == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7tjgbbgb\nStarted\n.\nFinished in 0.000623561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1603.69 tests/s, 8018.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_wp3fa_\nStarted\n.\nFinished in 0.000569083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1757.21 tests/s, 8786.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvasv7w5n\nStarted\n.\nFinished in 0.000814174 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1228.24 tests/s, 6141.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcfsv51yz\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpcfsv51yz.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01361667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.44 tests/s, 73.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcat8ptol\nStarted\n.\nFinished in 0.000531461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1881.61 tests/s, 9408.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnt7um134\nStarted\n.\nFinished in 0.000647856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1543.55 tests/s, 7717.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9j_2mpug\nStarted\n.\nFinished in 0.001108616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    902.03 tests/s, 4510.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphm_jxchw\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmphm_jxchw.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007915703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.33 tests/s, 126.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsu_g7x9x\nStarted\n.\nFinished in 0.001242397 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    804.90 tests/s, 4024.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1...n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppvmkc7cp\nStarted\n.\nFinished in 0.000956964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1044.97 tests/s, 5224.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp74ov0z09\nStarted\n.\nFinished in 0.00105728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    945.82 tests/s, 4729.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp51m_817k\nStarted\n.\nFinished in 0.000673781 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1484.16 tests/s, 7420.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcn4r16c8\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpcn4r16c8.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.012442456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.37 tests/s, 80.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8iglqf4q\nStarted\n.\nFinished in 0.001703586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    587.00 tests/s, 2934.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu2ik4u9z\nStarted\n.\nFinished in 0.000547591 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1826.18 tests/s, 9130.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaojfet_g\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpaojfet_g.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.015022646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.57 tests/s, 66.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbn376ygb\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpbn376ygb.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008296453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.53 tests/s, 120.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (1..n).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbrodaaab\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpbrodaaab.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<3>\n===============================================================================\n\
    \nFinished in 0.007926004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.17 tests/s, 126.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkj_utk9d\nStarted\n.\nFinished in 0.001492238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    670.13 tests/s, 3350.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp2nchmi1\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpp2nchmi1.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00902049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.86 tests/s, 110.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5apjhily\nStarted\n.\nFinished in 0.000535394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1867.78 tests/s, 9338.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzp_dfj46\nStarted\n.\nFinished in 0.000504239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1983.19 tests/s, 9915.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjyphjqm4\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpjyphjqm4.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008275193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.84 tests/s, 120.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuwbk5mhb\nStarted\n.\nFinished in 0.001111663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    899.55 tests/s, 4497.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp76alv8sn\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp76alv8sn.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01131835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.35 tests/s, 88.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqib9158r\nStarted\n.\nFinished in 0.000554757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1802.59 tests/s, 9012.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw2ww1oxr\nStarted\n.\nFinished in 0.00089103 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1122.30 tests/s, 5611.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj7ydv19a\nStarted\n.\nFinished in 0.001694809 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    590.04 tests/s, 2950.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_nd65sl\nStarted\n.\nFinished in 0.000522204 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1914.96 tests/s, 9574.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyhtd28ls\nStarted\n.\nFinished in 0.000913071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1095.21 tests/s, 5476.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphi5f4cqz\nStarted\n.\nFinished in 0.001280924 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    780.69 tests/s, 3903.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfqpwwkxi\nStarted\n.\nFinished in 0.00115156 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    868.39 tests/s, 4341.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkvvmheis\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmpkvvmheis.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009180544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.93 tests/s, 108.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7nabicvf\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp7nabicvf.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012613693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.28 tests/s, 79.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdk3or3un\nStarted\n.\nFinished in 0.000803358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1244.78 tests/s, 6223.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n\
    \ - 1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate\
    \ = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n    assert_equal(1,\
    \ candidate.call(7))\n    assert_equal(5, candidate.call(10))\n    assert_equal(50,\
    \ candidate.call(100))\n    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcp21dm2p\nStarted\n.\nFinished in 0.000963561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1037.82 tests/s, 5189.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbi0g9_yw\nStarted\n.\nFinished in 0.000517125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1933.77 tests/s, 9668.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm_c4_ovf\nStarted\n.\nFinished in 0.000991032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1009.05 tests/s, 5045.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps0js5ojg\nStarted\n.\nFinished in 0.000896207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1115.81 tests/s, 5579.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  divisor\
    \ = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcjtqf1iq\nStarted\n.\nFinished in 0.000514233 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1944.64 tests/s, 9723.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4qhxf90d\nStarted\n.\nFinished in 0.00050908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1964.33 tests/s, 9821.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_rvpfc67\nStarted\nF\n===============================================================================\n\
    Failure: test_largest_divisor(TestHumanEval)\n/tmp/tmp_rvpfc67.rb:13:in `test_largest_divisor'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_largest_divisor\n\
    \     12:     candidate = method(:largest_divisor)\n  => 13:     assert_equal(1,\
    \ candidate.call(3))\n     14:     assert_equal(1, candidate.call(7))\n     15:\
    \     assert_equal(5, candidate.call(10))\n     16:     assert_equal(50, candidate.call(100))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006850975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.96 tests/s, 145.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4slhs_xh\nStarted\n.\nFinished in 0.000575126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1738.75 tests/s, 8693.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0lh0n_0m\nStarted\n.\nFinished in 0.000485951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2057.82 tests/s, 10289.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsazrecxw\nStarted\n.\nFinished in 0.000567845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1761.04 tests/s, 8805.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcqrlk3kz\nStarted\n.\nFinished in 0.000705245 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1417.95 tests/s, 7089.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdjuo1f2a\nStarted\n.\nFinished in 0.000580576 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1722.43 tests/s, 8612.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp63ppvv75\nStarted\n.\nFinished in 0.00077208 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1295.20 tests/s, 6476.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  i\
    \ = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -=\
    \ 1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_largest_divisor\n    candidate = method(:largest_divisor)\n    assert_equal(1,\
    \ candidate.call(3))\n    assert_equal(1, candidate.call(7))\n    assert_equal(5,\
    \ candidate.call(10))\n    assert_equal(50, candidate.call(100))\n    assert_equal(7,\
    \ candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcei4psk9\nStarted\n.\nFinished in 0.000612262 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1633.29 tests/s, 8166.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsqowt3ad\nStarted\n.\nFinished in 0.000579978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1724.20 tests/s, 8621.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp179jfltz\nStarted\n.\nFinished in 0.000524505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1906.56 tests/s, 9532.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n# >>> largest_divisor(15)\n# 5\ndef largest_divisor(n)\n  (n-1).downto(1)\
    \ do |x|\n    return x if n % x == 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_largest_divisor\n    candidate = method(:largest_divisor)\n\
    \    assert_equal(1, candidate.call(3))\n    assert_equal(1, candidate.call(7))\n\
    \    assert_equal(5, candidate.call(10))\n    assert_equal(50, candidate.call(100))\n\
    \    assert_equal(7, candidate.call(49))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc8z5adda\nStarted\n.\nFinished in 0.001167581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    856.47 tests/s, 4282.36 assertions/s\n"
  exit_code: 0
  status: OK
