name: HumanEval_95_check_dict_case
language: ruby
results:
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.upcase != key\n\
    \      upper = false\n    end\n    if key.downcase != key\n      lower = false\n\
    \    end\n  end\n  return lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzbpnal3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzbpnal3s.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009231755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.32 tests/s, 324.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptk5a8yl2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptk5a8yl2.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006862229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.73 tests/s, 437.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmbir36cv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmbir36cv.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.020999771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.62 tests/s, 47.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptrwdgahj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptrwdgahj.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009531162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.92 tests/s, 209.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  elsif dict.keys.all?\
    \ {|k| k.is_a? String}\n    return dict.keys.all? {|k| k.downcase == k} || dict.keys.all?\
    \ {|k| k.upcase == k}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmptn39tkdw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptn39tkdw.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006937945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.13 tests/s, 432.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key.downcase == key}\
    \ || dict.keys.all? {|key| key.upcase == key}\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpitxqm61n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpitxqm61n.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015970075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.62 tests/s, 187.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  elsif dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpba36m1on\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpba36m1on.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015535315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.37 tests/s, 193.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  if lower_case || upper_case\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7wsrwv1d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7wsrwv1d.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008041873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.35 tests/s, 373.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwxiizfm5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwxiizfm5.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006861617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.74 tests/s, 437.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgvn15l93\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgvn15l93.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.007594442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.68 tests/s, 526.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|x| x.is_a? String}\n    if dict.keys.all? {|x| x.downcase == x}\n      return\
    \ true\n    elsif dict.keys.all? {|x| x.upcase == x}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctxpqpr0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpctxpqpr0.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014726685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.90 tests/s, 203.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.downcase == k } || dict.keys.all? { |k| k.upcase == k }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp74b4irl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp74b4irl.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00784863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.41 tests/s, 382.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppzmg6_l6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppzmg6_l6.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.006986417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.13 tests/s, 572.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String and key.upcase\
    \ == key } or\n  dict.keys.all? { |key| key.is_a? String and key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwh95vsf2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwh95vsf2.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012485916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.09 tests/s, 240.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5t8ddn5a\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5t8ddn5a.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007670051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.38 tests/s, 130.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wz0zjt2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8wz0zjt2.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01771243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.46 tests/s, 169.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbw8an7c7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbw8an7c7.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00769961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.88 tests/s, 389.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      dict.each do |key, value|\n\
    \        if key.downcase == key\n          return false\n        end\n      end\n\
    \    elsif key.downcase == key\n      dict.each do |key, value|\n        if key.upcase\
    \ == key\n          return false\n        end\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp713qvk97\nStarted\n.\nFinished in 0.001629116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    613.83 tests/s, 4296.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return true\n      elsif key.downcase ==\
    \ key\n        return true\n      else\n        return false\n      end\n    else\n\
    \      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpyaoh6p44\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyaoh6p44.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01610181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.10 tests/s, 124.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    elsif key.downcase == key\n      return false if key.upcase != key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbielffk8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbielffk8.rb:29:in `test_check_dict_case'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_check_dict_case\n\
    \     28:     candidate = method(:check_dict_case)\n  => 29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.008806664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.55 tests/s, 113.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String } && dict.keys.all?\
    \ { |key| key.downcase == key || key.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_p8m0p66\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_p8m0p66.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012497789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.01 tests/s, 160.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz06ry_3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz06ry_3s.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.007501045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.31 tests/s, 533.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0pn8zcz2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0pn8zcz2.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.011872737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.23 tests/s, 84.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcgkidvhv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpcgkidvhv.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007049617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.85 tests/s, 425.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n    if dict.empty?\n        return false\n    end\n\
    \    if dict.keys.all? {|key| key.is_a? String}\n        if dict.keys.all? {|key|\
    \ key.upcase == key}\n            return true\n        elsif dict.keys.all? {|key|\
    \ key.downcase == key}\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp97pvkmb_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp97pvkmb_.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008470625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.06 tests/s, 354.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |k,v|\n    if k.downcase != k\n     \
    \ lower = false\n    end\n    if k.upcase != k\n      upper = false\n    end\n\
    \  end\n  lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk894u8zl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk894u8zl.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011509716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.88 tests/s, 260.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa7omb8ub\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa7omb8ub.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008832581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.22 tests/s, 226.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k == k.downcase } || dict.keys.all? { |k| k == k.upcase }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi05jfy5e\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi05jfy5e.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007386921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.37 tests/s, 406.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qjuvax8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9qjuvax8.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011501016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.95 tests/s, 173.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp2gwnh923\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2gwnh923.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009715321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.93 tests/s, 205.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase == key\n        return false\n      else\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwol46vs7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwol46vs7.rb:26:in `test_check_dict_case'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_check_dict_case\n\
    \     25:     candidate = method(:check_dict_case)\n  => 26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.012802637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.11 tests/s, 78.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk216ioy0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk216ioy0.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007000003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.86 tests/s, 428.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp67zpnlfr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp67zpnlfr.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01237477 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.81 tests/s, 161.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? {|k| k.is_a?(String) && k.upcase ==\
    \ k} || dict.keys.all? {|k| k.is_a?(String) && k.downcase == k}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsxteo75x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsxteo75x.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011884227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.15 tests/s, 252.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key\n        return false\n      end\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphsdqqv1x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphsdqqv1x.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007030194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.24 tests/s, 426.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.upcase == key\n\
    \      return false if key.downcase == key\n    elsif key.downcase == key\n  \
    \    return false if key.upcase == key\n    else\n      return false\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4qqrva07\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4qqrva07.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.018218402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.89 tests/s, 109.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  if lower_case || upper_case\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjbgt9zzz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjbgt9zzz.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015715615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.63 tests/s, 190.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\n    return true\n  elsif dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7d5w5glo\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7d5w5glo.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008099257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.47 tests/s, 370.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl0ykw_nm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl0ykw_nm.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.021880192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.70 tests/s, 91.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.each do\
    \ |key|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoqu6__ky\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpoqu6__ky.rb:22:in `test_check_dict_case'\n\
    \     19:   def test_check_dict_case\n     20:     candidate = method(:check_dict_case)\n\
    \     21:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 22:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     23:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     24:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007879364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.91 tests/s, 253.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key == key.downcase}\n\
    \      return true\n    elsif dict.keys.all? {|key| key == key.upcase}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpspy34u_4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpspy34u_4.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014619509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.40 tests/s, 205.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaozkf2_o\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpaozkf2_o.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008766088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.08 tests/s, 228.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpphghu0kl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpphghu0kl.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010691464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.53 tests/s, 280.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzzz2h4ve\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzzz2h4ve.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013007914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.88 tests/s, 230.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp9k38ewhb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9k38ewhb.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012507334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.95 tests/s, 159.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps68ajals\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmps68ajals.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008225152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.58 tests/s, 243.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr271fxsr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr271fxsr.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008658911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.49 tests/s, 346.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? { |k| k.downcase == k }\n    elsif key.downcase\
    \ == key\n      return false if dict.keys.any? { |k| k.upcase == k }\n    else\n\
    \      return false\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpm084sie5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpm084sie5.rb:32:in `test_check_dict_case'\n\
    \     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n  => 32:     assert_equal(false,\
    \ candidate.call({}))\n     33:   end\n     34: end\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016849734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.35 tests/s, 415.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each_key do |key|\n    if key.is_a? String\n\
    \      if key.upcase == key\n        return false if dict.each_key.any? {|k| k.downcase\
    \ == k}\n      elsif key.downcase == key\n        return false if dict.each_key.any?\
    \ {|k| k.upcase == k}\n      end\n    else\n      return false\n    end\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpno12u3sk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpno12u3sk.rb:31:in `test_check_dict_case'\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     34:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.007957004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.68 tests/s, 502.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ej55rue\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5ej55rue.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007384164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.42 tests/s, 270.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # Write your code here\n  if dict.empty?\n    return\
    \ false\n  end\n  lower = true\n  upper = true\n  dict.each do |key, value|\n\
    \    if key.upcase != key\n      upper = false\n    end\n    if key.downcase !=\
    \ key\n      lower = false\n    end\n  end\n  return lower || upper\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvzcaaizy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvzcaaizy.rb:33:in `test_check_dict_case'\n\
    \     30:     candidate = method(:check_dict_case)\n     31:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     36:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010992896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.97 tests/s, 272.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsxjslknj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsxjslknj.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013484117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.16 tests/s, 74.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsmkcsq39\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsmkcsq39.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.007660818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.53 tests/s, 130.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each_key do |key|\n    if key.downcase != key\
    \ && key.upcase != key\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpanfvlt7p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpanfvlt7p.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010104306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.97 tests/s, 197.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph3k7dczp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmph3k7dczp.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013037565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.70 tests/s, 230.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3b81zvxr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3b81zvxr.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009907317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.94 tests/s, 201.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxscpspz1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxscpspz1.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.008477394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.96 tests/s, 471.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key.downcase == key}\
    \ || dict.keys.all? {|key| key.upcase == key}\n  end\n  return false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppryfw3uc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppryfw3uc.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007976959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.36 tests/s, 376.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpsj050uiy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsj050uiy.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.012980846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.04 tests/s, 77.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpii8sd0rn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpii8sd0rn.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.018142228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.12 tests/s, 55.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return dict.keys.all? { |key| key.upcase ==\
    \ key } || dict.keys.all? { |key| key.downcase == key }\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphs7e7uao\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphs7e7uao.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008970472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.48 tests/s, 334.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf1e15wsu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpf1e15wsu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00911838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.67 tests/s, 219.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb5a53eun\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpb5a53eun.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00749252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.47 tests/s, 266.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    elsif key.upcase == key\n      return false if key.downcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi9l3jsao\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi9l3jsao.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00754783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.49 tests/s, 264.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key\n      return false\n    end\n \
    \ end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4702iwug\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4702iwug.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010778345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.78 tests/s, 278.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8xrvkgvx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8xrvkgvx.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.009962261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.38 tests/s, 100.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkfz2nll8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkfz2nll8.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.010173915 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.29 tests/s, 98.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase != key && key.downcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp6cle0mvg\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6cle0mvg.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011296788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.52 tests/s, 177.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? {|key| key.is_a?(String) && key.upcase == key}\n \
    \   return true\n  elsif keys.all? {|key| key.is_a?(String) && key.downcase ==\
    \ key}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkmg56u4e\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkmg56u4e.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010156848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.46 tests/s, 295.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.downcase != key\
    \ && key.upcase != key\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp90mo2umr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp90mo2umr.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008562721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.79 tests/s, 233.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphjtpnn54\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphjtpnn54.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013311962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.12 tests/s, 225.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n   \
    \ if key.downcase == key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpob92e9fb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpob92e9fb.rb:28:in `test_check_dict_case'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_check_dict_case\n\
    \     27:     candidate = method(:check_dict_case)\n  => 28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.014482983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.05 tests/s, 69.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  all_lower\
    \ = true\n  all_upper = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      all_lower = false\n    end\n    if key.upcase != key\n      all_upper\
    \ = false\n    end\n  end\n  return all_lower || all_upper\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwqilxuux\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwqilxuux.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008343377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.86 tests/s, 359.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp74fvj281\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp74fvj281.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.009112241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.74 tests/s, 438.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      return true\n      elsif key == key.upcase\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9xs21pj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpo9xs21pj.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008427557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.66 tests/s, 237.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    elsif key.upcase == key\n      return false if key.downcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjqm4tx_8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjqm4tx_8.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010481185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.41 tests/s, 190.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key == key.downcase\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key == key.upcase }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6mvqgfc5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6mvqgfc5.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.017877899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.93 tests/s, 167.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? { |k| k.downcase == k }\n    else\n    \
    \  return false if dict.keys.any? { |k| k.upcase == k }\n    end\n  end\n  true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt6npriod\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt6npriod.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.012808457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.07 tests/s, 312.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    if\
    \ dict.keys.all? {|key| key.downcase == key}\n      return true\n    elsif dict.keys.all?\
    \ {|key| key.upcase == key}\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpeimp7rgw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpeimp7rgw.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014913426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.05 tests/s, 201.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgc1uvvcw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgc1uvvcw.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.020929374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.78 tests/s, 143.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2epawm4o\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2epawm4o.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.009632788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.81 tests/s, 415.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxyt080cz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxyt080cz.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013982727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.52 tests/s, 214.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbrcn_3bx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbrcn_3bx.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.009000177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.11 tests/s, 111.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3g6v2w7b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3g6v2w7b.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016803886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.51 tests/s, 119.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp99qmr3pm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp99qmr3pm.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007419937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.77 tests/s, 269.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ == key\n      lower_case = false\n    end\n    if key.downcase == key\n    \
    \  upper_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1q6sel7o\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1q6sel7o.rb:33:in `test_check_dict_case'\n\
    \     30:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     31:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     32:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 33:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     36:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.010800566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.59 tests/s, 370.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |k,v|\n    if k.downcase != k\n     \
    \ lower = false\n    end\n    if k.upcase != k\n      upper = false\n    end\n\
    \  end\n  if lower || upper\n    return true\n  end\n  return false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvelqv96d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvelqv96d.rb:35:in `test_check_dict_case'\n\
    \     32:     candidate = method(:check_dict_case)\n     33:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     37:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     38:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011283051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.63 tests/s, 265.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5a8ewo4d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5a8ewo4d.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012057341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.94 tests/s, 165.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key\n      return false\n    end\n \
    \ end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjymkm4la\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjymkm4la.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010086905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.14 tests/s, 297.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      dict.each do |key, value|\n\
    \        if key.downcase == key\n          return false\n        end\n      end\n\
    \    elsif key.downcase == key\n      dict.each do |key, value|\n        if key.upcase\
    \ == key\n          return false\n        end\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpduna_cia\nStarted\n.\nFinished in 0.000555264 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1800.95 tests/s, 12606.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzk89hbb_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzk89hbb_.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008146811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.75 tests/s, 245.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6wdz_wvx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6wdz_wvx.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.017338994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.67 tests/s, 115.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? {|k| k.upcase == k} || dict.keys.all?\
    \ {|k| k.downcase == k}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp56si6f6e\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp56si6f6e.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011686905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.57 tests/s, 256.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppi03hi0y\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppi03hi0y.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00930691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.45 tests/s, 429.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7mjf3p3x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7mjf3p3x.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012483255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.11 tests/s, 160.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.downcase !=\
    \ key\n      lower = false\n    end\n    if key.upcase != key\n      upper = false\n\
    \    end\n  end\n  if lower || upper\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9087ipx_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9087ipx_.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013032399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.73 tests/s, 230.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.upcase } || dict.keys.all?\
    \ { |key| key == key.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpav67_2z6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpav67_2z6.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.020188354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.53 tests/s, 148.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false if k.downcase == k\n    else\n\
    \      return false if k.upcase == k\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpru9jz570\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpru9jz570.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008310446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.33 tests/s, 240.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.upcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.downcase == key}\n   \
    \   return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0jhdinh_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0jhdinh_.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011325258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.30 tests/s, 264.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbv0efv44\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbv0efv44.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.017812276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.14 tests/s, 224.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4o_xxv8r\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4o_xxv8r.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00848927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.80 tests/s, 471.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc4bw8exb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc4bw8exb.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011627247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.00 tests/s, 86.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg_r52qat\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg_r52qat.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.012619414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.24 tests/s, 316.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false if k.downcase == k\n    else\n\
    \      return false if k.upcase == k\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkl7k0ehs\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkl7k0ehs.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006796983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.12 tests/s, 294.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2zlcjxd2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2zlcjxd2.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.021385848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.76 tests/s, 46.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpqh37vpb_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqh37vpb_.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011457307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.28 tests/s, 174.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9pzpjk66\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9pzpjk66.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007592458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.71 tests/s, 395.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false if dict.key?(key.downcase)\n\
    \      elsif key.downcase == key\n        return false if dict.key?(key.upcase)\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp5adiyu2d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5adiyu2d.rb:31:in `test_check_dict_case'\n\
    \     28:   def test_check_dict_case\n     29:     candidate = method(:check_dict_case)\n\
    \     30:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     32:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     33:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011024846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.70 tests/s, 181.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt11vkswx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt11vkswx.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012463342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.24 tests/s, 160.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppuunqykl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppuunqykl.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009515142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.10 tests/s, 315.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false if dict.key?(key.downcase)\n\
    \      else\n        return false if dict.key?(key.upcase)\n      end\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ybtudh8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9ybtudh8.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008491028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.77 tests/s, 235.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6fb_eseh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6fb_eseh.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013836747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.27 tests/s, 216.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |k,v|\n    if k.is_a?(String)\n    \
    \  if k.upcase == k\n        return false if dict.keys.any? {|key| key.downcase\
    \ == key}\n      else\n        return false if dict.keys.any? {|key| key.upcase\
    \ == key}\n      end\n    else\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp131xxumf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp131xxumf.rb:31:in `test_check_dict_case'\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     34:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00917476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.99 tests/s, 435.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg915_r4f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg915_r4f.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008131458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.98 tests/s, 245.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.downcase } || dict.keys.all?\
    \ { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpnoptc4ko\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnoptc4ko.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009644441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.69 tests/s, 311.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp32hijimd\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp32hijimd.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009651016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.62 tests/s, 207.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy8p6pryu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy8p6pryu.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011762184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.02 tests/s, 255.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1o2sa7em\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1o2sa7em.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.010597509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.36 tests/s, 377.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuanyig5m\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuanyig5m.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.017545836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.99 tests/s, 170.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n   \
    \ if key.downcase == key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_8ggo8sg\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_8ggo8sg.rb:28:in `test_check_dict_case'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_check_dict_case\n\
    \     27:     candidate = method(:check_dict_case)\n  => 28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.009672242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.39 tests/s, 103.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0r6r2tr7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0r6r2tr7.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.010640677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.98 tests/s, 375.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.downcase !=\
    \ key || key.upcase != key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpte2vla9c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpte2vla9c.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.008890341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.48 tests/s, 112.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpifolz9cq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpifolz9cq.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.0157317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.57 tests/s, 190.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    elsif key.downcase == key\n      return false if key.upcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6cpdofc6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6cpdofc6.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012489161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.07 tests/s, 160.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String } && dict.keys.all?\
    \ { |key| key.upcase == key || key.downcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiakn1ia0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpiakn1ia0.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008131377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.98 tests/s, 245.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk57iv6gc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk57iv6gc.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007256685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.80 tests/s, 275.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpy0qq791k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy0qq791k.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.018551007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.91 tests/s, 107.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? {|k| k.downcase == k}\n    elsif key.downcase\
    \ == key\n      return false if dict.keys.any? {|k| k.upcase == k}\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnv354hgm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnv354hgm.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.008782019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.87 tests/s, 455.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfyodf6bz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfyodf6bz.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010859779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.08 tests/s, 184.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg9c_imsh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg9c_imsh.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009256858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.03 tests/s, 324.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi6ekm83s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi6ekm83s.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015081079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.31 tests/s, 198.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsym67gcf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsym67gcf.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007330988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.41 tests/s, 272.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2elaon7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpo2elaon7.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007572323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.06 tests/s, 264.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyo4r8g48\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyo4r8g48.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009014099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.94 tests/s, 332.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.is_a?(String)\n      if k.downcase != k\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfq4gna18\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfq4gna18.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015755324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.47 tests/s, 190.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr1gcemju\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr1gcemju.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013566586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.71 tests/s, 221.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp43i2vecc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp43i2vecc.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011145367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.72 tests/s, 179.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfmqns92f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfmqns92f.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.022678105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.10 tests/s, 132.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  else\n    dict.each\
    \ do |key, value|\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpay5vj_0v\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpay5vj_0v.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.017513342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.10 tests/s, 114.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.downcase != k && k.upcase != k\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpauh5mufz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpauh5mufz.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011434175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.46 tests/s, 174.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpacdbzm3b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpacdbzm3b.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.007943687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.89 tests/s, 503.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpefw3d4v8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpefw3d4v8.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00838319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.29 tests/s, 238.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false if dict.key?(key.downcase)\n      elsif key.downcase == key\n\
    \        return false if dict.key?(key.upcase)\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj81kijaj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj81kijaj.rb:34:in `test_check_dict_case'\n\
    \     31:   def test_check_dict_case\n     32:     candidate = method(:check_dict_case)\n\
    \     33:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 34:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     35:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     36:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     37:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011295948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.53 tests/s, 177.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpltpv7s82\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpltpv7s82.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013091067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.39 tests/s, 152.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.to_s.downcase == key }\
    \ || dict.keys.all? { |key| key.to_s.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprkc3jpy7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprkc3jpy7.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016620473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.17 tests/s, 180.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2cjcsicl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2cjcsicl.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01148579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.06 tests/s, 87.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwrcakcq5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwrcakcq5.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012676914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.88 tests/s, 157.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgcgv5h_c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgcgv5h_c.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.009130562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.52 tests/s, 109.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyoy4n4j3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyoy4n4j3.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.008478453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.95 tests/s, 471.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp46ryyiyo\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp46ryyiyo.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012880213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.64 tests/s, 155.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmphmmc7hef\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphmmc7hef.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.014785223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.64 tests/s, 67.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|k| k.downcase == k}\n    return true\n  elsif dict.keys.all? {|k| k.upcase\
    \ == k}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpswyfxt42\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpswyfxt42.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013343219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.94 tests/s, 224.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfy77q8xt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfy77q8xt.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01091005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.66 tests/s, 183.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|k| k.downcase == k}\n    return true\n  elsif dict.keys.all? {|k| k.upcase\
    \ == k}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmr00y6i6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmr00y6i6.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011869417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.25 tests/s, 252.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp3jv6r0n2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3jv6r0n2.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011369043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.96 tests/s, 175.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7gnay_x3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7gnay_x3.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.010299576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.09 tests/s, 388.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcpb5ewvc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpcpb5ewvc.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.014383184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.53 tests/s, 69.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.upcase != key && key.downcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz51n2c1q\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz51n2c1q.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009115985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.70 tests/s, 219.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnfus_k4f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnfus_k4f.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014755637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.77 tests/s, 135.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      return true\n      elsif key == key.upcase\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsmtzh43f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsmtzh43f.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007823874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.81 tests/s, 255.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqlee80rc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqlee80rc.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016926578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.08 tests/s, 118.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.upcase\
    \ != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9gw5l2y\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpf9gw5l2y.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008255717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.13 tests/s, 242.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.upcase } || dict.keys.all?\
    \ { |key| key == key.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpc_9wemyy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc_9wemyy.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008034534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.46 tests/s, 373.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false\n    elsif k.downcase ==\
    \ k\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbjh0j2fn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbjh0j2fn.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.008198617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.97 tests/s, 121.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjm1aail0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjm1aail0.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.02094731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.74 tests/s, 95.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.upcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7btizscn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7btizscn.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013266033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.38 tests/s, 226.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\
    \ && key.downcase == key\n      return true\n    elsif key.is_a?(String) && key.upcase\
    \ == key\n      return true\n    else\n      return false\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5fc_seqc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5fc_seqc.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015831466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.17 tests/s, 126.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmps6uh5z2e\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmps6uh5z2e.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00819139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.08 tests/s, 244.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpgdl0vt8b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgdl0vt8b.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008051934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.19 tests/s, 248.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp06qid1ub\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp06qid1ub.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011437823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.43 tests/s, 174.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvw3p_d66\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvw3p_d66.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.013065984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.53 tests/s, 306.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    dict.keys.all?\
    \ {|key| key == key.downcase} || dict.keys.all? {|key| key == key.upcase}\n  else\n\
    \    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxz_g3jel\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxz_g3jel.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009468026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.62 tests/s, 316.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3w9p96vt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3w9p96vt.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010004186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.96 tests/s, 299.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp29tkpbxv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp29tkpbxv.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008366497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.52 tests/s, 239.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if dict.key?(key.downcase)\n\
    \    else\n      return false if dict.key?(key.upcase)\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv0ils0qx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv0ils0qx.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009036746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.66 tests/s, 221.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.upcase\
    \ != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpshelriuf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpshelriuf.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013416469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.54 tests/s, 149.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.upcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.downcase == key}\n   \
    \   return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2warfian\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2warfian.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01309066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.39 tests/s, 229.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0nleeqhv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0nleeqhv.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008106759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.35 tests/s, 370.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    dict.keys.all?\
    \ {|key| key == key.downcase} || dict.keys.all? {|key| key == key.upcase}\n  else\n\
    \    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprde0wp_7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprde0wp_7.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.011238317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.98 tests/s, 266.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.keys.each\
    \ do |key|\n    if key.upcase == key\n      return false if dict.keys.any? { |k|\
    \ k.downcase == k }\n    else\n      return false if dict.keys.any? { |k| k.upcase\
    \ == k }\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpfaj8e58r\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfaj8e58r.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.015365836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.08 tests/s, 260.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    false\n  elsif dict.keys.all?\
    \ {|k| k.downcase == k}\n    true\n  elsif dict.keys.all? {|k| k.upcase == k}\n\
    \    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_tpjto3x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_tpjto3x.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.010572408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.59 tests/s, 283.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key == key.downcase}\
    \ || dict.keys.all? {|key| key == key.upcase}\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsspo3q0j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsspo3q0j.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.01683379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.40 tests/s, 178.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpmct9t3f7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmct9t3f7.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013395605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.65 tests/s, 149.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1gu35apa\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1gu35apa.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.016918674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.11 tests/s, 177.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmptg_gstp2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptg_gstp2.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.009217055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.49 tests/s, 216.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k == k.upcase } || dict.keys.all?\
    \ { |k| k == k.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpya76m4hb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpya76m4hb.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.013094192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.37 tests/s, 229.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmphr6f3fv9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphr6f3fv9.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.012643218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.09 tests/s, 79.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq726ugsc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpq726ugsc.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.008853866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.95 tests/s, 338.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05kfeb1y\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp05kfeb1y.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.0126705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.92 tests/s, 236.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    elsif key.downcase == key\n      return false if key.upcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7n253kx0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7n253kx0.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012951026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.21 tests/s, 154.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpd3br4ti1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpd3br4ti1.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00682858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.44 tests/s, 292.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.upcase != key\n\
    \      upper = false\n    end\n    if key.downcase != key\n      lower = false\n\
    \    end\n  end\n  if upper || lower\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3w5s_2yp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3w5s_2yp.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007355608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.95 tests/s, 407.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ikjchxr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1ikjchxr.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.014726545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.90 tests/s, 135.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.map(&:class).uniq.size == 1 && dict.keys.map(&:class).uniq\
    \ == [String]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ykjg9jh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4ykjg9jh.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.012054032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.96 tests/s, 165.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpydowo1i8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpydowo1i8.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00675436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.05 tests/s, 296.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgt3379jz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgt3379jz.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.010915826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.61 tests/s, 91.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1p92vvf9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1p92vvf9.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00631903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.25 tests/s, 158.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |k,v|\n    if k.downcase != k && k.upcase\
    \ != k\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnvftn2f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnnvftn2f.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007345674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.13 tests/s, 272.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxrl94eq1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxrl94eq1.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.016233229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.60 tests/s, 61.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3nhieqms\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3nhieqms.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.006639533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.61 tests/s, 150.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
