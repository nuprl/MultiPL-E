name: HumanEval_95_check_dict_case
language: ruby
results:
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.upcase != key\n\
    \      upper = false\n    end\n    if key.downcase != key\n      lower = false\n\
    \    end\n  end\n  return lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpkk1f1h_3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkk1f1h_3.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.015730657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.57 tests/s, 190.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0byrjgvs\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0byrjgvs.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004714375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.12 tests/s, 636.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggqnci_p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpggqnci_p.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004660934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.55 tests/s, 214.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa02i76kw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa02i76kw.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004821987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.38 tests/s, 414.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  elsif dict.keys.all?\
    \ {|k| k.is_a? String}\n    return dict.keys.all? {|k| k.downcase == k} || dict.keys.all?\
    \ {|k| k.upcase == k}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvfsbkx8b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvfsbkx8b.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004809143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.94 tests/s, 623.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key.downcase == key}\
    \ || dict.keys.all? {|key| key.upcase == key}\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5_hg1y6k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5_hg1y6k.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005894823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.64 tests/s, 508.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  elsif dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp55o9ayox\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp55o9ayox.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004861761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.69 tests/s, 617.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  if lower_case || upper_case\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf19bu0kt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpf19bu0kt.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005076745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.98 tests/s, 590.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt8badahg\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt8badahg.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005487688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.23 tests/s, 546.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpill_97vq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpill_97vq.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005097956 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.16 tests/s, 784.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|x| x.is_a? String}\n    if dict.keys.all? {|x| x.downcase == x}\n      return\
    \ true\n    elsif dict.keys.all? {|x| x.upcase == x}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9v54g3n9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9v54g3n9.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00488238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.82 tests/s, 614.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.downcase == k } || dict.keys.all? { |k| k.upcase == k }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwtdjmlf9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwtdjmlf9.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004707821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.41 tests/s, 637.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeetmpuyw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpeetmpuyw.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004588188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.95 tests/s, 871.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String and key.upcase\
    \ == key } or\n  dict.keys.all? { |key| key.is_a? String and key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9uev7car\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9uev7car.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005432395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.08 tests/s, 552.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmplfpelmbf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplfpelmbf.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005835863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.35 tests/s, 171.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp4h2kh56\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp4h2kh56.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004867052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.46 tests/s, 616.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphinpn7th\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphinpn7th.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005447933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.56 tests/s, 550.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      dict.each do |key, value|\n\
    \        if key.downcase == key\n          return false\n        end\n      end\n\
    \    elsif key.downcase == key\n      dict.each do |key, value|\n        if key.upcase\
    \ == key\n          return false\n        end\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpptcsbe3w\nStarted\n.\nFinished in 0.000378782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2640.04 tests/s, 18480.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return true\n      elsif key.downcase ==\
    \ key\n        return true\n      else\n        return false\n      end\n    else\n\
    \      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpede1hh12\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpede1hh12.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00492988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.84 tests/s, 405.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    elsif key.downcase == key\n      return false if key.upcase != key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa08k2tas\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa08k2tas.rb:29:in `test_check_dict_case'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_check_dict_case\n\
    \     28:     candidate = method(:check_dict_case)\n  => 29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.005730414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.51 tests/s, 174.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String } && dict.keys.all?\
    \ { |key| key.downcase == key || key.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj0z21mzv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj0z21mzv.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006220978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.75 tests/s, 321.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiyme6vts\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpiyme6vts.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.006460448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.79 tests/s, 619.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_ea59tk_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_ea59tk_.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.007005251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.75 tests/s, 142.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkharo8ou\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkharo8ou.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005201711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.24 tests/s, 576.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n    if dict.empty?\n        return false\n    end\n\
    \    if dict.keys.all? {|key| key.is_a? String}\n        if dict.keys.all? {|key|\
    \ key.upcase == key}\n            return true\n        elsif dict.keys.all? {|key|\
    \ key.downcase == key}\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzhrkjdff\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzhrkjdff.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005104859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.89 tests/s, 587.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |k,v|\n    if k.downcase != k\n     \
    \ lower = false\n    end\n    if k.upcase != k\n      upper = false\n    end\n\
    \  end\n  lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4lz8f3ic\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4lz8f3ic.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00500928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.63 tests/s, 598.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpomuv0h0a\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpomuv0h0a.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004627872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.08 tests/s, 432.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k == k.downcase } || dict.keys.all? { |k| k == k.upcase }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0rfze7a5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0rfze7a5.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005231287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.16 tests/s, 573.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxeddwfh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzxeddwfh.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00494622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.17 tests/s, 404.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp23pwk02s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp23pwk02s.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004633443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.82 tests/s, 431.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase == key\n        return false\n      else\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppqfb8sen\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppqfb8sen.rb:26:in `test_check_dict_case'\n\
    \     23: class TestHumanEval < Test::Unit::TestCase\n     24:   def test_check_dict_case\n\
    \     25:     candidate = method(:check_dict_case)\n  => 26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.00483966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.63 tests/s, 206.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_b19lju1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_b19lju1.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004656605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.75 tests/s, 644.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ddkvzdy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7ddkvzdy.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005038824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.46 tests/s, 396.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? {|k| k.is_a?(String) && k.upcase ==\
    \ k} || dict.keys.all? {|k| k.is_a?(String) && k.downcase == k}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdngueq17\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdngueq17.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004740503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.95 tests/s, 632.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key\n        return false\n      end\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz80ioidq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz80ioidq.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005188154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.75 tests/s, 578.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.upcase == key\n\
    \      return false if key.downcase == key\n    elsif key.downcase == key\n  \
    \    return false if key.upcase == key\n    else\n      return false\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuwvk4qqk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuwvk4qqk.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004827607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.14 tests/s, 414.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  if lower_case || upper_case\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpoxtdgi2e\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpoxtdgi2e.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005870407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.35 tests/s, 511.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\n    return true\n  elsif dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0gn5cmsu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0gn5cmsu.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.007755402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.94 tests/s, 386.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt_te315g\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt_te315g.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006744702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.26 tests/s, 296.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.each do\
    \ |key|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdtrnllc0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdtrnllc0.rb:22:in `test_check_dict_case'\n\
    \     19:   def test_check_dict_case\n     20:     candidate = method(:check_dict_case)\n\
    \     21:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 22:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     23:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     24:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00665334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.30 tests/s, 300.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key == key.downcase}\n\
    \      return true\n    elsif dict.keys.all? {|key| key == key.upcase}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp40jucx4f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp40jucx4f.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005029397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.83 tests/s, 596.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvukillk1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvukillk1.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006208033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.08 tests/s, 322.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvc2nenhy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvc2nenhy.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005281681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.33 tests/s, 568.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnn9w491p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnn9w491p.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004842896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.49 tests/s, 619.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_fqtfpqu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_fqtfpqu.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004601121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.34 tests/s, 434.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9vl2o_79\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9vl2o_79.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004878533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.98 tests/s, 409.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpltnyuq7x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpltnyuq7x.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005126429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.07 tests/s, 585.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? { |k| k.downcase == k }\n    elsif key.downcase\
    \ == key\n      return false if dict.keys.any? { |k| k.upcase == k }\n    else\n\
    \      return false\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpqk1q1vt5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqk1q1vt5.rb:32:in `test_check_dict_case'\n\
    \     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n  => 32:     assert_equal(false,\
    \ candidate.call({}))\n     33:   end\n     34: end\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005634273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.49 tests/s, 1242.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each_key do |key|\n    if key.is_a? String\n\
    \      if key.upcase == key\n        return false if dict.each_key.any? {|k| k.downcase\
    \ == k}\n      elsif key.downcase == key\n        return false if dict.each_key.any?\
    \ {|k| k.upcase == k}\n      end\n    else\n      return false\n    end\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnho497fc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnho497fc.rb:31:in `test_check_dict_case'\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     34:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004971138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.16 tests/s, 804.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy28ec4ct\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy28ec4ct.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005948024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.12 tests/s, 336.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # Write your code here\n  if dict.empty?\n    return\
    \ false\n  end\n  lower = true\n  upper = true\n  dict.each do |key, value|\n\
    \    if key.upcase != key\n      upper = false\n    end\n    if key.downcase !=\
    \ key\n      lower = false\n    end\n  end\n  return lower || upper\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdip2_1b5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdip2_1b5.rb:33:in `test_check_dict_case'\n\
    \     30:     candidate = method(:check_dict_case)\n     31:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     36:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004464896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.97 tests/s, 671.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw9b2f8ma\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpw9b2f8ma.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004886838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.63 tests/s, 204.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpczbe5s2s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpczbe5s2s.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004508938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each_key do |key|\n    if key.downcase != key\
    \ && key.upcase != key\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfexf5vew\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfexf5vew.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005453634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.36 tests/s, 366.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzk6a5nrm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzk6a5nrm.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004990704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.37 tests/s, 601.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyhyz68qb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyhyz68qb.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004648049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.14 tests/s, 430.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsc4agnmp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsc4agnmp.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00487694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.05 tests/s, 820.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key.downcase == key}\
    \ || dict.keys.all? {|key| key.upcase == key}\n  end\n  return false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe9daemad\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpe9daemad.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004530909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.71 tests/s, 662.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp877169e3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp877169e3.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004871219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.29 tests/s, 205.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpld1ezzl3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpld1ezzl3.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00443522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.47 tests/s, 225.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return dict.keys.all? { |key| key.upcase ==\
    \ key } || dict.keys.all? { |key| key.downcase == key }\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9gxos468\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9gxos468.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004949676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.03 tests/s, 606.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqg4twppf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqg4twppf.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.0049677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.30 tests/s, 402.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprepjxkz0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprepjxkz0.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004663779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.42 tests/s, 428.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    elsif key.upcase == key\n      return false if key.downcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9xglpv6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz9xglpv6.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005300316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.67 tests/s, 377.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key\n      return false\n    end\n \
    \ end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9_etp13x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9_etp13x.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004896436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.23 tests/s, 612.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1xhplksr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1xhplksr.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.005592686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.80 tests/s, 178.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppih6vb31\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppih6vb31.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004848206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.26 tests/s, 206.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase != key && key.downcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplvewo9o6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplvewo9o6.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005516863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.26 tests/s, 362.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? {|key| key.is_a?(String) && key.upcase == key}\n \
    \   return true\n  elsif keys.all? {|key| key.is_a?(String) && key.downcase ==\
    \ key}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7l3l72tq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7l3l72tq.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004973661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.06 tests/s, 603.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.downcase != key\
    \ && key.upcase != key\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfmohxcea\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfmohxcea.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00482964 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.05 tests/s, 414.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyt_tkf16\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyt_tkf16.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004917827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.34 tests/s, 610.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n   \
    \ if key.downcase == key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu10ymiiu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpu10ymiiu.rb:28:in `test_check_dict_case'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_check_dict_case\n\
    \     27:     candidate = method(:check_dict_case)\n  => 28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.00509514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.27 tests/s, 196.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  all_lower\
    \ = true\n  all_upper = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      all_lower = false\n    end\n    if key.upcase != key\n      all_upper\
    \ = false\n    end\n  end\n  return all_lower || all_upper\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppelfe6se\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppelfe6se.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004886217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.66 tests/s, 613.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx_qxhxvl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpx_qxhxvl.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005112362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.60 tests/s, 782.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      return true\n      elsif key == key.upcase\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmxj9erwe\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmxj9erwe.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004759649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.10 tests/s, 420.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    elsif key.upcase == key\n      return false if key.downcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4j292645\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4j292645.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004438464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.30 tests/s, 450.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key == key.downcase\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key == key.upcase }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc300iulx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc300iulx.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004693004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.08 tests/s, 639.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? { |k| k.downcase == k }\n    else\n    \
    \  return false if dict.keys.any? { |k| k.upcase == k }\n    end\n  end\n  true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyjnrnf6n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyjnrnf6n.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00471231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.21 tests/s, 848.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    if\
    \ dict.keys.all? {|key| key.downcase == key}\n      return true\n    elsif dict.keys.all?\
    \ {|key| key.upcase == key}\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpuisdr2yn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuisdr2yn.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005765721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.44 tests/s, 520.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjmwx7ooj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjmwx7ooj.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005019036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.24 tests/s, 597.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpovhc4hya\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpovhc4hya.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005289055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.07 tests/s, 756.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_02sj5d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0_02sj5d.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004464394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.99 tests/s, 671.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjhf2taqj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjhf2taqj.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.006434358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.42 tests/s, 155.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt_ajt67g\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt_ajt67g.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006469434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.57 tests/s, 309.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp96mptuab\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp96mptuab.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004893631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.35 tests/s, 408.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ == key\n      lower_case = false\n    end\n    if key.downcase == key\n    \
    \  upper_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfj_88pcu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfj_88pcu.rb:33:in `test_check_dict_case'\n\
    \     30:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     31:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     32:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 33:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     36:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004929769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.85 tests/s, 811.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |k,v|\n    if k.downcase != k\n     \
    \ lower = false\n    end\n    if k.upcase != k\n      upper = false\n    end\n\
    \  end\n  if lower || upper\n    return true\n  end\n  return false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkt65b_a0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkt65b_a0.rb:35:in `test_check_dict_case'\n\
    \     32:     candidate = method(:check_dict_case)\n     33:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     37:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     38:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005026691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.94 tests/s, 596.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd0bj0xe3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpd0bj0xe3.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006489753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.09 tests/s, 308.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key\n      return false\n    end\n \
    \ end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvhbdstso\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvhbdstso.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004768365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.72 tests/s, 629.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      dict.each do |key, value|\n\
    \        if key.downcase == key\n          return false\n        end\n      end\n\
    \    elsif key.downcase == key\n      dict.each do |key, value|\n        if key.upcase\
    \ == key\n          return false\n        end\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdeon9t87\nStarted\n.\nFinished in 0.000384964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2597.65 tests/s, 18183.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxduuw77g\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxduuw77g.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004884864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.71 tests/s, 409.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt7ojd6x5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt7ojd6x5.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006815776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.72 tests/s, 293.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? {|k| k.upcase == k} || dict.keys.all?\
    \ {|k| k.downcase == k}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeomgl2ql\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpeomgl2ql.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005633352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.51 tests/s, 532.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl5oqr6ri\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl5oqr6ri.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005765521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.44 tests/s, 693.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpffr8tu5u\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpffr8tu5u.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004895946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.25 tests/s, 408.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.downcase !=\
    \ key\n      lower = false\n    end\n    if key.upcase != key\n      upper = false\n\
    \    end\n  end\n  if lower || upper\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp452gk2kh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp452gk2kh.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004697753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.87 tests/s, 638.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.upcase } || dict.keys.all?\
    \ { |key| key == key.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcmt68fgn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpcmt68fgn.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004606362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.09 tests/s, 651.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false if k.downcase == k\n    else\n\
    \      return false if k.upcase == k\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwso5an3l\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwso5an3l.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00530788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.40 tests/s, 376.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.upcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.downcase == key}\n   \
    \   return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmrhht22d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmrhht22d.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005333108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.51 tests/s, 562.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzo4m6_8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqzo4m6_8.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004805324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.10 tests/s, 832.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sptl_75\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6sptl_75.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005518266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.22 tests/s, 724.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpidciuy9f\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpidciuy9f.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004305375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.27 tests/s, 232.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyl64j7ze\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyl64j7ze.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004656376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.76 tests/s, 859.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false if k.downcase == k\n    else\n\
    \      return false if k.upcase == k\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu664ti36\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpu664ti36.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004917045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.37 tests/s, 406.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpezwe584b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpezwe584b.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.005159671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.81 tests/s, 193.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpvzf5p8w9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvzf5p8w9.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004720165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.86 tests/s, 423.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfkfithxa\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfkfithxa.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004526902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.90 tests/s, 662.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false if dict.key?(key.downcase)\n\
    \      elsif key.downcase == key\n        return false if dict.key?(key.upcase)\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp6klv3mcd\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6klv3mcd.rb:31:in `test_check_dict_case'\n\
    \     28:   def test_check_dict_case\n     29:     candidate = method(:check_dict_case)\n\
    \     30:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     32:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     33:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004691401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.16 tests/s, 426.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr7f40nlf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr7f40nlf.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004713893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.14 tests/s, 424.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpviq_j5wu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpviq_j5wu.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004752636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.41 tests/s, 631.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false if dict.key?(key.downcase)\n\
    \      else\n        return false if dict.key?(key.upcase)\n      end\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfzn447dt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfzn447dt.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004888892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.55 tests/s, 409.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.upcase\
    \ != key\n      upper_case = false\n    end\n    if key.downcase != key\n    \
    \  lower_case = false\n    end\n  end\n  return lower_case || upper_case\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpco0kuzez\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpco0kuzez.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004813802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.74 tests/s, 623.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |k,v|\n    if k.is_a?(String)\n    \
    \  if k.upcase == k\n        return false if dict.keys.any? {|key| key.downcase\
    \ == key}\n      else\n        return false if dict.keys.any? {|key| key.upcase\
    \ == key}\n      end\n    else\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgnj9yeki\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgnj9yeki.rb:31:in `test_check_dict_case'\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     34:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.00520726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.04 tests/s, 768.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphublse9i\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphublse9i.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006276361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.33 tests/s, 318.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.downcase } || dict.keys.all?\
    \ { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpma2ljl0v\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpma2ljl0v.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004512564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.60 tests/s, 664.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq25wnlzt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpq25wnlzt.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004675381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.89 tests/s, 427.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw180uyf_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpw180uyf_.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005537501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.59 tests/s, 541.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe6k6riam\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpe6k6riam.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005506133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.62 tests/s, 726.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ajpp1o4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5ajpp1o4.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005095781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.24 tests/s, 588.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n   \
    \ if key.downcase == key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdhp67xh3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdhp67xh3.rb:28:in `test_check_dict_case'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_check_dict_case\n\
    \     27:     candidate = method(:check_dict_case)\n  => 28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004674358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.93 tests/s, 213.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdj71i11d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdj71i11d.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.007016122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.53 tests/s, 570.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.downcase !=\
    \ key || key.upcase != key\n      return false\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy3uxg025\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy3uxg025.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004791579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.70 tests/s, 208.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdz8rwnft\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdz8rwnft.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004820794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.43 tests/s, 622.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    elsif key.downcase == key\n      return false if key.upcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5zuere87\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5zuere87.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004719744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.88 tests/s, 423.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a? String } && dict.keys.all?\
    \ { |key| key.upcase == key || key.downcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7hzdo5kp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7hzdo5kp.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005401647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.13 tests/s, 370.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaztemcwa\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpaztemcwa.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004779186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.24 tests/s, 418.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmppqeieyps\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppqeieyps.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004602845 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.26 tests/s, 434.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.upcase == key\n\
    \      return false if dict.keys.any? {|k| k.downcase == k}\n    elsif key.downcase\
    \ == key\n      return false if dict.keys.any? {|k| k.upcase == k}\n    end\n\
    \  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8lcsr32p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8lcsr32p.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004478932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.27 tests/s, 893.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplyx0m3um\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplyx0m3um.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00474946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.55 tests/s, 421.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn58902ht\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn58902ht.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005239621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.85 tests/s, 572.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp85920aex\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp85920aex.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004757214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.21 tests/s, 630.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb9hopk_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpb9hopk_1.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004549794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.79 tests/s, 439.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpde0t5p0q\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpde0t5p0q.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005032782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.70 tests/s, 397.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxjskee3y\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxjskee3y.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004748568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.59 tests/s, 631.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.is_a?(String)\n      if k.downcase != k\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8zicvdzn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8zicvdzn.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004696991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.90 tests/s, 638.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptqy5qab3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptqy5qab3.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004992117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.32 tests/s, 600.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_mkr0e3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0_mkr0e3.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004698053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.85 tests/s, 425.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg9d7j804\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg9d7j804.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004609556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.94 tests/s, 650.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  else\n    dict.each\
    \ do |key, value|\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpirz92iu9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpirz92iu9.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005253298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.36 tests/s, 380.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.downcase != k && k.upcase != k\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzgzgwf2_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzgzgwf2_.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005010681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.57 tests/s, 399.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgpr8d70c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgpr8d70c.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005321506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.92 tests/s, 751.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcowf3c68\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpcowf3c68.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004800185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.33 tests/s, 416.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false if dict.key?(key.downcase)\n      elsif key.downcase == key\n\
    \        return false if dict.key?(key.upcase)\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjvs1aj4t\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjvs1aj4t.rb:34:in `test_check_dict_case'\n\
    \     31:   def test_check_dict_case\n     32:     candidate = method(:check_dict_case)\n\
    \     33:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 34:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     35:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     36:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     37:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004658879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.64 tests/s, 429.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp110mhdnl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp110mhdnl.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004564191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.10 tests/s, 438.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.to_s.downcase == key }\
    \ || dict.keys.all? { |key| key.to_s.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdi_z3896\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdi_z3896.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005068149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.31 tests/s, 591.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp35v1fajr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp35v1fajr.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004953154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.89 tests/s, 201.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqs_wop0\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuqs_wop0.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005553392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.07 tests/s, 360.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpguypp1kq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpguypp1kq.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.005455998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.28 tests/s, 183.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp84q7_iz4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp84q7_iz4.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005352184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.84 tests/s, 747.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo445czfi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpo445czfi.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004818931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.51 tests/s, 415.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpbdddku78\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbdddku78.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004727118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.55 tests/s, 211.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|k| k.downcase == k}\n    return true\n  elsif dict.keys.all? {|k| k.upcase\
    \ == k}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpremd1hkn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpremd1hkn.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004871459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.28 tests/s, 615.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp01y8w6gn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp01y8w6gn.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005381549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.82 tests/s, 371.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|k| k.downcase == k}\n    return true\n  elsif dict.keys.all? {|k| k.upcase\
    \ == k}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2dapw_ae\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2dapw_ae.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004811897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.82 tests/s, 623.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr284dabn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr284dabn.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004743048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.83 tests/s, 421.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmfz7f3a4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmfz7f3a4.rb:28:in `test_check_dict_case'\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     31:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004972881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.09 tests/s, 804.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwxxjkbqm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwxxjkbqm.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004782363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.10 tests/s, 209.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.upcase != key && key.downcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmaxndbi5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmaxndbi5.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006196089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.39 tests/s, 322.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk35r0trg\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk35r0trg.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004953524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.88 tests/s, 403.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      return true\n      elsif key == key.upcase\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc5s9vi_d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc5s9vi_d.rb:33:in `test_check_dict_case'\n\
    \     30:   def test_check_dict_case\n     31:     candidate = method(:check_dict_case)\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004787031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.90 tests/s, 417.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    else\n      return false if key.upcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph2_lps28\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmph2_lps28.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00461622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.63 tests/s, 433.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.upcase\
    \ != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmphjzhar9q\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphjzhar9q.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004871049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.29 tests/s, 410.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key == key.upcase } || dict.keys.all?\
    \ { |key| key == key.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpt9lkcaw7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt9lkcaw7.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.006002376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.60 tests/s, 499.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k,v|\n    if k.upcase == k\n      return false\n    elsif k.downcase ==\
    \ k\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0rb4e2wx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0rb4e2wx.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.005023686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.06 tests/s, 199.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwomzrisq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwomzrisq.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005349638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.93 tests/s, 373.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.upcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbcemdtq_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpbcemdtq_.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004408078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.86 tests/s, 680.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\
    \ && key.downcase == key\n      return true\n    elsif key.is_a?(String) && key.upcase\
    \ == key\n      return true\n    else\n      return false\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7mxyadxt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7mxyadxt.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005082246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.76 tests/s, 393.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvqaxcxll\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvqaxcxll.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00603684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.65 tests/s, 331.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpib3k8dcw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpib3k8dcw.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005053812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.87 tests/s, 395.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2bxn2qeh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp2bxn2qeh.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005524567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.01 tests/s, 362.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.upcase == key\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9dq4ukc7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9dq4ukc7.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005676874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.15 tests/s, 704.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    dict.keys.all?\
    \ {|key| key == key.downcase} || dict.keys.all? {|key| key == key.upcase}\n  else\n\
    \    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9m_4mhuk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9m_4mhuk.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004943204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.30 tests/s, 606.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfejymuid\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfejymuid.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005853687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.83 tests/s, 512.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase == key\n      return false if key.upcase\
    \ == key\n    else\n      return false if key.downcase == key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptz19ylxe\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptz19ylxe.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00648325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.24 tests/s, 308.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if dict.key?(key.downcase)\n\
    \    else\n      return false if dict.key?(key.upcase)\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsc5vd1yj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsc5vd1yj.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00472242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.76 tests/s, 423.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.upcase\
    \ != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpydc_4hx9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpydc_4hx9.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004946802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.15 tests/s, 404.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.upcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.downcase == key}\n   \
    \   return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpl43w1k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplpl43w1k.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004786579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.92 tests/s, 626.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd2qvk_49\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpd2qvk_49.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004816126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.64 tests/s, 622.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.keys.all? {|key| key.is_a? String}\n    dict.keys.all?\
    \ {|key| key == key.downcase} || dict.keys.all? {|key| key == key.upcase}\n  else\n\
    \    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn7rtdf2c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn7rtdf2c.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004732478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.31 tests/s, 633.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.keys.each\
    \ do |key|\n    if key.upcase == key\n      return false if dict.keys.any? { |k|\
    \ k.downcase == k }\n    else\n      return false if dict.keys.any? { |k| k.upcase\
    \ == k }\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpm_kb33vx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpm_kb33vx.rb:30:in `test_check_dict_case'\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     33:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005172906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.31 tests/s, 773.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    false\n  elsif dict.keys.all?\
    \ {|k| k.downcase == k}\n    true\n  elsif dict.keys.all? {|k| k.upcase == k}\n\
    \    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpa6n3t8r4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa6n3t8r4.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004961819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.54 tests/s, 604.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    return dict.keys.all? {|key| key == key.downcase}\
    \ || dict.keys.all? {|key| key == key.upcase}\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp49w_dnhz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp49w_dnhz.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004978701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.86 tests/s, 602.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpj02yg4lr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj02yg4lr.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004420822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.20 tests/s, 452.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ {|key| key.is_a? String}\n    if dict.keys.all? {|key| key.downcase == key}\n\
    \      return true\n    elsif dict.keys.all? {|key| key.upcase == key}\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp004wi0do\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp004wi0do.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004915772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.43 tests/s, 610.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpsv2g2lfx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsv2g2lfx.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005130066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.93 tests/s, 389.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k == k.upcase } || dict.keys.all?\
    \ { |k| k == k.downcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpja6z6x32\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpja6z6x32.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005187423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.77 tests/s, 578.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key || key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpt5tabu0b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpt5tabu0b.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004872341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.24 tests/s, 205.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg7b4rzh1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg7b4rzh1.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00446735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.85 tests/s, 671.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.downcase\
    \ != key\n      lower_case = false\n    end\n    if key.upcase != key\n      upper_case\
    \ = false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvw6krbl2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvw6krbl2.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004700919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.72 tests/s, 638.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ == key\n    elsif key.downcase == key\n      return false if key.upcase == key\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4a0bs66g\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4a0bs66g.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004624345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.25 tests/s, 432.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp57w773bk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp57w773bk.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004651065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.00 tests/s, 430.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower\
    \ = true\n  upper = true\n  dict.each do |key, value|\n    if key.upcase != key\n\
    \      upper = false\n    end\n    if key.downcase != key\n      lower = false\n\
    \    end\n  end\n  if upper || lower\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjwt6m_uu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjwt6m_uu.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004630847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.94 tests/s, 647.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg5t5l7s7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg5t5l7s7.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004692772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.09 tests/s, 426.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.keys.map(&:class).uniq.size == 1 && dict.keys.map(&:class).uniq\
    \ == [String]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk3pspzsv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpk3pspzsv.rb:18:in `test_check_dict_case'\n\
    \     15:   def test_check_dict_case\n     16:     candidate = method(:check_dict_case)\n\
    \     17:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 18:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     19:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     20:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004552088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.68 tests/s, 439.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.downcase != key && key.upcase != key\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp547l4dth\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp547l4dth.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005229061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.24 tests/s, 382.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplj2u85zo\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplj2u85zo.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004641316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.46 tests/s, 215.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7g13ysu4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7g13ysu4.rb:17:in `test_check_dict_case'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_check_dict_case\n\
    \     16:     candidate = method(:check_dict_case)\n  => 17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004178377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.33 tests/s, 239.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  dict.each do |k,v|\n    if k.downcase != k && k.upcase\
    \ != k\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmprpu1rypu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprpu1rypu.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004642779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.39 tests/s, 430.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx6ixehi6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpx6ixehi6.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004613265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.77 tests/s, 216.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.upcase == key\n      return false if key.downcase\
    \ != key\n    else\n      return false if key.upcase != key\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6_s094o7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6_s094o7.rb:27:in `test_check_dict_case'\n\
    \     24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_check_dict_case\n\
    \     26:     candidate = method(:check_dict_case)\n  => 27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n===============================================================================\n\
    \nFinished in 0.004647689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.16 tests/s, 215.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
