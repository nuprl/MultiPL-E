name: HumanEval_128_prod_signs
language: ruby
prompt: "# You are given an array arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n\
  # >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0, 1]) == 0\n# >>> prod_signs([])\
  \ == None\ndef prod_signs(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prod_signs\n\
  \    candidate = method(:prod_signs)\n    assert_equal(-9, candidate.call([1, 2,\
  \ 2, -4]))\n    assert_equal(0, candidate.call([0, 1]))\n    assert_equal(-10, candidate.call([1,\
  \ 1, 1, 2, 3, -1, 1]))\n    assert_equal(nil, candidate.call([]))\n    assert_equal(20,\
  \ candidate.call([2, 4, 1, 2, -1, -1, 9]))\n    assert_equal(4, candidate.call([-1,\
  \ 1, -1, 1]))\n    assert_equal(-4, candidate.call([-1, 1, 1, 1]))\n    assert_equal(0,\
  \ candidate.call([-1, 1, 1, 0]))\n  end\nend\n"
completions: ["  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map\
    \ { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n|\
    \ n.abs }.sum * arr.map { |n| n <=> 0 }.inject(:*)\nend", "  # your code here\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map\
    \ { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.inject(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\n\
    end", "  if arr.empty?\n    return nil\n  end\n  product = 1\n  sum = 0\n  arr.each\
    \ do |num|\n    if num > 0\n      product *= 1\n      sum += num\n    elsif num\
    \ < 0\n      product *= -1\n      sum += num.abs\n    end\n  end\n  sum * product\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map\
    \ { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num|\
    \ num.abs }.reduce(:+) * arr.map { |num| num.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+)\
    \ * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num|\
    \ num.abs }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+)\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.inject(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+)\
    \ * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum\
    \ * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map(&:abs).reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x|\
    \ x <=> 0 }.inject(:*)\nend", "  return nil if arr.empty?\n  arr.map { |e| e.abs\
    \ }.reduce(:+) * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+)\
    \ * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |n| n.abs }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num|\
    \ num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+)\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |num| num.abs }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map {\
    \ |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map {\
    \ |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |num| num.abs }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.reduce(:+) * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num|\
    \ num.abs }.sum * arr.map { |num| num <=> 0 }.inject(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |n| n.abs }.reduce(:+) * arr.map { |n| n.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  # your code here\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map\
    \ { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map {\
    \ |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  prod = 1\n\
    \  sum = 0\n  arr.each do |num|\n    prod *= num.sign\n    sum += num.abs\n  end\n\
    \  prod * sum\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum\
    \ * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.reduce(:+) * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num| num.sign\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map {\
    \ |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map {\
    \ |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum\
    \ * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num| num.sign\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+)\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |num| num.abs }.sum * arr.map { |num| num.zero? ? 1 : num.sign }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x|\
    \ x.sign }.inject(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |i| i.abs }.reduce(:+) * arr.map { |i| i <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n|\
    \ n.abs }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  # your code here\nend", "  return nil if arr.empty?\n  arr.map { |num|\
    \ num.abs }.reduce(:+) * arr.map { |num| num.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num|\
    \ num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num|\
    \ num.abs }.reduce(:+) * arr.map { |num| num.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num <=> 0 }.inject(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map\
    \ { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n|\
    \ n.abs }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.inject(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map\
    \ { |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.inject(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |e| e.abs }.reduce(:+)\
    \ * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.inject(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map { |num| num.sign\
    \ }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |e| e.abs }.reduce(:+) * arr.map { |e| e <=>\
    \ 0 }.reduce(:*)\nend", "  if arr.empty?\n    return nil\n  end\n  sum = 0\n \
    \ prod = 1\n  arr.each do |num|\n    if num > 0\n      prod *= 1\n      sum +=\
    \ num\n    elsif num < 0\n      prod *= -1\n      sum += num.abs\n    end\n  end\n\
    \  sum * prod\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum\
    \ * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map\
    \ { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |e| e.abs }.reduce(:+) * arr.map { |e| e <=> 0 }.reduce(:*)\n\
    end", "  # your code here\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n|\
    \ n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs\
    \ }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  # your code here\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n|\
    \ n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |e| e.abs\
    \ }.sum * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |n| n.abs }.sum * arr.map { |n| n <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |e| e.abs }.reduce(:+)\
    \ * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |e| e.abs }.reduce(:+) * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+)\
    \ * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |num| num.abs }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num\
    \ <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num\
    \ <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n|\
    \ n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num.sign }.inject(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |e| e.abs }.reduce(:+) * arr.map { |e| e <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0\
    \ }.reduce(:*)\nend", "  # your code here\nend", "  return nil if arr.empty?\n\
    \  arr.map { |n| n.abs }.reduce(:+) * arr.map { |n| n.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.sum * arr.map { |num| num.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs\
    \ }.reduce(:+) * arr.reduce(1) { |a, e| a * e.sign }\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x <=> 0 }.reduce(:*)\nend", "  # your code here\nend", "  return nil if arr.empty?\n\
    \  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend",
  "  return nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x|\
    \ x <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  prod = 1\n  sum =\
    \ 0\n  arr.each do |num|\n    prod *= num <=> 0\n    sum += num.abs\n  end\n \
    \ prod * sum\nend", "  return nil if arr.empty?\n  arr.map { |x| x.abs }.sum *\
    \ arr.map { |x| x.sign }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |e| e.abs }.reduce(:+) * arr.map { |e| e <=> 0 }.reduce(:*)\nend", "  return\
    \ nil if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x <=>\
    \ 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |num| num.abs }.sum * arr.map { |num| num <=> 0 }.inject(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.reduce(:+) * arr.map\
    \ { |n| n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x.sign }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |num| num.abs }.reduce(:+) * arr.map\
    \ { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map\
    \ { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.reduce(:+) * arr.map { |x| x.sign }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |e| e.abs }.reduce(:+) * arr.map\
    \ { |e| e <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |x|\
    \ x.abs }.reduce(:+) * arr.map { |x| x <=> 0 }.reduce(:*)\nend", "  return nil\
    \ if arr.empty?\n  arr.map { |x| x.abs }.sum * arr.map { |x| x <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n|\
    \ n <=> 0 }.reduce(:*)\nend", "  return nil if arr.empty?\n  arr.map { |num| num.abs\
    \ }.reduce(:+) * arr.map { |num| num <=> 0 }.reduce(:*)\nend", "  return nil if\
    \ arr.empty?\n  arr.map { |e| e.abs }.sum * arr.map { |e| e <=> 0 }.reduce(:*)\n\
    end", "  return nil if arr.empty?\n  arr.map { |n| n.abs }.sum * arr.map { |n|\
    \ n <=> 0 }.inject(:*)\nend", "  return nil if arr.empty?\n  arr.map { |n| n.abs\
    \ }.reduce(:+) * arr.map { |n| n <=> 0 }.reduce(:*)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
