name: HumanEval_43_pairs_sum_to_zero
language: ruby
results:
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if index != index2\n        if num + num2 == 0\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8zsir4y7\nStarted\n.\nFinished in 0.000393079 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2544.02 tests/s, 22896.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcqbm07xh\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpcqbm07xh.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpcqbm07xh.rb:28:in `call'\n/tmp/tmpcqbm07xh.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002668257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpt44dhd_b\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpt44dhd_b.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpt44dhd_b.rb:28:in `call'\n/tmp/tmpt44dhd_b.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002860358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    349.61 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmppay_yvll\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmppay_yvll.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmppay_yvll.rb:28:in `call'\n/tmp/tmppay_yvll.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002632801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.82 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpul9mloy2\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpul9mloy2.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005066116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.39 tests/s, 197.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  l.each do |num1|\n    l.each do\
    \ |num2|\n      if num1 != num2 && num1 + num2 == 0\n        return True\n   \
    \   end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3d_zjg93\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp3d_zjg93.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmp3d_zjg93.rb:31:in `call'\n/tmp/tmp3d_zjg93.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002808732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    356.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpd_q7t304\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpd_q7t304.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpd_q7t304.rb:28:in `call'\n/tmp/tmpd_q7t304.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002652137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    377.05 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmposaxegkz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmposaxegkz.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmposaxegkz.rb:28:in `call'\n/tmp/tmposaxegkz.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002671052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.38 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpj7ra57fs\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpj7ra57fs.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpj7ra57fs.rb:28:in `call'\n/tmp/tmpj7ra57fs.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002833789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    352.88 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num1, i|\n    l.each_with_index do |num2, j|\n      if\
    \ i != j && num1 + num2 == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm7ecc4dt\nStarted\n.\nFinished in 0.000387299 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2581.98 tests/s, 23237.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi32391z8\nStarted\n.\nFinished in 0.000454474 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2200.35 tests/s, 19803.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4379omfk\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp4379omfk.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005277463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.48 tests/s, 189.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpefb81y_p\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpefb81y_p.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpefb81y_p.rb:28:in `call'\n/tmp/tmpefb81y_p.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002759839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    362.34 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw2ziyd81\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpw2ziyd81.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004405103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.01 tests/s, 227.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88c33up1\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp88c33up1.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmp88c33up1.rb:31:in `call'\n/tmp/tmp88c33up1.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00287705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    347.58 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0...l.length\n    for\
    \ j in i+1...l.length\n      if l[i] + l[j] == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_8zbum8t\nStarted\n.\nFinished in 0.000478109 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2091.57 tests/s, 18824.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpkaw0ai5g\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpkaw0ai5g.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpkaw0ai5g.rb:28:in `call'\n/tmp/tmpkaw0ai5g.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002654131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    376.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpuqmxntsj\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpuqmxntsj.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpuqmxntsj.rb:28:in `call'\n/tmp/tmpuqmxntsj.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002712581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    368.65 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpixbrf3p7\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpixbrf3p7.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004760621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.06 tests/s, 210.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if num + num2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy7e8olnu\nStarted\n.\nFinished in 0.000403128 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2480.60 tests/s, 22325.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if num + num2 == 0 && index != index2\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqb8tnz_f\nStarted\n.\nFinished in 0.000726195 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1377.04 tests/s, 12393.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if x + y == 0 && i != j\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq211otp7\nStarted\n.\nFinished in 0.000362602 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.84 tests/s, 24820.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpwknxkirn\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpwknxkirn.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpwknxkirn.rb:28:in `call'\n/tmp/tmpwknxkirn.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003252846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplos8otuw\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmplos8otuw.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmplos8otuw.rb:28:in `call'\n/tmp/tmplos8otuw.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.0036065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptppxj0of\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmptppxj0of.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmptppxj0of.rb:31:in `call'\n/tmp/tmptppxj0of.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002642377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    378.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptk91it9i\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmptk91it9i.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004412898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.61 tests/s, 226.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpv3d_655t\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpv3d_655t.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpv3d_655t.rb:28:in `call'\n/tmp/tmpv3d_655t.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002620628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    381.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8imqyt56\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp8imqyt56.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp8imqyt56.rb:28:in `call'\n/tmp/tmp8imqyt56.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002649141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    377.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpkl1c8cl5\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpkl1c8cl5.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpkl1c8cl5.rb:28:in `call'\n/tmp/tmpkl1c8cl5.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002709926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    369.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0zg8yfm\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmph0zg8yfm.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004630045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.98 tests/s, 215.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphyrytkn0\nStarted\n.\nFinished in 0.0004792 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2086.81 tests/s, 18781.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpx2ktjh3u\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpx2ktjh3u.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpx2ktjh3u.rb:28:in `call'\n/tmp/tmpx2ktjh3u.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002590972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    385.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |i, index|\n    l.each_with_index do |j, index2|\n   \
    \   if index != index2\n        if i + j == 0\n          return true\n       \
    \ end\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate\
    \ = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1, 3,\
    \ 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzm0r45ou\nStarted\n.\nFinished in 0.000381517 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2621.12 tests/s, 23590.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num1, i|\n    l.each_with_index do |num2, j|\n      if\
    \ i != j && num1 + num2 == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyexz8rau\nStarted\n.\nFinished in 0.000402257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2485.97 tests/s, 22373.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjgpidk6w\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpjgpidk6w.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpjgpidk6w.rb:28:in `call'\n/tmp/tmpjgpidk6w.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002677364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    373.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn8gg__le\nStarted\n.\nFinished in 0.000399031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.07 tests/s, 22554.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \    for i in 0...l.length\n        for j in i+1...l.length\n            if l[i]\
    \ + l[j] == 0\n                return True\n            end\n        end\n   \
    \ end\n    return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqtq3uoxs\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpqtq3uoxs.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpqtq3uoxs.rb:28:in `call'\n/tmp/tmpqtq3uoxs.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002900534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpuyvgy54g\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpuyvgy54g.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpuyvgy54g.rb:28:in `call'\n/tmp/tmpuyvgy54g.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00273343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    365.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyxutz5k0\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpyxutz5k0.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpyxutz5k0.rb:31:in `call'\n/tmp/tmpyxutz5k0.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002819582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    354.66 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpvcdq57c0\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpvcdq57c0.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpvcdq57c0.rb:28:in `call'\n/tmp/tmpvcdq57c0.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002702161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    370.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \    for i in 0..l.length-1\n        for j in i+1..l.length-1\n            if\
    \ l[i] + l[j] == 0\n                return True\n            end\n        end\n\
    \    end\n    return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9w9qsvh\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpo9w9qsvh.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpo9w9qsvh.rb:28:in `call'\n/tmp/tmpo9w9qsvh.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003141858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpu328qo7a\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpu328qo7a.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpu328qo7a.rb:28:in `call'\n/tmp/tmpu328qo7a.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002671553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0szoh_ui\nStarted\n.\nFinished in 0.000708622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1411.19 tests/s, 12700.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp5uxc3g37\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp5uxc3g37.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp5uxc3g37.rb:28:in `call'\n/tmp/tmp5uxc3g37.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002828858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpk2c23bhu\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpk2c23bhu.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpk2c23bhu.rb:28:in `call'\n/tmp/tmpk2c23bhu.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003378593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.98 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmptur4c6yd\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmptur4c6yd.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmptur4c6yd.rb:28:in `call'\n/tmp/tmptur4c6yd.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002639604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    378.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcgefrw3p\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpcgefrw3p.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpcgefrw3p.rb:28:in `call'\n/tmp/tmpcgefrw3p.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002842765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    351.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpnbmwa_pz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpnbmwa_pz.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpnbmwa_pz.rb:28:in `call'\n/tmp/tmpnbmwa_pz.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002715867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    368.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp02dygnmf\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp02dygnmf.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp02dygnmf.rb:28:in `call'\n/tmp/tmp02dygnmf.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003339839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpoh25ixk2\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpoh25ixk2.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpoh25ixk2.rb:28:in `call'\n/tmp/tmpoh25ixk2.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002787811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    358.70 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx3uk4veg\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpx3uk4veg.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004715887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.05 tests/s, 212.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  (0...l.length).each do |i|\n    (i+1...l.length).each do\
    \ |j|\n      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7tmur08p\nStarted\n.\nFinished in 0.000428526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2333.58 tests/s, 21002.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp42xd3lud\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp42xd3lud.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005348015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.99 tests/s, 186.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb49c_ree\nStarted\n.\nFinished in 0.000383501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2607.56 tests/s, 23468.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjchxtjr7\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpjchxtjr7.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpjchxtjr7.rb:28:in `call'\n/tmp/tmpjchxtjr7.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002698473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    370.58 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwpooflv\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpmwpooflv.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004798772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.39 tests/s, 208.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n \
    \ return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp27v228w5\nStarted\n.\nFinished in 0.000381387 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.01 tests/s, 23598.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnhriurb1\nStarted\n.\nFinished in 0.000402887 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2482.09 tests/s, 22338.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if x +\
    \ y == 0 && i != j\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprv2kn2vs\nStarted\n.\nFinished in 0.000405131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2468.34 tests/s, 22215.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbauxs123\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpbauxs123.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpbauxs123.rb:31:in `call'\n/tmp/tmpbauxs123.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002596011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    385.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpci9ool5y\nStarted\n.\nFinished in 0.000387749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2578.99 tests/s, 23210.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # if l.length == 1\n  #   return false\n  # end\n  # for i in 0..l.length-1\n\
    \  #   for j in i+1..l.length-1\n  #     if l[i] + l[j] == 0\n  #       return\
    \ true\n  #     end\n  #   end\n  # end\n  # return false\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "/tmp/tmp6y1gsxv6.rb:168: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6y1gsxv6.rb:181: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpiv6u84cf\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpiv6u84cf.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpiv6u84cf.rb:28:in `call'\n/tmp/tmpiv6u84cf.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002885986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    346.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index2 > index\n        if num + num2 == 0\n   \
    \       return true\n        end\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5mj0sh8m\nStarted\n.\nFinished in 0.000395072 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2531.18 tests/s, 22780.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzcatr556\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpzcatr556.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpzcatr556.rb:28:in `call'\n/tmp/tmpzcatr556.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002698814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    370.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnsjh8n08\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpnsjh8n08.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpnsjh8n08.rb:31:in `call'\n/tmp/tmpnsjh8n08.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002710126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    368.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp669ruqe4\nStarted\n.\nFinished in 0.000369415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.98 tests/s, 24362.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwaay92ek\nStarted\n.\nFinished in 0.000396145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2524.33 tests/s, 22718.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjqyfrdut\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpjqyfrdut.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpjqyfrdut.rb:28:in `call'\n/tmp/tmpjqyfrdut.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002708442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    369.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_pmz3mv7\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp_pmz3mv7.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp_pmz3mv7.rb:28:in `call'\n/tmp/tmp_pmz3mv7.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002823119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    354.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmperqo9igx\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmperqo9igx.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmperqo9igx.rb:28:in `call'\n/tmp/tmperqo9igx.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002667015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.95 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each do |x|\n    l.each do |y|\n      if x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpokv_g3tq\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpokv_g3tq.rb:29:in `test_pairs_sum_to_zero'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_pairs_sum_to_zero\n\
    \     28:     candidate = method(:pairs_sum_to_zero)\n  => 29:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     30:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     31:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     32:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004821305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.41 tests/s, 207.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8kxumlo_\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp8kxumlo_.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp8kxumlo_.rb:28:in `call'\n/tmp/tmp8kxumlo_.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002986214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.87 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmporpq1rna\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmporpq1rna.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004728231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.50 tests/s, 211.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpgj4fo9w5\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpgj4fo9w5.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpgj4fo9w5.rb:28:in `call'\n/tmp/tmpgj4fo9w5.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003774066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.97 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpwlx8hd7g\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpwlx8hd7g.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpwlx8hd7g.rb:28:in `call'\n/tmp/tmpwlx8hd7g.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002764379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    361.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |item, index|\n    l.each_with_index\
    \ do |item2, index2|\n      if item + item2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp844sealo\nStarted\n.\nFinished in 0.000400313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2498.05 tests/s, 22482.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpg6syoqze\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpg6syoqze.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpg6syoqze.rb:28:in `call'\n/tmp/tmpg6syoqze.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002628442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    380.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpupr60b_w\nStarted\n.\nFinished in 0.000391886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.76 tests/s, 22965.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpz6ol500y\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpz6ol500y.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpz6ol500y.rb:28:in `call'\n/tmp/tmpz6ol500y.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002631959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.95 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpx0_xk32x\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpx0_xk32x.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpx0_xk32x.rb:28:in `call'\n/tmp/tmpx0_xk32x.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002830913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.24 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num1, index1|\n    l.each_with_index do |num2, index2|\n\
    \      if index1 != index2 && num1 + num2 == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjrhzgny2\nStarted\n.\nFinished in 0.000395163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2530.60 tests/s, 22775.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8d751uuk\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp8d751uuk.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp8d751uuk.rb:28:in `call'\n/tmp/tmp8d751uuk.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002587475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    386.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl9y8pcxi\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpl9y8pcxi.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005113074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.58 tests/s, 195.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjkd6w0mz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpjkd6w0mz.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpjkd6w0mz.rb:28:in `call'\n/tmp/tmpjkd6w0mz.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002727077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    366.69 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpasqlktsw\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpasqlktsw.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpasqlktsw.rb:28:in `call'\n/tmp/tmpasqlktsw.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002698003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    370.64 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpc9xzerun\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpc9xzerun.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpc9xzerun.rb:28:in `call'\n/tmp/tmpc9xzerun.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002761803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    362.08 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j and x + y == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpx2wqc1au\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpx2wqc1au.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpx2wqc1au.rb:28:in `call'\n/tmp/tmpx2wqc1au.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002771211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    360.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2c45buqi\nStarted\n.\nFinished in 0.000412035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2426.98 tests/s, 21842.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpgj6_01zr\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpgj6_01zr.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpgj6_01zr.rb:28:in `call'\n/tmp/tmpgj6_01zr.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.004123214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.53 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpp2iwxvfm\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpp2iwxvfm.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpp2iwxvfm.rb:28:in `call'\n/tmp/tmpp2iwxvfm.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003289495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.00 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmlyyuzyf\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpmlyyuzyf.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004598566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.46 tests/s, 217.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp9e78jsjx\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp9e78jsjx.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp9e78jsjx.rb:28:in `call'\n/tmp/tmp9e78jsjx.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002945147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpdn8h657m\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpdn8h657m.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpdn8h657m.rb:28:in `call'\n/tmp/tmpdn8h657m.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002736865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    365.38 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp69dbktec\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp69dbktec.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp69dbktec.rb:28:in `call'\n/tmp/tmp69dbktec.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002780788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    359.61 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if x +\
    \ y == 0 && i != j\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaf3zyvrk\nStarted\n.\nFinished in 0.000440388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2270.72 tests/s, 20436.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in 0..l.length-1\n      if i != j\n     \
    \   if l[i] + l[j] == 0\n          return True\n        end\n      end\n    end\n\
    \  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp__qi09oz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp__qi09oz.rb:24:in `pairs_sum_to_zero'\n\
    /tmp/tmp__qi09oz.rb:30:in `call'\n/tmp/tmp__qi09oz.rb:30:in `test_pairs_sum_to_zero'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_pairs_sum_to_zero\n\
    \     29:     candidate = method(:pairs_sum_to_zero)\n  => 30:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     31:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     32:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     33:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002715797 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    368.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkg_9k9ld\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpkg_9k9ld.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004762534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.97 tests/s, 209.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if num + num2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp8tbzj0b\nStarted\n.\nFinished in 0.000469994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2127.69 tests/s, 19149.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j and x + y == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpbl6iklkv\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpbl6iklkv.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpbl6iklkv.rb:28:in `call'\n/tmp/tmpbl6iklkv.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002692533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    371.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppghl1mij\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmppghl1mij.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005849058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.97 tests/s, 170.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp1b3egtkc\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp1b3egtkc.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp1b3egtkc.rb:28:in `call'\n/tmp/tmp1b3egtkc.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002790006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    358.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7da9tth8\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp7da9tth8.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp7da9tth8.rb:28:in `call'\n/tmp/tmp7da9tth8.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002649331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    377.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ff96oo8\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp9ff96oo8.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004690319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.21 tests/s, 213.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1jmz7f2u\nStarted\n.\nFinished in 0.00043051 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2322.83 tests/s, 20905.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if num + num2 == 0 && index != index2\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnloknrdu\nStarted\n.\nFinished in 0.000423325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2362.25 tests/s, 21260.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnul27nm_\nStarted\n.\nFinished in 0.000435779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2294.74 tests/s, 20652.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxdiv5_ws\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpxdiv5_ws.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005019096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.24 tests/s, 199.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8c6hk456\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp8c6hk456.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp8c6hk456.rb:28:in `call'\n/tmp/tmp8c6hk456.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002869335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    348.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4ylwtv6\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpo4ylwtv6.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpo4ylwtv6.rb:31:in `call'\n/tmp/tmpo4ylwtv6.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.004333098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiis646_e\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpiis646_e.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.006638523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.64 tests/s, 150.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpesguraau\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpesguraau.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpesguraau.rb:28:in `call'\n/tmp/tmpesguraau.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00269122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    371.58 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpruc8m3vf\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpruc8m3vf.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpruc8m3vf.rb:31:in `call'\n/tmp/tmpruc8m3vf.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00263267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpa20zz8kv\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpa20zz8kv.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpa20zz8kv.rb:28:in `call'\n/tmp/tmpa20zz8kv.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002876488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    347.65 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpshagtnu5\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpshagtnu5.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpshagtnu5.rb:28:in `call'\n/tmp/tmpshagtnu5.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002670501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdfmtcvhh\nStarted\n.\nFinished in 0.000411554 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2429.81 tests/s, 21868.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8x8bt0r2\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp8x8bt0r2.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp8x8bt0r2.rb:28:in `call'\n/tmp/tmp8x8bt0r2.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002703734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    369.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpwfp5pcb7\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpwfp5pcb7.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpwfp5pcb7.rb:28:in `call'\n/tmp/tmpwfp5pcb7.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003379423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.91 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpobm13wt4\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpobm13wt4.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpobm13wt4.rb:28:in `call'\n/tmp/tmpobm13wt4.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002641667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    378.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpci8s6186\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpci8s6186.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpci8s6186.rb:28:in `call'\n/tmp/tmpci8s6186.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002593446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    385.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp86ybbx56\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp86ybbx56.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp86ybbx56.rb:28:in `call'\n/tmp/tmp86ybbx56.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003438175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpig1smenx\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpig1smenx.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpig1smenx.rb:28:in `call'\n/tmp/tmpig1smenx.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002597985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    384.91 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpe63slyfp\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpe63slyfp.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpe63slyfp.rb:28:in `call'\n/tmp/tmpe63slyfp.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002632239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp6sq849ow\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp6sq849ow.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp6sq849ow.rb:28:in `call'\n/tmp/tmp6sq849ow.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002906015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdurrpluy\nStarted\n.\nFinished in 0.000576503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1734.60 tests/s, 15611.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8m1dmjh9\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp8m1dmjh9.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005730555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.50 tests/s, 174.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if index2 > index && num + num2 == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4iuu_339\nStarted\n.\nFinished in 0.000450276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2220.86 tests/s, 19987.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpqwc9us3t\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpqwc9us3t.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpqwc9us3t.rb:28:in `call'\n/tmp/tmpqwc9us3t.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002785288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    359.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_jjuamg\nStarted\n.\nFinished in 0.000439567 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2274.97 tests/s, 20474.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \    for i in 0..l.length-1\n        for j in i+1..l.length-1\n            if\
    \ l[i] + l[j] == 0\n                return True\n            end\n        end\n\
    \    end\n    return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpojjq6gwc\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpojjq6gwc.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpojjq6gwc.rb:28:in `call'\n/tmp/tmpojjq6gwc.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002692092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    371.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if num + num2 == 0 && index != index2\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzwp9403v\nStarted\n.\nFinished in 0.000393811 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2539.29 tests/s, 22853.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33ylz4fs\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp33ylz4fs.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005193165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.56 tests/s, 192.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpcfnc63bt\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpcfnc63bt.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpcfnc63bt.rb:28:in `call'\n/tmp/tmpcfnc63bt.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002971176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmps6z38qmj\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmps6z38qmj.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmps6z38qmj.rb:28:in `call'\n/tmp/tmps6z38qmj.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002635635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    379.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa3cqazml\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpa3cqazml.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005601543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.52 tests/s, 178.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk6kdb2h9\nStarted\n.\nFinished in 0.000430699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2321.81 tests/s, 20896.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index != index2 && num + num2 == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_lwn68a9\nStarted\n.\nFinished in 0.000585841 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1706.95 tests/s, 15362.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmprzqipy61\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmprzqipy61.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmprzqipy61.rb:28:in `call'\n/tmp/tmprzqipy61.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002629033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    380.37 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each do |i|\n    l.each do |j|\n      if i != j && i\
    \ + j == 0\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphw5wmbo1\nStarted\n.\nFinished in 0.000338106 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.65 tests/s, 26618.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp7scg5vb9\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp7scg5vb9.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp7scg5vb9.rb:28:in `call'\n/tmp/tmp7scg5vb9.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003174429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if (x + y == 0) && (i != j)\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9704z7v\nStarted\n.\nFinished in 0.000384774 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2598.93 tests/s, 23390.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j\n        if x + y == 0\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg3u5f_kv\nStarted\n.\nFinished in 0.000407997 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2451.00 tests/s, 22058.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, i|\n    l.each_with_index do |num2, j|\n      if\
    \ i != j && num + num2 == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc4uc_991\nStarted\n.\nFinished in 0.000550505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1816.51 tests/s, 16348.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if x + y == 0 && i != j\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8vi97y8c\nStarted\n.\nFinished in 0.000403258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2479.80 tests/s, 22318.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # Fill in your code here\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n \
    \ return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfwwnttqs\nStarted\n.\nFinished in 0.000426642 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2343.89 tests/s, 21094.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpruqqw8c8\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpruqqw8c8.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpruqqw8c8.rb:28:in `call'\n/tmp/tmpruqqw8c8.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003064984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.27 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \    for i in 0...l.length\n        for j in i+1...l.length\n            if l[i]\
    \ + l[j] == 0\n                return True\n            end\n        end\n   \
    \ end\n    return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf8ewodw1\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpf8ewodw1.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpf8ewodw1.rb:28:in `call'\n/tmp/tmpf8ewodw1.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003524457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.73 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyfz9mxeh\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpyfz9mxeh.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004720977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.82 tests/s, 211.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpg7jxshjb\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpg7jxshjb.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpg7jxshjb.rb:28:in `call'\n/tmp/tmpg7jxshjb.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002741415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    364.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp58jx8fwf\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp58jx8fwf.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp58jx8fwf.rb:28:in `call'\n/tmp/tmp58jx8fwf.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002917437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    342.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if num + num2 == 0 && index != index2\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8z1jry05\nStarted\n.\nFinished in 0.000512613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1950.79 tests/s, 17557.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if x + y == 0 && i != j\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxj5koehx\nStarted\n.\nFinished in 0.000379704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2633.63 tests/s, 23702.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpy8cyw9c6\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpy8cyw9c6.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpy8cyw9c6.rb:28:in `call'\n/tmp/tmpy8cyw9c6.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002769266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    361.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # Write your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdwmxi47b\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpdwmxi47b.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005006033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.76 tests/s, 199.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0...l.length\n    for\
    \ j in 0...l.length\n      if i != j\n        if l[i] + l[j] == 0\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyah4ycmz\nStarted\n.\nFinished in 0.000374033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2673.56 tests/s, 24062.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0...l.length\n    for\
    \ j in i+1...l.length\n      if l[i] + l[j] == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiad4qy5a\nStarted\n.\nFinished in 0.000375105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2665.92 tests/s, 23993.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplmw9_99r\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmplmw9_99r.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmplmw9_99r.rb:28:in `call'\n/tmp/tmplmw9_99r.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002730514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    366.23 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcpslblui\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpcpslblui.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004916825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.38 tests/s, 203.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # if the list is empty or has only one element, return False\n  if l.empty?\
    \ or l.length == 1\n    return false\n  end\n  # sort the list\n  l.sort!\n  #\
    \ initialize two pointers, one at the beginning of the list and one at the end\n\
    \  i = 0\n  j = l.length - 1\n  # while the two pointers have not crossed\n  while\
    \ i < j\n    # if the sum of the two elements is zero, return True\n    if l[i]\
    \ + l[j] == 0\n      return true\n    # if the sum of the two elements is greater\
    \ than zero, move the right pointer to the left\n    elsif l[i] + l[j] > 0\n \
    \     j -= 1\n    # if the sum of the two elements is less than zero, move the\
    \ left pointer to the right\n    else\n      i += 1\n    end\n  end\n  # if the\
    \ two pointers have crossed, return False\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0x0798u8\nStarted\n.\nFinished in 0.000351892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2841.78 tests/s, 25576.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp90ievpfq\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp90ievpfq.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp90ievpfq.rb:28:in `call'\n/tmp/tmp90ievpfq.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002621429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    381.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb9__9p7b\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpb9__9p7b.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004714073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.13 tests/s, 212.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppopem1x_\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmppopem1x_.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.00536639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.35 tests/s, 186.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0rwlf_sd\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp0rwlf_sd.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp0rwlf_sd.rb:28:in `call'\n/tmp/tmp0rwlf_sd.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002835111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    352.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpimlkxeyy\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpimlkxeyy.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpimlkxeyy.rb:28:in `call'\n/tmp/tmpimlkxeyy.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002778064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    359.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpu9y08i_s\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpu9y08i_s.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpu9y08i_s.rb:28:in `call'\n/tmp/tmpu9y08i_s.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002676013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    373.69 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmph6ezoyle\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmph6ezoyle.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmph6ezoyle.rb:28:in `call'\n/tmp/tmph6ezoyle.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002848095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    351.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp061oby6y\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp061oby6y.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp061oby6y.rb:28:in `call'\n/tmp/tmp061oby6y.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002578709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    387.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp382crk3s\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp382crk3s.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp382crk3s.rb:28:in `call'\n/tmp/tmp382crk3s.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002788573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    358.61 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0go56s0u\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp0go56s0u.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp0go56s0u.rb:28:in `call'\n/tmp/tmp0go56s0u.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002682053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    372.85 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in 0..l.length-1\n      if i != j\n     \
    \   if l[i] + l[j] == 0\n          return True\n        end\n      end\n    end\n\
    \  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp39yax_mh\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp39yax_mh.rb:24:in `pairs_sum_to_zero'\n\
    /tmp/tmp39yax_mh.rb:30:in `call'\n/tmp/tmp39yax_mh.rb:30:in `test_pairs_sum_to_zero'\n\
    \     27: class TestHumanEval < Test::Unit::TestCase\n     28:   def test_pairs_sum_to_zero\n\
    \     29:     candidate = method(:pairs_sum_to_zero)\n  => 30:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     31:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     32:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     33:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002652778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    376.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmptw7v1jl1\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmptw7v1jl1.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmptw7v1jl1.rb:28:in `call'\n/tmp/tmptw7v1jl1.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002792751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    358.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n     \
    \ end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpljaz1x8_\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpljaz1x8_.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmpljaz1x8_.rb:31:in `call'\n/tmp/tmpljaz1x8_.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002752136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    363.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr9tvl8rr\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpr9tvl8rr.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpr9tvl8rr.rb:28:in `call'\n/tmp/tmpr9tvl8rr.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002915942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    342.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpn923v4vi\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpn923v4vi.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpn923v4vi.rb:28:in `call'\n/tmp/tmpn923v4vi.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002966268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.12 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_9jwhyr_\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp_9jwhyr_.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp_9jwhyr_.rb:28:in `call'\n/tmp/tmp_9jwhyr_.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003092494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.36 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3pnly22_\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp3pnly22_.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.005078238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.92 tests/s, 196.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  if l.length < 2\n    return false\n  end\n  l.each do |i|\n\
    \    l.each do |j|\n      if i + j == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn6wqdzw9\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpn6wqdzw9.rb:32:in `test_pairs_sum_to_zero'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_pairs_sum_to_zero\n\
    \     31:     candidate = method(:pairs_sum_to_zero)\n  => 32:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     33:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     34:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     35:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005717901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.89 tests/s, 174.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpirdp3b80\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpirdp3b80.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpirdp3b80.rb:28:in `call'\n/tmp/tmpirdp3b80.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002764088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    361.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp5pc8bl27\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp5pc8bl27.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp5pc8bl27.rb:28:in `call'\n/tmp/tmp5pc8bl27.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002695208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    371.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if x +\
    \ y == 0 && i != j\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoml1juha\nStarted\n.\nFinished in 0.000371719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2690.20 tests/s, 24211.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp5gdf265n\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp5gdf265n.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp5gdf265n.rb:28:in `call'\n/tmp/tmp5gdf265n.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002657276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    376.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdl0fsyis\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpdl0fsyis.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004634865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.76 tests/s, 215.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if num + num2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt3mrike_\nStarted\n.\nFinished in 0.00039371 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2539.94 tests/s, 22859.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  l.each do |x|\n    l.each do |y|\n      if x != y and x + y == 0\n        return\
    \ True\n      end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n   \
    \ candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr13u6907\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpr13u6907.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpr13u6907.rb:28:in `call'\n/tmp/tmpr13u6907.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00276036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    362.27 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzs2q66pj\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpzs2q66pj.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpzs2q66pj.rb:28:in `call'\n/tmp/tmpzs2q66pj.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002649031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    377.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpo8vjq34s\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpo8vjq34s.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpo8vjq34s.rb:28:in `call'\n/tmp/tmpo8vjq34s.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002683637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    372.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3ujm_0f_\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp3ujm_0f_.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004777924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.30 tests/s, 209.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp117642zm\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp117642zm.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp117642zm.rb:28:in `call'\n/tmp/tmp117642zm.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002640876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    378.66 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp279u7r89\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp279u7r89.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmp279u7r89.rb:28:in `call'\n/tmp/tmp279u7r89.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002594298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    385.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyk8gr9bl\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmpyk8gr9bl.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004461048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.16 tests/s, 224.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpejgo8ll6\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpejgo8ll6.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpejgo8ll6.rb:28:in `call'\n/tmp/tmpejgo8ll6.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.0027662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    361.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpy96109yn\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpy96109yn.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpy96109yn.rb:28:in `call'\n/tmp/tmpy96109yn.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003252526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpld37x0jz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpld37x0jz.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpld37x0jz.rb:28:in `call'\n/tmp/tmpld37x0jz.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.003165281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpuur8y5l6\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpuur8y5l6.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpuur8y5l6.rb:28:in `call'\n/tmp/tmpuur8y5l6.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002696661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    370.83 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmps7btd83p\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmps7btd83p.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmps7btd83p.rb:28:in `call'\n/tmp/tmps7btd83p.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.002717519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    367.98 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j]\
    \ == 0\n        return True\n      end\n    end\n  end\n  return False\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
    \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
    \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
    \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4,\
    \ -5, 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
    \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
    \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2,\
    \ 30]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpu2b652h5\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpu2b652h5.rb:22:in `pairs_sum_to_zero'\n\
    /tmp/tmpu2b652h5.rb:28:in `call'\n/tmp/tmpu2b652h5.rb:28:in `test_pairs_sum_to_zero'\n\
    \     25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pairs_sum_to_zero\n\
    \     27:     candidate = method(:pairs_sum_to_zero)\n  => 28:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     29:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     30:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     31:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00264303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    378.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length < 2\n    return False\n  end\n  for i in 0..l.length - 1\n    for\
    \ j in i + 1..l.length - 1\n      if l[i] + l[j] == 0\n        return True\n \
    \     end\n    end\n  end\n  return False\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprs9bbggz\nStarted\nE\n===============================================================================\n\
    Error: test_pairs_sum_to_zero(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmprs9bbggz.rb:25:in `pairs_sum_to_zero'\n\
    /tmp/tmprs9bbggz.rb:31:in `call'\n/tmp/tmprs9bbggz.rb:31:in `test_pairs_sum_to_zero'\n\
    \     28: class TestHumanEval < Test::Unit::TestCase\n     29:   def test_pairs_sum_to_zero\n\
    \     30:     candidate = method(:pairs_sum_to_zero)\n  => 31:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     32:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     33:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     34:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n===============================================================================\n\
    \nFinished in 0.00266423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    375.34 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0...l.length\n    for\
    \ j in i+1...l.length\n      if l[i] + l[j] == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl5rkgvgz\nStarted\n.\nFinished in 0.000323338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3092.74 tests/s, 27834.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n\
    \    assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc71dowbx\nStarted\n.\nFinished in 0.000328468 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3044.44 tests/s, 27399.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns\
    \ True if there are two distinct elements in the list that\n# sum to zero, and\
    \ False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pairs_sum_to_zero\n    candidate = method(:pairs_sum_to_zero)\n  \
    \  assert_equal(false, candidate.call([1, 3, 5, 0]))\n    assert_equal(false,\
    \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
    \ 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n    assert_equal(false,\
    \ candidate.call([1]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2,\
    \ 30]))\n    assert_equal(true, candidate.call([-3, 9, -1, 3, 2, 31]))\n    assert_equal(false,\
    \ candidate.call([-3, 9, -1, 4, 2, 30]))\n    assert_equal(false, candidate.call([-3,\
    \ 9, -1, 4, 2, 31]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp65w798bz\nStarted\nF\n===============================================================================\n\
    Failure: test_pairs_sum_to_zero(TestHumanEval)\n/tmp/tmp65w798bz.rb:21:in `test_pairs_sum_to_zero'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_pairs_sum_to_zero\n\
    \     20:     candidate = method(:pairs_sum_to_zero)\n  => 21:     assert_equal(false,\
    \ candidate.call([1, 3, 5, 0]))\n     22:     assert_equal(false, candidate.call([1,\
    \ 3, -2, 1]))\n     23:     assert_equal(false, candidate.call([1, 2, 3, 7]))\n\
    \     24:     assert_equal(true, candidate.call([2, 4, -5, 3, 5, 7]))\n<false>\
    \ expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n===============================================================================\n\
    \nFinished in 0.004272503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.05 tests/s, 234.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
