name: HumanEval_152_compare
language: ruby
results:
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgjme5crl\nStarted\n.\nFinished in 0.000544021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1838.16 tests/s, 7352.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpucjib6vt\nStarted\n.\nFinished in 0.000726616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1376.24 tests/s, 5504.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkvbab_l4\nStarted\n.\nFinished in 0.000505416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1978.57 tests/s, 7914.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmponw3mhcq\nStarted\n.\nFinished in 0.000563932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1773.26 tests/s, 7093.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a,b| (a - b).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpye5uimlz\nStarted\n.\nFinished in 0.000527915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1894.24 tests/s, 7576.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjizsozz_\nStarted\n.\nFinished in 0.000942197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1061.35 tests/s, 4245.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9zfhq_jn\nStarted\n.\nFinished in 0.000508085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1968.17 tests/s, 7872.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe62kt13u\nStarted\n.\nFinished in 0.000547616 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1826.10 tests/s, 7304.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |item, index|\n\
    \    if item == guess[index]\n      result << 0\n    else\n      result << (item\
    \ - guess[index]).abs\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyoq6nw62\nStarted\n.\nFinished in 0.000651391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1535.18 tests/s, 6140.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpykljf1zf\nStarted\n.\nFinished in 0.000647529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1544.33 tests/s, 6177.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03hdpp0o\nStarted\n.\nFinished in 0.000644465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1551.67 tests/s, 6206.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpygmtrnbe\nStarted\n.\nFinished in 0.000700738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1427.07 tests/s, 5708.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1rmr3fie\nStarted\n.\nFinished in 0.000773354 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1293.07 tests/s, 5172.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4pfn9s3m\nStarted\n.\nFinished in 0.000622373 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1606.75 tests/s, 6427.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxy6h4ohg\nStarted\n.\nFinished in 0.000494695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2021.45 tests/s, 8085.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiapvtnh7\nStarted\n.\nFinished in 0.000697257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1434.19 tests/s, 5736.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqo5hl1xh\nStarted\n.\nFinished in 0.001023415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    977.12 tests/s, 3908.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps2cu4wgc\nStarted\n.\nFinished in 0.00062056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1611.45 tests/s, 6445.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa_n05ede\nStarted\n.\nFinished in 0.000667923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1497.18 tests/s, 5988.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpitolm1kr\nStarted\n.\nFinished in 0.000621969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1607.80 tests/s, 6431.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map{|x,y| (x-y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_jbfoh8\nStarted\n.\nFinished in 0.000798597 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1252.20 tests/s, 5008.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0rc3xpo8\nStarted\n.\nFinished in 0.000586079 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1706.25 tests/s, 6825.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map {|x, y| (x - y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe5epe0um\nStarted\n.\nFinished in 0.000644252 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.19 tests/s, 6208.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkehxpq82\nStarted\n.\nFinished in 0.000859624 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1163.30 tests/s, 4653.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2hgufsw8\nStarted\n.\nFinished in 0.000880005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1136.36 tests/s, 4545.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4uo16khs\nStarted\n.\nFinished in 0.000664956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1503.86 tests/s, 6015.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1iz0edsc\nStarted\n.\nFinished in 0.00121583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    822.48 tests/s, 3289.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfb6xw2a\nStarted\n.\nFinished in 0.000767042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1303.71 tests/s, 5214.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4nie1_ve\nStarted\n.\nFinished in 0.000675587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1480.19 tests/s, 5920.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x-y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjhou0x8c\nStarted\n.\nFinished in 0.000556522 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.87 tests/s, 7187.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmput2d20or\nStarted\n.\nFinished in 0.0006796 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1471.45 tests/s, 5885.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnzyjsipe\nStarted\n.\nFinished in 0.000625942 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1597.59 tests/s, 6390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb2w440ov\nStarted\n.\nFinished in 0.0013311 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    751.26 tests/s, 3005.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq8dujumw\nStarted\n.\nFinished in 0.000994567 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1005.46 tests/s, 4021.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |value, index|\n\
    \    result << (value - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3qwp_gt5\nStarted\n.\nFinished in 0.00057073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1752.14 tests/s, 7008.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzr_jg9fq\nStarted\n.\nFinished in 0.000620009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1612.88 tests/s, 6451.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp81z9eqb1\nStarted\n.\nFinished in 0.001255537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    796.47 tests/s, 3185.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5eso45qa\nStarted\n.\nFinished in 0.000940094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1063.72 tests/s, 4254.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxxe3u0rf\nStarted\n.\nFinished in 0.000535191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1868.49 tests/s, 7473.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpemw4f8pm\nStarted\n.\nFinished in 0.001037595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    963.77 tests/s, 3855.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqjno7b0k\nStarted\n.\nFinished in 0.00069195 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1445.19 tests/s, 5780.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfe8tcvk\nStarted\n.\nFinished in 0.000564439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1771.67 tests/s, 7086.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gs| (g - gs).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7lhak336\nStarted\n.\nFinished in 0.000617658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1619.02 tests/s, 6476.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_7ik2az6\nStarted\n.\nFinished in 0.000518658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1928.05 tests/s, 7712.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpef7o95gt\nStarted\n.\nFinished in 0.000610009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1639.32 tests/s, 6557.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18ifawqz\nStarted\n.\nFinished in 0.0017348 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    576.44 tests/s, 2305.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map{|x,y| (x-y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp81mf1kih\nStarted\n.\nFinished in 0.000929239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1076.15 tests/s, 4304.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_oyu54k_\nStarted\n.\nFinished in 0.000861791 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1160.37 tests/s, 4641.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4zgw39zl\nStarted\n.\nFinished in 0.001247422 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    801.65 tests/s, 3206.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5h9w2jx6\nStarted\n.\nFinished in 0.000597515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1673.60 tests/s, 6694.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqm_z06g_\nStarted\n.\nFinished in 0.000655122 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1526.43 tests/s, 6105.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphskegg4p\nStarted\n.\nFinished in 0.000573396 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1744.00 tests/s, 6975.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc7mxqoiz\nStarted\n.\nFinished in 0.000791732 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1263.05 tests/s, 5052.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6wvoofj6\nStarted\n.\nFinished in 0.000789694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1266.31 tests/s, 5065.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ysofqj5\nStarted\n.\nFinished in 0.001479964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    675.69 tests/s, 2702.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4p_h42v9\nStarted\n.\nFinished in 0.000623378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1604.16 tests/s, 6416.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsgn7bra0\nStarted\n.\nFinished in 0.001660621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    602.18 tests/s, 2408.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphwpfj5fh\nStarted\n.\nFinished in 0.00054341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1840.23 tests/s, 7360.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpko7ksgwb\nStarted\n.\nFinished in 0.000953958 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1048.26 tests/s, 4193.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphncd3eo6\nStarted\n.\nFinished in 0.000928807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1076.65 tests/s, 4306.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |game, guess| (game - guess).abs\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0,\
    \ 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0,\
    \ 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n  \
    \  assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2,\
    \ 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcrm95avn\nStarted\n.\nFinished in 0.000847976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1179.28 tests/s, 4717.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_tjtusyw\nStarted\n.\nFinished in 0.001005992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.04 tests/s, 3976.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2m1ajjrl\nStarted\n.\nFinished in 0.000881324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.66 tests/s, 4538.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbb8zzyar\nStarted\n.\nFinished in 0.000642588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1556.21 tests/s, 6224.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp503zd4dh\nStarted\n.\nFinished in 0.001341879 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    745.22 tests/s, 2980.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphw4kdx5s\nStarted\n.\nFinished in 0.000530969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1883.35 tests/s, 7533.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoiil3ikf\nStarted\n.\nFinished in 0.000835358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.09 tests/s, 4788.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, i|\n\
    \    result << (score - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1t9p04v5\nStarted\n.\nFinished in 0.000885193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1129.70 tests/s, 4518.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gs| (g - gs).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp89g3mo3e\nStarted\n.\nFinished in 0.000546472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1829.92 tests/s, 7319.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd267fdin\nStarted\n.\nFinished in 0.001399666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    714.46 tests/s, 2857.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp699dyyfq\nStarted\n.\nFinished in 0.000562688 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1777.18 tests/s, 7108.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3psvxw60\nStarted\n.\nFinished in 0.000814855 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1227.21 tests/s, 4908.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x-y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2uq0tgqk\nStarted\n.\nFinished in 0.000492318 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2031.21 tests/s, 8124.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1nnkqsq5\nStarted\n.\nFinished in 0.001400375 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    714.09 tests/s, 2856.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2uofiu5\nStarted\n.\nFinished in 0.000618635 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1616.46 tests/s, 6465.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpup9nmadi\nStarted\n.\nFinished in 0.000723276 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1382.60 tests/s, 5530.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9qxxaig6\nStarted\n.\nFinished in 0.000965807 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1035.40 tests/s, 4141.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map {|x,y| (x - y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9j1i60aj\nStarted\n.\nFinished in 0.001216589 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    821.97 tests/s, 3287.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfvngsd_e\nStarted\n.\nFinished in 0.000947863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1055.00 tests/s, 4220.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gs| (g - gs).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpch806k3e\nStarted\n.\nFinished in 0.001053583 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    949.14 tests/s, 3796.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwfa91wyt\nStarted\n.\nFinished in 0.00113693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    879.56 tests/s, 3518.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppw8duggp\nStarted\n.\nFinished in 0.001030996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    969.94 tests/s, 3879.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjfgvtyv4\nStarted\n.\nFinished in 0.000503566 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1985.84 tests/s, 7943.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6pvgq5wm\nStarted\n.\nFinished in 0.001340227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    746.14 tests/s, 2984.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmu3r471s\nStarted\n.\nFinished in 0.00087725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1139.93 tests/s, 4559.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbjvfwdy2\nStarted\n.\nFinished in 0.000883203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1132.24 tests/s, 4528.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprmw97g_i\nStarted\n.\nFinished in 0.001318515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    758.43 tests/s, 3033.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjxo9lb65\nStarted\n.\nFinished in 0.001421072 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    703.69 tests/s, 2814.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_c64ojk9\nStarted\n.\nFinished in 0.000972075 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1028.73 tests/s, 4114.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    if score == guess[index]\n      result << 0\n    else\n      result << (score\
    \ - guess[index]).abs\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcxugrcou\nStarted\n.\nFinished in 0.000864972 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1156.11 tests/s, 4624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcqfbooni\nStarted\n.\nFinished in 0.000810294 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1234.12 tests/s, 4936.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwv6hhyqp\nStarted\n.\nFinished in 0.001874005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    533.62 tests/s, 2134.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbec_18_m\nStarted\n.\nFinished in 0.000796411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1255.63 tests/s, 5022.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpntfstkqk\nStarted\n.\nFinished in 0.000670667 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1491.05 tests/s, 5964.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph3nptqrr\nStarted\n.\nFinished in 0.001196695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    835.63 tests/s, 3342.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm4utj093\nStarted\n.\nFinished in 0.001233899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    810.44 tests/s, 3241.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpet_dusw0\nStarted\n.\nFinished in 0.000665963 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1501.58 tests/s, 6006.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsf28bm5b\nStarted\n.\nFinished in 0.00070831 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1411.81 tests/s, 5647.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9tj_flq8\nStarted\n.\nFinished in 0.001005482 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    994.55 tests/s, 3978.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpai7yslf4\nStarted\n.\nFinished in 0.000771032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1296.96 tests/s, 5187.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmjgufbk2\nStarted\n.\nFinished in 0.001243785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    804.00 tests/s, 3215.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpavrssvvo\nStarted\n.\nFinished in 0.000976013 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1024.58 tests/s, 4098.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a,b| (a-b).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg6wf4l49\nStarted\n.\nFinished in 0.000793254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1260.63 tests/s, 5042.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptmrko9l2\nStarted\n.\nFinished in 0.001148562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    870.65 tests/s, 3482.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr0tdllul\nStarted\n.\nFinished in 0.000816008 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1225.48 tests/s, 4901.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq18hu6vx\nStarted\n.\nFinished in 0.000570272 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1753.55 tests/s, 7014.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcby4ntv2\nStarted\n.\nFinished in 0.001337841 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    747.47 tests/s, 2989.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_aeiqxg_\nStarted\n.\nFinished in 0.000960478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1041.15 tests/s, 4164.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |game, guess| (game - guess).abs\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_compare\n    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0,\
    \ 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0,\
    \ 0, 0, 0, 0, 0], candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n  \
    \  assert_equal([2, 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2,\
    \ 0, 0, 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuyq6ko1x\nStarted\n.\nFinished in 0.000669038 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1494.68 tests/s, 5978.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2ol5zhps\nStarted\n.\nFinished in 0.000714014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1400.53 tests/s, 5602.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsck8s9jc\nStarted\n.\nFinished in 0.000581426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1719.91 tests/s, 6879.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbt0vp5d4\nStarted\n.\nFinished in 0.000548229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1824.06 tests/s, 7296.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2cl30vrq\nStarted\n.\nFinished in 0.000535781 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1866.43 tests/s, 7465.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgb7crd9o\nStarted\n.\nFinished in 0.000799349 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1251.02 tests/s, 5004.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8viw7vcr\nStarted\n.\nFinished in 0.000972923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1027.83 tests/s, 4111.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map{|x,y| (x-y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpysg1zs1p\nStarted\n.\nFinished in 0.000939033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1064.93 tests/s, 4259.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkg0izrl0\nStarted\n.\nFinished in 0.000904116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1106.05 tests/s, 4424.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdn7k406q\nStarted\n.\nFinished in 0.001490964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    670.71 tests/s, 2682.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |num, index|\n\
    \    if num == guess[index]\n      result << 0\n    else\n      result << (num\
    \ - guess[index]).abs\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpklfg918v\nStarted\n.\nFinished in 0.000901074 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.79 tests/s, 4439.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl3uj7lfd\nStarted\n.\nFinished in 0.000646118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1547.70 tests/s, 6190.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7bv9giep\nStarted\n.\nFinished in 0.001287295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    776.82 tests/s, 3107.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdaei278o\nStarted\n.\nFinished in 0.000628085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1592.14 tests/s, 6368.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x - y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_2_b8czk\nStarted\n.\nFinished in 0.000964897 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1036.38 tests/s, 4145.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdjvqphev\nStarted\n.\nFinished in 0.001603145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    623.77 tests/s, 2495.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprneirvpn\nStarted\n.\nFinished in 0.000936743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1067.53 tests/s, 4270.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpacwhx4s0\nStarted\n.\nFinished in 0.000539712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1852.84 tests/s, 7411.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x - y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9pjyzxd9\nStarted\n.\nFinished in 0.000709628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1409.19 tests/s, 5636.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a,b| (a-b).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvsll65l_\nStarted\n.\nFinished in 0.000985874 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1014.33 tests/s, 4057.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplkspsrix\nStarted\n.\nFinished in 0.000748645 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1335.75 tests/s, 5342.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbszmigi8\nStarted\n.\nFinished in 0.000610719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1637.41 tests/s, 6549.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppzj77zq7\nStarted\n.\nFinished in 0.000592637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1687.37 tests/s, 6749.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0fio14yi\nStarted\n.\nFinished in 0.000528892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1890.75 tests/s, 7562.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, i|\n\
    \    result << (score - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp14fzh3jt\nStarted\n.\nFinished in 0.000830454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1204.16 tests/s, 4816.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg9_t714q\nStarted\n.\nFinished in 0.000592558 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1687.60 tests/s, 6750.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_4yay40x\nStarted\n.\nFinished in 0.000623075 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1604.94 tests/s, 6419.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg86x6eg7\nStarted\n.\nFinished in 0.001019025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    981.33 tests/s, 3925.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1kp0k9hg\nStarted\n.\nFinished in 0.001167993 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    856.17 tests/s, 3424.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a,b| (a-b).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkifaszpu\nStarted\n.\nFinished in 0.000588721 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1698.60 tests/s, 6794.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp53yroari\nStarted\n.\nFinished in 0.001083934 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    922.57 tests/s, 3690.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x-y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk9f1olf4\nStarted\n.\nFinished in 0.000801663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.41 tests/s, 4989.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa3h4ee45\nStarted\n.\nFinished in 0.00064388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1553.08 tests/s, 6212.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9azqhmz\nStarted\n.\nFinished in 0.000639159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1564.56 tests/s, 6258.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkb992jx8\nStarted\n.\nFinished in 0.000592344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1688.21 tests/s, 6752.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpizyajd_x\nStarted\n.\nFinished in 0.000881121 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1134.92 tests/s, 4539.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4f8ym7z6\nStarted\n.\nFinished in 0.001220229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    819.52 tests/s, 3278.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps9ixpguh\nStarted\n.\nFinished in 0.000852772 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1172.65 tests/s, 4690.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvrmqw6l2\nStarted\n.\nFinished in 0.000626758 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1595.51 tests/s, 6382.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gbx9yo4\nStarted\n.\nFinished in 0.000851851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1173.91 tests/s, 4695.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgnp80_mo\nStarted\n.\nFinished in 0.000618608 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1616.53 tests/s, 6466.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map {|x,y| (x-y).abs}\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfgn8uhr6\nStarted\n.\nFinished in 0.001481947 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    674.79 tests/s, 2699.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, i|\n\
    \    result << (score - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqd9hg875\nStarted\n.\nFinished in 0.000546333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1830.39 tests/s, 7321.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvxy_xsa6\nStarted\n.\nFinished in 0.000544125 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1837.81 tests/s, 7351.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu5522bdz\nStarted\n.\nFinished in 0.001162029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    860.56 tests/s, 3442.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp873smzum\nStarted\n.\nFinished in 0.000836403 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1195.60 tests/s, 4782.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcy3ws0sq\nStarted\n.\nFinished in 0.00105237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    950.24 tests/s, 3800.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd4yuftyp\nStarted\n.\nFinished in 0.000612058 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1633.83 tests/s, 6535.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8xif5ogm\nStarted\n.\nFinished in 0.000712079 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1404.34 tests/s, 5617.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |n, i|\n  \
    \  result << (n - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcxdsct_6\nStarted\n.\nFinished in 0.001030851 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    970.07 tests/s, 3880.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a,b| (a-b).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpucqhzayf\nStarted\n.\nFinished in 0.00094673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1056.27 tests/s, 4225.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp_l7wuh7\nStarted\n.\nFinished in 0.001233677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    810.58 tests/s, 3242.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnfjrc352\nStarted\n.\nFinished in 0.001384727 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    722.16 tests/s, 2888.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoo81r0ok\nStarted\n.\nFinished in 0.001377571 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    725.92 tests/s, 2903.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x - y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_kx90_zs\nStarted\n.\nFinished in 0.000618329 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1617.26 tests/s, 6469.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9cy7zzcl\nStarted\n.\nFinished in 0.000549846 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1818.69 tests/s, 7274.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gs| (g - gs).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr9tjpo8m\nStarted\n.\nFinished in 0.000989071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1011.05 tests/s, 4044.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp74924vie\nStarted\n.\nFinished in 0.000956676 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1045.29 tests/s, 4181.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpttyum_bx\nStarted\n.\nFinished in 0.001174596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    851.36 tests/s, 3405.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4cq6udna\nStarted\n.\nFinished in 0.000627637 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1593.28 tests/s, 6373.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc7fw2thr\nStarted\n.\nFinished in 0.00084684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1180.86 tests/s, 4723.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0eu1gwdl\nStarted\n.\nFinished in 0.000796562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1255.40 tests/s, 5021.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt1274b88\nStarted\n.\nFinished in 0.001000861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    999.14 tests/s, 3996.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb1khz4jx\nStarted\n.\nFinished in 0.001194076 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    837.47 tests/s, 3349.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplo9lnslo\nStarted\n.\nFinished in 0.000720817 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1387.31 tests/s, 5549.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp58k4hak7\nStarted\n.\nFinished in 0.000919981 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1086.98 tests/s, 4347.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gg| (g - gg).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg2qqfu__\nStarted\n.\nFinished in 0.000758862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1317.76 tests/s, 5271.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgxnuiyns\nStarted\n.\nFinished in 0.000866933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1153.49 tests/s, 4613.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7_rcij78\nStarted\n.\nFinished in 0.00083474 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.98 tests/s, 4791.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplam4e_qf\nStarted\n.\nFinished in 0.000858288 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1165.11 tests/s, 4660.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    if score == guess[index]\n      result << 0\n    else\n      result << (score\
    \ - guess[index]).abs\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvmzkrj0m\nStarted\n.\nFinished in 0.001367137 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    731.46 tests/s, 2925.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw7syiuvc\nStarted\n.\nFinished in 0.001103795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    905.97 tests/s, 3623.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpedagz24t\nStarted\n.\nFinished in 0.000627508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1593.61 tests/s, 6374.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv_gualjc\nStarted\n.\nFinished in 0.000876642 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1140.72 tests/s, 4562.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ycimhqd\nStarted\n.\nFinished in 0.000775369 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1289.71 tests/s, 5158.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp62ckn67h\nStarted\n.\nFinished in 0.000876847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1140.45 tests/s, 4561.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9va_8z9\nStarted\n.\nFinished in 0.000998247 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.76 tests/s, 4007.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz7samxnw\nStarted\n.\nFinished in 0.000528513 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1892.10 tests/s, 7568.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa8lynlp_\nStarted\n.\nFinished in 0.000671455 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1489.30 tests/s, 5957.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqk3_rk_x\nStarted\n.\nFinished in 0.000682421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1465.37 tests/s, 5861.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate\
    \ = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpighb7z4o\nStarted\n.\nFinished in 0.000497788 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2008.89 tests/s, 8035.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  result = []\n  game.each_with_index do |g, i|\n  \
    \  result << (g - guess[i]).abs\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_compare\n    candidate = method(:compare)\n\
    \    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0, 0, 0,\
    \ 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
    \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2,\
    \ 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp46a8n2ea\nStarted\n.\nFinished in 0.000485699 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2058.89 tests/s, 8235.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn8jfrdjz\nStarted\n.\nFinished in 0.000496394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2014.53 tests/s, 8058.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3u679tfz\nStarted\n.\nFinished in 0.000942444 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1061.07 tests/s, 4244.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp26_oov9e\nStarted\n.\nFinished in 0.000553252 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1807.49 tests/s, 7229.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsxwglie0\nStarted\n.\nFinished in 0.000526872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1897.99 tests/s, 7591.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x, y| (x - y).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyfm6bkf5\nStarted\n.\nFinished in 0.001182883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    845.39 tests/s, 3381.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |g, gs| (g - gs).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb84eqwak\nStarted\n.\nFinished in 0.000514234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1944.64 tests/s, 7778.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4eb96j85\nStarted\n.\nFinished in 0.000662281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1509.93 tests/s, 6039.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpze0aq8ym\nStarted\n.\nFinished in 0.001776152 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    563.01 tests/s, 2252.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |x,y| (x-y).abs }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0_97nf4s\nStarted\n.\nFinished in 0.00163076 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    613.21 tests/s, 2452.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# I think we all remember that feeling when the result of some long-awaited\n\
    # event is finally known. The feelings and thoughts you have at that moment are\n\
    # definitely worth noting down and comparing.\n# Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n# You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n# Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n# the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n# example:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    def compare(game, guess)\n  game.zip(guess).map { |a, b| (a - b).abs }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
    \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0],\
    \ candidate.call([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2,\
    \ 4, 6], candidate.call([1, 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0,\
    \ 1], candidate.call([1, 2, 3, 5], [-1, 2, 3, 4]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoj6fjyvp\nStarted\n.\nFinished in 0.001333446 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    749.94 tests/s, 2999.75 assertions/s\n"
  exit_code: 0
  status: OK
