{
  "name": "HumanEval_7_filter_by_substring",
  "language": "ruby",
  "results": [
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfuh9a1m9\nStarted\n.\nFinished in 0.000592695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1687.21 tests/s, 6748.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_lt_cfrg\nStarted\n.\nFinished in 0.000628559 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1590.94 tests/s, 6363.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd2ge0f3h\nStarted\n.\nFinished in 0.001026977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n973.73 tests/s, 3894.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxgwg9kej\nStarted\n.\nFinished in 0.000575177 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1738.60 tests/s, 6954.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsbs_0bj5\nStarted\n.\nFinished in 0.000703904 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1420.65 tests/s, 5682.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcl3lqlok\nStarted\n.\nFinished in 0.000608589 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1643.15 tests/s, 6572.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhfoq33o\nStarted\n.\nFinished in 0.000681906 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1466.48 tests/s, 5865.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmghy47fu\nStarted\n.\nFinished in 0.000801624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1247.47 tests/s, 4989.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfxwgcytz\nStarted\n.\nFinished in 0.000829567 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1205.45 tests/s, 4821.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr8tkm6kk\nStarted\n.\nFinished in 0.001296976 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n771.02 tests/s, 3084.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprsmp6ue9\nStarted\n.\nFinished in 0.000885527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1129.27 tests/s, 4517.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfguj9wr7\nStarted\n.\nFinished in 0.0008241 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1213.44 tests/s, 4853.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1x20r8k7\nStarted\n.\nFinished in 0.001188288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n841.55 tests/s, 3366.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1i0kn38\nStarted\n.\nFinished in 0.000986822 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1013.35 tests/s, 4053.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm7a4_b5h\nStarted\n.\nFinished in 0.000934461 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1070.14 tests/s, 4280.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2bq1f4a1\nStarted\n.\nFinished in 0.001004844 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n995.18 tests/s, 3980.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy1udnuhp\nStarted\n.\nFinished in 0.000825691 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1211.11 tests/s, 4844.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbaq1o0h_\nStarted\n.\nFinished in 0.000575695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1737.03 tests/s, 6948.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa4mzgc6v\nStarted\n.\nFinished in 0.000779264 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1283.26 tests/s, 5133.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6q7dleop\nStarted\n.\nFinished in 0.001177844 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n849.01 tests/s, 3396.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxpipu9xs\nStarted\n.\nFinished in 0.001131178 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n884.03 tests/s, 3536.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqdh64pez\nStarted\n.\nFinished in 0.001278245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n782.32 tests/s, 3129.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgxi4g9xz\nStarted\n.\nFinished in 0.000532117 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1879.29 tests/s, 7517.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfwj4k77z\nStarted\n.\nFinished in 0.000628889 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1590.11 tests/s, 6360.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpniluhigw\nStarted\n.\nFinished in 0.001282186 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n779.92 tests/s, 3119.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2hbpsxn8\nStarted\n.\nFinished in 0.000549991 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1818.21 tests/s, 7272.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ar37eho\nStarted\n.\nFinished in 0.000782729 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1277.58 tests/s, 5110.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiu41asyp\nStarted\n.\nFinished in 0.000589501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1696.35 tests/s, 6785.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa86dz0f3\nStarted\n.\nFinished in 0.000887039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1127.35 tests/s, 4509.38 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk9xt7utb\nStarted\n.\nFinished in 0.001641746 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n609.11 tests/s, 2436.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyysi_rm8\nStarted\n.\nFinished in 0.000540736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1849.33 tests/s, 7397.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjwaznzht\nStarted\n.\nFinished in 0.000848774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1178.17 tests/s, 4712.68 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjatu22d\nStarted\n.\nFinished in 0.000909781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1099.17 tests/s, 4396.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpipvlyc5h\nStarted\n.\nFinished in 0.000559571 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.08 tests/s, 7148.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6te44jza\nStarted\n.\nFinished in 0.001138492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n878.35 tests/s, 3513.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1dic0i4b\nStarted\n.\nFinished in 0.000804549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1242.93 tests/s, 4971.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzmu9eo3w\nStarted\n.\nFinished in 0.00055953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.21 tests/s, 7148.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyzssi5nu\nStarted\n.\nFinished in 0.001170535 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n854.31 tests/s, 3417.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv81v7i2d\nStarted\n.\nFinished in 0.000968961 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1032.03 tests/s, 4128.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2lwthpss\nStarted\n.\nFinished in 0.001223019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n817.65 tests/s, 3270.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa8cbt7f5\nStarted\n.\nFinished in 0.000643498 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1554.01 tests/s, 6216.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoam9bl0j\nStarted\n.\nFinished in 0.000853507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1171.64 tests/s, 4686.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdxi_ly_z\nStarted\n.\nFinished in 0.00054233 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1843.90 tests/s, 7375.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnczutra6\nStarted\n.\nFinished in 0.001363611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n733.35 tests/s, 2933.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp09pp_7y7\nStarted\n.\nFinished in 0.000803575 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1244.44 tests/s, 4977.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4e2he8xc\nStarted\n.\nFinished in 0.00108222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n924.03 tests/s, 3696.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6mo4fpmh\nStarted\n.\nFinished in 0.000595184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1680.15 tests/s, 6720.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_mw940hs\nStarted\n.\nFinished in 0.000555659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1799.66 tests/s, 7198.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp59qvt5v5\nStarted\n.\nFinished in 0.000953323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1048.96 tests/s, 4195.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2a65j7y4\nStarted\n.\nFinished in 0.000514236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1944.63 tests/s, 7778.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsozhlr9a\nStarted\n.\nFinished in 0.001280858 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n780.73 tests/s, 3122.91 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjaa4nvpq\nStarted\n.\nFinished in 0.000569732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1755.21 tests/s, 7020.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzd7ijkvd\nStarted\n.\nFinished in 0.001258258 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n794.75 tests/s, 3179.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppo6p4g8a\nStarted\n.\nFinished in 0.000786263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1271.84 tests/s, 5087.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0knc5y4e\nStarted\n.\nFinished in 0.001075781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n929.56 tests/s, 3718.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp60q7709h\nStarted\n.\nFinished in 0.000727149 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1375.23 tests/s, 5500.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpex2nc8l2\nStarted\n.\nFinished in 0.000701899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1424.71 tests/s, 5698.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp841bfrt_\nStarted\n.\nFinished in 0.001287953 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n776.43 tests/s, 3105.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpazzyn__y\nStarted\n.\nFinished in 0.000583445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1713.96 tests/s, 6855.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpinoi8mn_\nStarted\n.\nFinished in 0.000763362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1309.99 tests/s, 5239.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxrh05v99\nStarted\n.\nFinished in 0.000761035 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1314.00 tests/s, 5256.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp04qp96ze\nStarted\n.\nFinished in 0.000775872 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1288.87 tests/s, 5155.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnuxuisrf\nStarted\n.\nFinished in 0.000831158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1203.14 tests/s, 4812.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpikmr6ru0\nStarted\n.\nFinished in 0.000869067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1150.66 tests/s, 4602.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqsudn4x6\nStarted\n.\nFinished in 0.00090127 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1109.55 tests/s, 4438.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuxkn3uek\nStarted\n.\nFinished in 0.000950292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1052.31 tests/s, 4209.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7vp1irka\nStarted\n.\nFinished in 0.000590743 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1692.78 tests/s, 6771.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo6drdhjl\nStarted\n.\nFinished in 0.000614219 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1628.08 tests/s, 6512.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqdx7q5eu\nStarted\n.\nFinished in 0.00094795 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1054.91 tests/s, 4219.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjrpd2gom\nStarted\n.\nFinished in 0.000879964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1136.41 tests/s, 4545.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoexfbvkn\nStarted\n.\nFinished in 0.001048661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n953.60 tests/s, 3814.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp83yr9xrw\nStarted\n.\nFinished in 0.001056346 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n946.66 tests/s, 3786.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_6gck1h9\nStarted\n.\nFinished in 0.000809641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1235.12 tests/s, 4940.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0159qwv7\nStarted\n.\nFinished in 0.000570385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1753.20 tests/s, 7012.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfe0iynes\nStarted\n.\nFinished in 0.001144551 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n873.71 tests/s, 3494.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy6ba80u5\nStarted\n.\nFinished in 0.000993968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1006.07 tests/s, 4024.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptjeqv37m\nStarted\n.\nFinished in 0.001168636 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n855.70 tests/s, 3422.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp__atnm7b\nStarted\n.\nFinished in 0.000947703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1055.18 tests/s, 4220.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_md2fol3\nStarted\n.\nFinished in 0.001212518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n824.73 tests/s, 3298.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3b3bhhlf\nStarted\n.\nFinished in 0.001148975 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n870.34 tests/s, 3481.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe0dtg3ze\nStarted\n.\nFinished in 0.000542497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1843.33 tests/s, 7373.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp35ltzay3\nStarted\n.\nFinished in 0.001156291 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n864.83 tests/s, 3459.34 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphkkhcfx9\nStarted\n.\nFinished in 0.000543486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1839.97 tests/s, 7359.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp21coa7c1\nStarted\n.\nFinished in 0.001408899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n709.77 tests/s, 2839.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkbn8_yw6\nStarted\n.\nFinished in 0.001289029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n775.78 tests/s, 3103.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmph8hv6ttf\nStarted\n.\nFinished in 0.001134273 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n881.62 tests/s, 3526.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ma8_0ag\nStarted\n.\nFinished in 0.000535375 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1867.85 tests/s, 7471.40 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyzrhyzv3\nStarted\n.\nFinished in 0.000851658 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1174.18 tests/s, 4696.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa20_28jb\nStarted\n.\nFinished in 0.00089594 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1116.15 tests/s, 4464.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpb25__zp9\nStarted\n.\nFinished in 0.000942393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1061.13 tests/s, 4244.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptwkrqrwd\nStarted\n.\nFinished in 0.000874792 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1143.13 tests/s, 4572.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkemne7kg\nStarted\n.\nFinished in 0.000549707 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1819.15 tests/s, 7276.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsyxxkd1z\nStarted\n.\nFinished in 0.00052703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1897.43 tests/s, 7589.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5nx8jmyf\nStarted\n.\nFinished in 0.001085162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n921.52 tests/s, 3686.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkyo8a0ep\nStarted\n.\nFinished in 0.000871695 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1147.19 tests/s, 4588.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmxpbknxn\nStarted\n.\nFinished in 0.000971044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.82 tests/s, 4119.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpix8skfxh\nStarted\n.\nFinished in 0.000787203 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1270.32 tests/s, 5081.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvdhiqvki\nStarted\n.\nFinished in 0.001411818 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n708.31 tests/s, 2833.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsvynllz9\nStarted\n.\nFinished in 0.001258263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n794.75 tests/s, 3178.99 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4x83w0l8\nStarted\n.\nFinished in 0.000744346 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1343.46 tests/s, 5373.84 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpufih7n9u\nStarted\n.\nFinished in 0.000777746 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1285.77 tests/s, 5143.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw2zhx8xv\nStarted\n.\nFinished in 0.000940795 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.93 tests/s, 4251.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpv0xa5ee4\nStarted\n.\nFinished in 0.00119244 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n838.62 tests/s, 3354.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt05ovqmn\nStarted\n.\nFinished in 0.001950111 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n512.79 tests/s, 2051.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppqitcp41\nStarted\n.\nFinished in 0.000513151 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.74 tests/s, 7794.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp74npe2hw\nStarted\n.\nFinished in 0.000562137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1778.93 tests/s, 7115.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpug229brb\nStarted\n.\nFinished in 0.000630874 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1585.10 tests/s, 6340.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpymwqsknw\nStarted\n.\nFinished in 0.000599656 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1667.62 tests/s, 6670.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfkx08fjb\nStarted\n.\nFinished in 0.000988489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1011.65 tests/s, 4046.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5wjxl_yd\nStarted\n.\nFinished in 0.000554635 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1802.99 tests/s, 7211.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpngtg4xr9\nStarted\n.\nFinished in 0.000810777 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1233.38 tests/s, 4933.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp238pvux1\nStarted\n.\nFinished in 0.000845356 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1182.93 tests/s, 4731.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpobnrcso3\nStarted\n.\nFinished in 0.000744947 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1342.38 tests/s, 5369.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt3ihs0lr\nStarted\n.\nFinished in 0.001069371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n935.13 tests/s, 3740.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_5vlk2b_\nStarted\n.\nFinished in 0.000672493 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.00 tests/s, 5948.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpovrfx516\nStarted\n.\nFinished in 0.000564811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1770.50 tests/s, 7082.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpel86w2dn\nStarted\n.\nFinished in 0.001029662 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n971.19 tests/s, 3884.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqtn5l7md\nStarted\n.\nFinished in 0.001437858 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n695.48 tests/s, 2781.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpby7b1yow\nStarted\n.\nFinished in 0.000963718 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1037.65 tests/s, 4150.59 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3n8jekqi\nStarted\n.\nFinished in 0.000574642 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1740.21 tests/s, 6960.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptqou6qnc\nStarted\n.\nFinished in 0.000807714 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1238.06 tests/s, 4952.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphoqxefgj\nStarted\n.\nFinished in 0.000672388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.24 tests/s, 5948.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2s__2tqy\nStarted\n.\nFinished in 0.000623008 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1605.12 tests/s, 6420.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1ln8lga6\nStarted\n.\nFinished in 0.001092375 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n915.44 tests/s, 3661.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmposo1d3o0\nStarted\n.\nFinished in 0.000599443 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1668.22 tests/s, 6672.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf089ru7n\nStarted\n.\nFinished in 0.000876853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1140.44 tests/s, 4561.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1e6ig9of\nStarted\n.\nFinished in 0.000849253 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1177.51 tests/s, 4710.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2_o9xzc1\nStarted\n.\nFinished in 0.001009655 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n990.44 tests/s, 3961.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpko4giopk\nStarted\n.\nFinished in 0.000569814 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1754.96 tests/s, 7019.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzlalkq3l\nStarted\n.\nFinished in 0.001087216 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n919.78 tests/s, 3679.12 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps__muwr5\nStarted\n.\nFinished in 0.000731971 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1366.17 tests/s, 5464.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpoachx3wg\nStarted\n.\nFinished in 0.001328126 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n752.94 tests/s, 3011.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjs01vawx\nStarted\n.\nFinished in 0.001127242 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n887.12 tests/s, 3548.48 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpt2idau7n\nStarted\n.\nFinished in 0.000754221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1325.87 tests/s, 5303.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc2u19i3a\nStarted\n.\nFinished in 0.000760622 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1314.71 tests/s, 5258.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgnoi07qb\nStarted\n.\nFinished in 0.000827599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1208.31 tests/s, 4833.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbpsnos3z\nStarted\n.\nFinished in 0.001127503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n886.92 tests/s, 3547.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zjw87dt\nStarted\n.\nFinished in 0.000991147 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1008.93 tests/s, 4035.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvs4tb3lc\nStarted\n.\nFinished in 0.001262981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n791.78 tests/s, 3167.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2nytqcpw\nStarted\n.\nFinished in 0.000576579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1734.37 tests/s, 6937.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2lq2jkig\nStarted\n.\nFinished in 0.001129455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n885.38 tests/s, 3541.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpggdz37ab\nStarted\n.\nFinished in 0.000591361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1691.01 tests/s, 6764.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp20bes2im\nStarted\n.\nFinished in 0.000645491 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1549.21 tests/s, 6196.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd_zchjgk\nStarted\n.\nFinished in 0.001055406 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n947.50 tests/s, 3790.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx_uh4wtg\nStarted\n.\nFinished in 0.000725741 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1377.90 tests/s, 5511.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplejs6zk7\nStarted\n.\nFinished in 0.000787044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1270.58 tests/s, 5082.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsl33t1i_\nStarted\n.\nFinished in 0.000988118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1012.02 tests/s, 4048.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmppn25m6n4\nStarted\n.\nFinished in 0.001438417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n695.21 tests/s, 2780.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiiuuz8xm\nStarted\n.\nFinished in 0.000599752 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1667.36 tests/s, 6669.42 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7yve_4fo\nStarted\n.\nFinished in 0.000933555 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1071.17 tests/s, 4284.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdqceqmr_\nStarted\n.\nFinished in 0.000981528 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1018.82 tests/s, 4075.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpireahblm\nStarted\n.\nFinished in 0.000833869 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1199.23 tests/s, 4796.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8gzfzzfo\nStarted\n.\nFinished in 0.000928945 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1076.49 tests/s, 4305.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw_s_lrik\nStarted\n.\nFinished in 0.000539111 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1854.91 tests/s, 7419.62 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxb0bjqpv\nStarted\n.\nFinished in 0.000894548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1117.88 tests/s, 4471.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy8bu0nab\nStarted\n.\nFinished in 0.001171396 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n853.68 tests/s, 3414.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjroli10_\nStarted\n.\nFinished in 0.000558727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1789.78 tests/s, 7159.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe3l3p7c_\nStarted\n.\nFinished in 0.000819079 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1220.88 tests/s, 4883.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk_cj47vx\nStarted\n.\nFinished in 0.000984614 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1015.63 tests/s, 4062.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_rvw_ht9\nStarted\n.\nFinished in 0.000537841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1859.29 tests/s, 7437.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptupz_7rj\nStarted\n.\nFinished in 0.000571294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1750.41 tests/s, 7001.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7fkkix8h\nStarted\n.\nFinished in 0.001089461 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n917.89 tests/s, 3671.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_l3g0jom\nStarted\n.\nFinished in 0.000930648 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1074.52 tests/s, 4298.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpkfpo6rke\nStarted\n.\nFinished in 0.001089579 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n917.79 tests/s, 3671.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuy97ck1t\nStarted\n.\nFinished in 0.001105489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n904.58 tests/s, 3618.31 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0gipwub\nStarted\n.\nFinished in 0.000903077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.33 tests/s, 4429.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnt3s2trx\nStarted\n.\nFinished in 0.001028372 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n972.41 tests/s, 3889.64 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpus4cy427\nStarted\n.\nFinished in 0.000980854 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1019.52 tests/s, 4078.08 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphbu1ld7g\nStarted\n.\nFinished in 0.001176453 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n850.01 tests/s, 3400.05 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp79nwblvd\nStarted\n.\nFinished in 0.001648556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n606.59 tests/s, 2426.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpscw9f_d3\nStarted\n.\nFinished in 0.000507968 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1968.63 tests/s, 7874.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpktbfk4rh\nStarted\n.\nFinished in 0.000968077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1032.98 tests/s, 4131.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp9yyedemm\nStarted\n.\nFinished in 0.000659289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1516.79 tests/s, 6067.14 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyp0pqt18\nStarted\n.\nFinished in 0.000566583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.97 tests/s, 7059.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpc1j3wtg8\nStarted\n.\nFinished in 0.001045827 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n956.18 tests/s, 3824.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwiqmbxxh\nStarted\n.\nFinished in 0.000583829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1712.83 tests/s, 6851.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpokfk16j0\nStarted\n.\nFinished in 0.000905948 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1103.82 tests/s, 4415.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn9v1_1jg\nStarted\n.\nFinished in 0.00077928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1283.24 tests/s, 5132.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7hx9ml5g\nStarted\n.\nFinished in 0.001261387 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n792.78 tests/s, 3171.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpe2edmszs\nStarted\n.\nFinished in 0.000802727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1245.75 tests/s, 4983.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_i_qzng4\nStarted\n.\nFinished in 0.000581674 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1719.18 tests/s, 6876.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3_hk2eiu\nStarted\n.\nFinished in 0.00078846 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1268.30 tests/s, 5073.18 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpst4h0ju2\nStarted\n.\nFinished in 0.001683742 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n593.92 tests/s, 2375.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp04o3i88h\nStarted\n.\nFinished in 0.000547272 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1827.24 tests/s, 7308.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphl4hd3sk\nStarted\n.\nFinished in 0.001756643 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n569.27 tests/s, 2277.07 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm3lkfsqm\nStarted\n.\nFinished in 0.000695503 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1437.81 tests/s, 5751.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwu2_k9dx\nStarted\n.\nFinished in 0.001388539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n720.18 tests/s, 2880.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz5eep4im\nStarted\n.\nFinished in 0.000581007 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1721.15 tests/s, 6884.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvvuj6fh_\nStarted\n.\nFinished in 0.000842309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1187.21 tests/s, 4748.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp45sdlsb9\nStarted\n.\nFinished in 0.001142055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n875.61 tests/s, 3502.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfn0wq8rv\nStarted\n.\nFinished in 0.001185003 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n843.88 tests/s, 3375.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpiwrr4k_z\nStarted\n.\nFinished in 0.001114897 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n896.94 tests/s, 3587.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6l32dsiq\nStarted\n.\nFinished in 0.00095477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1047.37 tests/s, 4189.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpahrubq0p\nStarted\n.\nFinished in 0.000590073 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1694.71 tests/s, 6778.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd_7nkw7z\nStarted\n.\nFinished in 0.000650557 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1537.14 tests/s, 6148.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpezr36m0_\nStarted\n.\nFinished in 0.000469738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.85 tests/s, 8515.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpahur8b0e\nStarted\n.\nFinished in 0.000460479 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2171.65 tests/s, 8686.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp1rtgb2a\nStarted\n.\nFinished in 0.001163489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n859.48 tests/s, 3437.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6zkd3wlv\nStarted\n.\nFinished in 0.000439964 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2272.91 tests/s, 9091.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_substring\n    candidate = method(:filter_by_substring)\n    assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n",
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp426b7_5e\nStarted\n.\nFinished in 0.000441119 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2266.96 tests/s, 9067.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}