name: HumanEval_19_sort_numbers
language: ruby
results:
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |num|\
    \ num_hash[num] }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptau0puhx\nStarted\n.\nFinished in 0.000596894 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1675.34 tests/s, 8376.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by{|num| NUMBERS.index(num)}.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsq156qdn\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpsq156qdn.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpsq156qdn.rb:7:in `each'\n/tmp/tmpsq156qdn.rb:7:in `sort_by'\n/tmp/tmpsq156qdn.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpsq156qdn.rb:14:in `call'\n/tmp/tmpsq156qdn.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.012756348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.39 tests/s, 78.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpww2li_l0\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000557b83c30c40 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000557b83c30c18\
    \ @start_time=2022-08-02 03:26:15.776701493 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000557b83a62558\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000557b839ce268\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000557b83c30c40 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000557b83a61ba8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000557b839ce268 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000557b83c30c40 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000557b83a61568\
    \ @a_proc=#<Proc:0x0000557b83a615e0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93988978038240>=>#<Proc:0x0000557b83a615e0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000557b83a47ca8\
    \ @a_proc=#<Proc:0x0000557b83a47cd0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93988977933520>=>#<Proc:0x0000557b83a47cd0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppn_e2c4u\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmppn_e2c4u.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.016812816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.48 tests/s, 237.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  # TODO: your code here\n  numbers = numbers.split(\" \")\n  numbers.sort! {\
    \ |a, b| a <=> b }\n  numbers.join(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprwqmejb7\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmprwqmejb7.rb:18:in `test_sort_numbers'\n\
    \     15:     candidate = method(:sort_numbers)\n     16:     assert_equal(\"\"\
    , candidate.call(\"\"))\n     17:     assert_equal(\"three\", candidate.call(\"\
    three\"))\n  => 18:     assert_equal(\"three five nine\", candidate.call(\"three\
    \ five nine\"))\n     19:     assert_equal(\"zero four five seven eight nine\"\
    , candidate.call(\"five zero four seven nine eight\"))\n     20:     assert_equal(\"\
    zero one two three four five six\", candidate.call(\"six five four three two one\
    \ zero\"))\n     21:   end\n<\"three five nine\"> expected but was\n<\"five nine\
    \ three\">\n\ndiff:\n? five nine three five nine\n===============================================================================\n\
    \nFinished in 0.008360051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.62 tests/s, 358.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.map! do |num|\n    num_hash[num]\n  end\n  num_array.sort!\n  num_array.map!\
    \ do |num|\n    num_hash.key(num)\n  end\n  num_array.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp080_i_zl\nStarted\n.\nFinished in 0.00083353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1199.72 tests/s, 5998.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  # TODO: implement me\n  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxd6to8tj\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x0000556c4ba7c968 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000556c4ba7c940\
    \ @start_time=2022-08-02 03:26:16.091847409 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000556c4b8a9de8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000556c4b816d18\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x0000556c4ba7c968 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000556c4b8a9190>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000556c4b816d18 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x0000556c4ba7c968 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556c4b8a8f88\
    \ @a_proc=#<Proc:0x0000556c4b8a8fb0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93923612200880>=>#<Proc:0x0000556c4b8a8fb0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556c4b893778\
    \ @a_proc=#<Proc:0x0000556c4b8937c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93923612112840>=>#<Proc:0x0000556c4b8937c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedi"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfqy1kxnv\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpfqy1kxnv.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.015012533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.61 tests/s, 266.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg1_wiqk9\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055d1792708f8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055d1792708d0\
    \ @start_time=2022-08-02 03:26:16.226383143 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055d17909dd78\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055d17900aca8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055d1792708f8 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055d17909d0f8>, @failures=[], @errors=[#<Test::Unit::Error:0x000055d17900aca8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055d1792708f8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055d17909cdb0\
    \ @a_proc=#<Proc:0x000055d17909ce78 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94358167211640>=>#<Proc:0x000055d17909ce78 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055d179083798\
    \ @a_proc=#<Proc:0x000055d179083810 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94358167107600>=>#<Proc:0x000055d179083810 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeh325kbl\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpeh325kbl.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.011168978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.53 tests/s, 358.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9i9byoq\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpp9i9byoq.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010507691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.17 tests/s, 380.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmple5vfqad\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmple5vfqad.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.013360862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.85 tests/s, 299.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphhpk2jft\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmphhpk2jft.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.021653731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.18 tests/s, 184.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjkq6t2w2\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpjkq6t2w2.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010408212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.08 tests/s, 384.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbiv9ujsy\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpbiv9ujsy.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.00995319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.47 tests/s, 401.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzoqxf5r4\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpzoqxf5r4.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.016663896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.01 tests/s, 240.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvx_bd73x\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpvx_bd73x.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpvx_bd73x.rb:7:in `each'\n/tmp/tmpvx_bd73x.rb:7:in `sort_by'\n/tmp/tmpvx_bd73x.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpvx_bd73x.rb:14:in `call'\n/tmp/tmpvx_bd73x.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.013853452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.18 tests/s, 72.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|x,y| num_hash[x] <=> num_hash[y]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfnw4dyv5\nStarted\n.\nFinished in 0.000770082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1298.56 tests/s, 6492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5_57w03p\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055fa6a6e8920 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055fa6a6e88f8\
    \ @start_time=2022-08-02 03:26:16.184962534 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055fa6a515da0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055fa6a482dc0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055fa6a6e8920 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055fa6a515120>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055fa6a482dc0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055fa6a6e8920 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055fa6a514e78 @a_proc=#<Proc:0x000055fa6a514ef0\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94534013898480>=>#<Proc:0x000055fa6a514ef0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055fa6a4fb810\
    \ @a_proc=#<Proc:0x000055fa6a4fb928 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94534013794600>=>#<Proc:0x000055fa6a4fb928 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sjfsyty\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp6sjfsyty.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp6sjfsyty.rb:7:in `each'\n/tmp/tmp6sjfsyty.rb:7:in `sort_by'\n/tmp/tmp6sjfsyty.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp6sjfsyty.rb:14:in `call'\n/tmp/tmp6sjfsyty.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.0131378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.12 tests/s, 76.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |num|\
    \ number_hash[num] }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpic_nj0so\nStarted\n.\nFinished in 0.000561298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1781.58 tests/s, 8907.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdn0jb5k3\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpdn0jb5k3.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.016605208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.22 tests/s, 240.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmdltj7qm\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpmdltj7qm.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpmdltj7qm.rb:7:in `each'\n/tmp/tmpmdltj7qm.rb:7:in `sort_by'\n/tmp/tmpmdltj7qm.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpmdltj7qm.rb:14:in `call'\n/tmp/tmpmdltj7qm.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006917435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.56 tests/s, 144.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxtdp1urg\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x00005635f95f0bd8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005635f95f0bb0\
    \ @start_time=2022-08-02 03:26:17.556000159 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005635f941e0a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005635f938aa88\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x00005635f95f0bd8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005635f941d888>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005635f938aa88 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x00005635f95f0bd8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005635f941d248\
    \ @a_proc=#<Proc:0x00005635f941d270 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94789815095920>=>#<Proc:0x00005635f941d270 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005635f94076f0\
    \ @a_proc=#<Proc:0x00005635f9407718 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94789815007000>=>#<Proc:0x00005635f9407718 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkm5n46bo\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpkm5n46bo.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.012334206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.08 tests/s, 324.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5cq6kd1l\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055c32b424c00 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055c32b424bd8\
    \ @start_time=2022-08-02 03:26:17.704009687 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055c32b252148\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055c32b1bead8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055c32b424c00 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055c32b251a90>, @failures=[], @errors=[#<Test::Unit::Error:0x000055c32b1bead8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055c32b424c00 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c32b251360\
    \ @a_proc=#<Proc:0x000055c32b251450 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94296730834000>=>#<Proc:0x000055c32b251450 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c32b23b740\
    \ @a_proc=#<Proc:0x000055c32b23b768 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94296730744680>=>#<Proc:0x000055c32b23b768 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.map! { |num| num_hash[num] }\n  num_array.sort!\n  num_array.map!\
    \ { |num| num_hash.key(num) }\n  num_array.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1tmdzgis\nStarted\n.\nFinished in 0.000581735 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1719.00 tests/s, 8594.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.map! { |num| num_hash[num] }\n  num_array.sort!\n  num_array.map!\
    \ { |num| num_hash.key(num) }\n  num_array.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_fo0smft\nStarted\n.\nFinished in 0.000685095 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1459.65 tests/s, 7298.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph8v4got8\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x000055f3aff90968 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055f3aff90940\
    \ @start_time=2022-08-02 03:26:17.846462467 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055f3afdc1dd0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055f3afd2ed78\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x000055f3aff90968 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055f3afdc13a8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055f3afd2ed78 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x000055f3aff90968 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f3afdc0ed0\
    \ @a_proc=#<Proc:0x000055f3afdc0ef8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94505115848440>=>#<Proc:0x000055f3afdc0ef8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f3afda78b8\
    \ @a_proc=#<Proc:0x000055f3afda7930 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94505115744560>=>#<Proc:0x000055f3afda7930 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4d31lq4u\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp4d31lq4u.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp4d31lq4u.rb:7:in `each'\n/tmp/tmp4d31lq4u.rb:7:in `sort_by'\n/tmp/tmp4d31lq4u.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp4d31lq4u.rb:14:in `call'\n/tmp/tmp4d31lq4u.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.007173563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.40 tests/s, 139.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort! { |a, b| NUMBERS[a] <=> NUMBERS[b]\
    \ }\n  nums.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq4nnr78r\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpq4nnr78r.rb:8:in `block in sort_numbers'\n\
    /tmp/tmpq4nnr78r.rb:8:in `sort!'\n/tmp/tmpq4nnr78r.rb:8:in `sort_numbers'\n/tmp/tmpq4nnr78r.rb:17:in\
    \ `call'\n/tmp/tmpq4nnr78r.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.013363605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.83 tests/s, 149.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplfjgzm4x\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x000056418a6a8b88 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000056418a6a8b60\
    \ @start_time=2022-08-02 03:26:17.815407231 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056418a4da068\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000056418a446b60\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x000056418a6a8b88\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000056418a4d9758>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000056418a446b60 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x000056418a6a8b88 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056418a4d9230\
    \ @a_proc=#<Proc:0x000056418a4d9258 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94839493202520>=>#<Proc:0x000056418a4d9258 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056418a4bf6c8\
    \ @a_proc=#<Proc:0x000056418a4bf790 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94839493097360>=>#<Proc:0x000056418a4bf790 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8ibsyc5\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000555a05f08b60 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000555a05f08b38\
    \ @start_time=2022-08-02 03:26:18.054911009 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000555a05d3a310\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000555a05ca6278\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000555a05f08b60 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000555a05d396b8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000555a05ca6278 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000555a05f08b60 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555a05d39320\
    \ @a_proc=#<Proc:0x0000555a05d39348 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93845133169480>=>#<Proc:0x0000555a05d39348 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555a05d1fb78\
    \ @a_proc=#<Proc:0x0000555a05d1fbf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93845133065200>=>#<Proc:0x0000555a05d1fbf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqyfnknrv\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x00005610396dc8c0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005610396dc898\
    \ @start_time=2022-08-02 03:26:17.855244696 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056103950dbc0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000056103947ac58\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x00005610396dc8c0 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000056103950d058>, @failures=[], @errors=[#<Test::Unit::Error:0x000056103947ac58\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x00005610396dc8c0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056103950ccc0\
    \ @a_proc=#<Proc:0x000056103950cd88 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94627681062280>=>#<Proc:0x000056103950cd88 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005610394f36d0\
    \ @a_proc=#<Proc:0x00005610394f36f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94627680958200>=>#<Proc:0x00005610394f36f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_digit(number) }.join(' ')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpacp1w4wb\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_digit'\
    \ for #<TestHumanEval:0x0000563f64efc870 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000563f64efc848\
    \ @start_time=2022-08-02 03:26:18.086713112 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000563f64d2daf8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000563f64c9ac08\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_digit' for #<TestHumanEval:0x0000563f64efc870 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000563f64d2cf90>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000563f64c9ac08 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_digit' for #<TestHumanEval:0x0000563f64efc870 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000563f64d2cae0\
    \ @a_proc=#<Proc:0x0000563f64d2cb58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94830274464600>=>#<Proc:0x0000563f64d2cb58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000563f64d135b8\
    \ @a_proc=#<Proc:0x0000563f64d13630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94830274360880>=>#<Proc:0x0000563f64d13630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunn"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphgpfzsky\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055e8ac150a78 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055e8ac150a50\
    \ @start_time=2022-08-02 03:26:17.974627173 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055e8abf82188\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055e8abeeeaa0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055e8ac150a78 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055e8abf81490>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055e8abeeeaa0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055e8ac150a78 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055e8abf811e8 @a_proc=#<Proc:0x000055e8abf81210\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94457805935120>=>#<Proc:0x000055e8abf81210 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055e8abf67b58\
    \ @a_proc=#<Proc:0x000055e8abf67b80 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94457805831040>=>#<Proc:0x000055e8abf67b80 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS[num] }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoqywdtsx\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpoqywdtsx.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpoqywdtsx.rb:7:in `each'\n/tmp/tmpoqywdtsx.rb:7:in `sort_by'\n/tmp/tmpoqywdtsx.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpoqywdtsx.rb:14:in `call'\n/tmp/tmpoqywdtsx.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.010012342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.88 tests/s, 99.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp209lppfx\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x00005629474bccf8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005629474bccd0\
    \ @start_time=2022-08-02 03:26:18.183730344 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005629472ea7b8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005629472562e8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x00005629474bccf8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005629472e9f20>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005629472562e8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x00005629474bccf8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005629472e97a0\
    \ @a_proc=#<Proc:0x00005629472e9818 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94735287883800>=>#<Proc:0x00005629472e9818 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005629472d3e28\
    \ @a_proc=#<Proc:0x00005629472d3e50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94735287795280>=>#<Proc:0x00005629472d3e50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl5tkngte\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpl5tkngte.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014717679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.95 tests/s, 271.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgx3c8qs3\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpgx3c8qs3.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpgx3c8qs3.rb:7:in `each'\n/tmp/tmpgx3c8qs3.rb:7:in `sort_by'\n/tmp/tmpgx3c8qs3.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpgx3c8qs3.rb:14:in `call'\n/tmp/tmpgx3c8qs3.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.012061464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.91 tests/s, 82.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpai4n3baj\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpai4n3baj.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpai4n3baj.rb:7:in `each'\n/tmp/tmpai4n3baj.rb:7:in `sort_by'\n/tmp/tmpai4n3baj.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpai4n3baj.rb:14:in `call'\n/tmp/tmpai4n3baj.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.009555091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.66 tests/s, 104.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxj4h0e7d\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpxj4h0e7d.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpxj4h0e7d.rb:7:in `each'\n/tmp/tmpxj4h0e7d.rb:7:in `sort_by'\n/tmp/tmpxj4h0e7d.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpxj4h0e7d.rb:14:in `call'\n/tmp/tmpxj4h0e7d.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008215147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.73 tests/s, 121.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5u24nf9v\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp5u24nf9v.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014266713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.09 tests/s, 280.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi9gyzdr6\nStarted\n.\nFinished in 0.001301911 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    768.10 tests/s, 3840.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp37t8lrxr\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x0000561f96b048f0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000561f96b048c8\
    \ @start_time=2022-08-02 03:26:19.492811513 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000561f96935ba0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000561f968a2c88\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x0000561f96b048f0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000561f96935010>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000561f968a2c88 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x0000561f96b048f0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000561f96934d40\
    \ @a_proc=#<Proc:0x0000561f96934d68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94693670210920>=>#<Proc:0x0000561f96934d68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000561f9691b5e8\
    \ @a_proc=#<Proc:0x0000561f9691b610 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94693670106640>=>#<Proc:0x0000561f9691b610 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp29fv8b34\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x0000556bf923cb10 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000556bf923cae8\
    \ @start_time=2022-08-02 03:26:19.479953994 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000556bf906dfc8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000556bf8fdaac0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x0000556bf923cb10 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000556bf906d4d8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000556bf8fdaac0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x0000556bf923cb10 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556bf906d190\
    \ @a_proc=#<Proc:0x0000556bf906d1b8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93922227835320>=>#<Proc:0x0000556bf906d1b8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556bf9053628\
    \ @a_proc=#<Proc:0x0000556bf9053650 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93922227730000>=>#<Proc:0x0000556bf9053650 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfvefbti\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpqfvefbti.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009661125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 414.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpofdq_i3s\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpofdq_i3s.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014044677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.20 tests/s, 284.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers_array = numbers.split(' ')\n\
    \  numbers_array.sort! do |a, b|\n    numbers_hash[a] <=> numbers_hash[b]\n  end\n\
    \  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0r_6ujs2\nStarted\n.\nFinished in 0.000874019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1144.14 tests/s, 5720.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ssbryq2\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp8ssbryq2.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010041161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.59 tests/s, 398.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort! { |a, b| num_to_int(a) <=> num_to_int(b)\
    \ }\n  nums.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8cxibvmh\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x00005608767f0b50 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005608767f0b28\
    \ @start_time=2022-08-02 03:26:19.725109408 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056087661e070\
    \ @assertion_count=2, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000056087658e128\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x00005608767f0b50 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000056087661d418>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000056087658e128 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x00005608767f0b50 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000056087661d170 @a_proc=#<Proc:0x000056087661d198\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94594345849240>=>#<Proc:0x000056087661d198 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000560876607730\
    \ @a_proc=#<Proc:0x0000560876607780 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94594345760640>=>#<Proc:0x0000560876607780 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| numeral_to_number(num) }.join(' ')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2iw7j47l\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x000055f3553188c0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055f355318898\
    \ @start_time=2022-08-02 03:26:19.533072147 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055f355149c38\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055f3550b6b18\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x000055f3553188c0\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055f355148fe0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055f3550b6b18 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x000055f3553188c0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f355148cc0\
    \ @a_proc=#<Proc:0x000055f355148ce8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94503592824040>=>#<Proc:0x000055f355148ce8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f35512f658\
    \ @a_proc=#<Proc:0x000055f35512f680 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94503592720000>=>#<Proc:0x000055f35512f680 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort! { |a, b| num_to_i(a) <=> num_to_i(b)\
    \ }\n  nums.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuak8_yp3\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055efdd9a0948 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055efdd9a0920\
    \ @start_time=2022-08-02 03:26:19.69559611 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055efdd7cdcb0\
    \ @assertion_count=2, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055efdd73a410\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055efdd9a0948 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055efdd7cd1e8>, @failures=[], @errors=[#<Test::Unit::Error:0x000055efdd73a410\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055efdd9a0948 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055efdd7ccdb0\
    \ @a_proc=#<Proc:0x000055efdd7ccdd8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94488701488600>=>#<Proc:0x000055efdd7ccdd8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055efdd7b75f0\
    \ @a_proc=#<Proc:0x000055efdd7b7618 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94488701400600>=>#<Proc:0x000055efdd7b7618 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"T"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv_ae4i0m\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpv_ae4i0m.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009851677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.51 tests/s, 406.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort_by! {|num| num_hash[num]}\n  num_array.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwxontf7o\nStarted\n.\nFinished in 0.000776728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1287.45 tests/s, 6437.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpizkieq4d\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055a181750be8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a181750bc0\
    \ @start_time=2022-08-02 03:26:19.857649652 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a181582488\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a1814ee328\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055a181750be8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055a181581b50>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055a1814ee328 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055a181750be8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a181581498\
    \ @a_proc=#<Proc:0x000055a181581510 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94152148129040>=>#<Proc:0x000055a181581510 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a181567d40\
    \ @a_proc=#<Proc:0x000055a181567d68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94152148024680>=>#<Proc:0x000055a181567d68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split\n  num_array.sort!\
    \ { |a, b| num_hash[a] <=> num_hash[b] }\n  num_array.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt_o6behq\nStarted\n.\nFinished in 0.00070892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1410.60 tests/s, 7052.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |a, b| NUMBERS[a]\
    \ <=> NUMBERS[b] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6n_em_2m\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp6n_em_2m.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp6n_em_2m.rb:8:in `sort!'\n/tmp/tmp6n_em_2m.rb:8:in `sort_numbers'\n/tmp/tmp6n_em_2m.rb:17:in\
    \ `call'\n/tmp/tmp6n_em_2m.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.005920801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.90 tests/s, 337.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_digit(number) }.join(' ')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfoinc1nu\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_digit'\
    \ for #<TestHumanEval:0x00005623df8b4a80 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005623df8b4a58\
    \ @start_time=2022-08-02 03:26:20.07105969 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005623df6e5f10\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005623df652e90\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_digit' for #<TestHumanEval:0x00005623df8b4a80 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005623df6e5308>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005623df652e90 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_digit' for #<TestHumanEval:0x00005623df8b4a80 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005623df6e50d8\
    \ @a_proc=#<Proc:0x00005623df6e5100 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94712072392960>=>#<Proc:0x00005623df6e5100 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005623df6cb9d0\
    \ @a_proc=#<Proc:0x00005623df6cba20 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94712072288800>=>#<Proc:0x00005623df6cba20 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunne"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|x,y| num_hash[x] <=> num_hash[y]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmproam6d1r\nStarted\n.\nFinished in 0.000675452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1480.49 tests/s, 7402.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(\" \")\n  numbers_array.sort! { |x, y| NUMBERS[x]\
    \ <=> NUMBERS[y] }\n  numbers_array.join(\" \")\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpufhthmkv\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpufhthmkv.rb:8:in `block in sort_numbers'\n\
    /tmp/tmpufhthmkv.rb:8:in `sort!'\n/tmp/tmpufhthmkv.rb:8:in `sort_numbers'\n/tmp/tmpufhthmkv.rb:17:in\
    \ `call'\n/tmp/tmpufhthmkv.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.015529912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.39 tests/s, 128.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq8gbyngf\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpq8gbyngf.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.022976037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.52 tests/s, 174.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphvzb6miv\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000558a2f468b10 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000558a2f468ae8\
    \ @start_time=2022-08-02 03:26:20.973381432 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000558a2f29a1f8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000558a2f206160\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000558a2f468b10 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000558a2f2995a0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000558a2f206160 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000558a2f468b10 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558a2f2992d0\
    \ @a_proc=#<Proc:0x0000558a2f2992f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94051985101560>=>#<Proc:0x0000558a2f2992f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558a2f27fb28\
    \ @a_proc=#<Proc:0x0000558a2f27fb50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94051984997200>=>#<Proc:0x0000558a2f27fb50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| NUMBERS.index(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp3ihyk1p\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpp3ihyk1p.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpp3ihyk1p.rb:7:in `each'\n/tmp/tmpp3ihyk1p.rb:7:in `sort_by'\n/tmp/tmpp3ihyk1p.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpp3ihyk1p.rb:14:in `call'\n/tmp/tmpp3ihyk1p.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.010705861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.41 tests/s, 93.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpco_xvc94\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x0000562e427ac8f0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000562e427ac8c8\
    \ @start_time=2022-08-02 03:26:21.37975439 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000562e425ddba0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000562e4254ac88\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x0000562e427ac8f0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000562e425dd010>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000562e4254ac88 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x0000562e427ac8f0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000562e425dcd40\
    \ @a_proc=#<Proc:0x0000562e425dcd68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94756681928040>=>#<Proc:0x0000562e425dcd68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000562e425c35e8\
    \ @a_proc=#<Proc:0x0000562e425c3610 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94756681823760>=>#<Proc:0x0000562e425c3610 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedia"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm5e0dtut\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpm5e0dtut.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpm5e0dtut.rb:7:in `each'\n/tmp/tmpm5e0dtut.rb:7:in `sort_by'\n/tmp/tmpm5e0dtut.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpm5e0dtut.rb:14:in `call'\n/tmp/tmpm5e0dtut.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.010260931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.46 tests/s, 97.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp892lr0zs\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp892lr0zs.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.012050473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.98 tests/s, 331.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(\" \")\n  num_array.sort! {|x,y| num_hash[x] <=> num_hash[y]}\n\
    \  num_array.join(\" \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5b0_alnk\nStarted\n.\nFinished in 0.000693644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1441.66 tests/s, 7208.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdevrqljz\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpdevrqljz.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010944764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.37 tests/s, 365.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  numbers_array\
    \ = numbers.split(' ')\n  numbers_array.sort! {|a, b| numbers_hash[a] <=> numbers_hash[b]}\n\
    \  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpodoctkos\nStarted\n.\nFinished in 0.000584446 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1711.02 tests/s, 8555.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp29wbzzme\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x0000564f96b0cc00 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000564f96b0cbd8\
    \ @start_time=2022-08-02 03:26:21.481181974 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000564f9693a148\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000564f968a6ad8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x0000564f96b0cc00\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000564f96939a90>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000564f968a6ad8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x0000564f96b0cc00 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000564f96939360\
    \ @a_proc=#<Proc:0x0000564f96939450 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94899828659280>=>#<Proc:0x0000564f96939450 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000564f96923740\
    \ @a_proc=#<Proc:0x0000564f96923768 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94899828569960>=>#<Proc:0x0000564f96923768 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1cbs5jqf\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp1cbs5jqf.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp1cbs5jqf.rb:7:in `each'\n/tmp/tmp1cbs5jqf.rb:7:in `sort_by'\n/tmp/tmp1cbs5jqf.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp1cbs5jqf.rb:14:in `call'\n/tmp/tmp1cbs5jqf.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008347141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.80 tests/s, 119.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd5kyfmvr\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpd5kyfmvr.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014219195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.33 tests/s, 281.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmply_sz5tt\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x000056236e7dcb88 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000056236e7dcb60\
    \ @start_time=2022-08-02 03:26:21.695331582 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056236e60e068\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000056236e57ab60\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x000056236e7dcb88\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000056236e60d758>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000056236e57ab60 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x000056236e7dcb88 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056236e60d230\
    \ @a_proc=#<Proc:0x000056236e60d258 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94710175683160>=>#<Proc:0x000056236e60d258 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056236e5f36c8\
    \ @a_proc=#<Proc:0x000056236e5f3790 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94710175578000>=>#<Proc:0x000056236e5f3790 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqie9o0g5\nStarted\n.\nFinished in 0.00133979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    746.39 tests/s, 3731.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzj2_g_v4\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpzj2_g_v4.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.024483823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.84 tests/s, 163.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9h7a21l_\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp9h7a21l_.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp9h7a21l_.rb:7:in `each'\n/tmp/tmp9h7a21l_.rb:7:in `sort_by'\n/tmp/tmp9h7a21l_.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp9h7a21l_.rb:14:in `call'\n/tmp/tmp9h7a21l_.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.009614256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.01 tests/s, 104.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_xh0fvix\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp_xh0fvix.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp_xh0fvix.rb:7:in `each'\n/tmp/tmp_xh0fvix.rb:7:in `sort_by'\n/tmp/tmp_xh0fvix.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp_xh0fvix.rb:14:in `call'\n/tmp/tmp_xh0fvix.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.012862074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.75 tests/s, 77.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.sort! { |a, b| num_hash[a] <=> num_hash[b] }\n  num_array.join(' ')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkn6a31sr\nStarted\n.\nFinished in 0.001106856 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    903.46 tests/s, 4517.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|x,y| num_hash[x] <=> num_hash[y]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7f0q7vc9\nStarted\n.\nFinished in 0.000615556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1624.55 tests/s, 8122.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmp4em0u9\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpmp4em0u9.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpmp4em0u9.rb:7:in `each'\n/tmp/tmpmp4em0u9.rb:7:in `sort_by'\n/tmp/tmpmp4em0u9.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpmp4em0u9.rb:14:in `call'\n/tmp/tmpmp4em0u9.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.013270508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.36 tests/s, 75.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpitu2_lvz\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpitu2_lvz.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.017053927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.64 tests/s, 234.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyieypn5p\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x00005600b1948c18 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005600b1948bf0\
    \ @start_time=2022-08-02 03:26:22.505219097 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005600b177a238\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005600b16e6dd0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x00005600b1948c18 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x00005600b1779978>, @failures=[], @errors=[#<Test::Unit::Error:0x00005600b16e6dd0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x00005600b1948c18 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005600b1779310\
    \ @a_proc=#<Proc:0x00005600b1779338 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94560977392440>=>#<Proc:0x00005600b1779338 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005600b175f848\
    \ @a_proc=#<Proc:0x00005600b175f870 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94560977287280>=>#<Proc:0x00005600b175f870 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMERALS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw2y6slje\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMERALS\n  Did you mean?  Numeric\n/tmp/tmpw2y6slje.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpw2y6slje.rb:7:in `each'\n/tmp/tmpw2y6slje.rb:7:in `sort_by'\n/tmp/tmpw2y6slje.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpw2y6slje.rb:14:in `call'\n/tmp/tmpw2y6slje.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.007702813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.82 tests/s, 129.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_digit(number) }.join(' ')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnl2tgfl4\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_digit'\
    \ for #<TestHumanEval:0x000055fd73900ad0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055fd73900aa8\
    \ @start_time=2022-08-02 03:26:22.794249988 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055fd73731fb0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055fd7369ee40\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_digit' for #<TestHumanEval:0x000055fd73900ad0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055fd737313d0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055fd7369ee40 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_digit' for #<TestHumanEval:0x000055fd73900ad0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055fd73731178\
    \ @a_proc=#<Proc:0x000055fd737311a0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94547052007840>=>#<Proc:0x000055fd737311a0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055fd737179d0\
    \ @a_proc=#<Proc:0x000055fd737179f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94547051903480>=>#<Proc:0x000055fd737179f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunn"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpewkj3uju\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpewkj3uju.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpewkj3uju.rb:7:in `each'\n/tmp/tmpewkj3uju.rb:7:in `sort_by'\n/tmp/tmpewkj3uju.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpewkj3uju.rb:14:in `call'\n/tmp/tmpewkj3uju.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.010147488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.55 tests/s, 98.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpspbyfu3p\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000561241428b88 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000561241428b60\
    \ @start_time=2022-08-02 03:26:22.858479449 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056124125a400\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005612411c6a20\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000561241428b88 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000561241259a28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005612411c6a20 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000561241428b88 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000561241259460\
    \ @a_proc=#<Proc:0x0000561241259488 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94636402381960>=>#<Proc:0x0000561241259488 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056124123fd08\
    \ @a_proc=#<Proc:0x000056124123fd30 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94636402277680>=>#<Proc:0x000056124123fd30 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9c11xuci\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x0000558a4e1bcd70 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000558a4e1bcd48\
    \ @start_time=2022-08-02 03:26:23.264090186 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000558a4dfea8a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000558a4df56298\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x0000558a4e1bcd70 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x0000558a4dfe9fc0>, @failures=[], @errors=[#<Test::Unit::Error:0x0000558a4df56298\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x0000558a4e1bcd70 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558a4dfe9958\
    \ @a_proc=#<Proc:0x0000558a4dfe9a48 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94052502379080>=>#<Proc:0x0000558a4dfe9a48 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558a4dfcfe90\
    \ @a_proc=#<Proc:0x0000558a4dfcff08 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94052502273800>=>#<Proc:0x0000558a4dfcff08 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpwuubyd\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x0000558c41d409b8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000558c41d40990\
    \ @start_time=2022-08-02 03:26:23.249427571 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000558c41b71d58\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000558c41adeda0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x0000558c41d409b8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000558c41b711f0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000558c41adeda0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x0000558c41d409b8 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000558c41b70ed0 @a_proc=#<Proc:0x0000558c41b70f20\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94060886298400>=>#<Proc:0x0000558c41b70f20 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558c41b5b878\
    \ @a_proc=#<Proc:0x0000558c41b5b9b8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94060886211000>=>#<Proc:0x0000558c41b5b9b8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw9bofml0\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x0000561431b00d60 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000561431b00d38\
    \ @start_time=2022-08-02 03:26:23.128085029 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005614318ba830\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000561431826158\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x0000561431b00d60 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005614318b9f98>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000561431826158 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x0000561431b00d60 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00005614318b98b8 @a_proc=#<Proc:0x00005614318b99a8\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94644730567080>=>#<Proc:0x00005614318b99a8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005614318a3db0\
    \ @a_proc=#<Proc:0x00005614318a3e50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94644730478160>=>#<Proc:0x00005614318a3e50 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|x,y| num_hash[x] <=> num_hash[y]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp021f0tkx\nStarted\n.\nFinished in 0.00058185 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1718.66 tests/s, 8593.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp32zecpjf\nStarted\n.\nFinished in 0.000567691 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1761.52 tests/s, 8807.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcofx8rrx\nStarted\n.\nFinished in 0.000641953 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1557.75 tests/s, 7788.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsacyl26b\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpsacyl26b.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.027726234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.07 tests/s, 144.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |x, y| NUMBERS[x]\
    \ <=> NUMBERS[y] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0d89gobc\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp0d89gobc.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp0d89gobc.rb:8:in `sort!'\n/tmp/tmp0d89gobc.rb:8:in `sort_numbers'\n/tmp/tmp0d89gobc.rb:17:in\
    \ `call'\n/tmp/tmp0d89gobc.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.007876136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.97 tests/s, 253.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_c8zfv7h\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp_c8zfv7h.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp_c8zfv7h.rb:7:in `each'\n/tmp/tmp_c8zfv7h.rb:7:in `sort_by'\n/tmp/tmp_c8zfv7h.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp_c8zfv7h.rb:14:in `call'\n/tmp/tmp_c8zfv7h.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006947632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.93 tests/s, 143.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort! { |a, b| NUMBERS[a] <=> NUMBERS[b]\
    \ }\n  nums.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp__gqyr6q\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp__gqyr6q.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp__gqyr6q.rb:8:in `sort!'\n/tmp/tmp__gqyr6q.rb:8:in `sort_numbers'\n/tmp/tmp__gqyr6q.rb:17:in\
    \ `call'\n/tmp/tmp__gqyr6q.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.008508801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.53 tests/s, 235.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_zcopcr\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x00005555d3830c60 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005555d3830c38\
    \ @start_time=2022-08-02 03:26:23.683795554 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005555d3662578\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005555d35ce378\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x00005555d3830c60 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005555d3661e20>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005555d35ce378 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x00005555d3830c60 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005555d3661588\
    \ @a_proc=#<Proc:0x00005555d36615d8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93827107263960>=>#<Proc:0x00005555d36615d8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005555d3647d68\
    \ @a_proc=#<Proc:0x00005555d3647db8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93827107159480>=>#<Proc:0x00005555d3647db8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf_ho6jv4\nStarted\n.\nFinished in 0.001222213 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    818.19 tests/s, 4090.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplp6p7kxg\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmplp6p7kxg.rb:7:in `block in sort_numbers'\n\
    /tmp/tmplp6p7kxg.rb:7:in `each'\n/tmp/tmplp6p7kxg.rb:7:in `sort_by'\n/tmp/tmplp6p7kxg.rb:7:in\
    \ `sort_numbers'\n/tmp/tmplp6p7kxg.rb:14:in `call'\n/tmp/tmplp6p7kxg.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008740798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.41 tests/s, 114.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpznkpdvy0\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x0000556eb225c9b8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000556eb225c990\
    \ @start_time=2022-08-02 03:26:23.766175998 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000556eb208df88\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000556eb1ffa8a0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x0000556eb225c9b8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000556eb208d3d0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000556eb1ffa8a0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x0000556eb225c9b8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556eb208d150\
    \ @a_proc=#<Proc:0x0000556eb208d178 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93933921685880>=>#<Proc:0x0000556eb208d178 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000556eb2073ae8\
    \ @a_proc=#<Proc:0x0000556eb2073b38 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93933921581880>=>#<Proc:0x0000556eb2073b38 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedi"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpua0cmy89\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpua0cmy89.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpua0cmy89.rb:7:in `each'\n/tmp/tmpua0cmy89.rb:7:in `sort_by'\n/tmp/tmpua0cmy89.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpua0cmy89.rb:14:in `call'\n/tmp/tmpua0cmy89.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.013729107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.84 tests/s, 72.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |a, b| NUMBERS[a]\
    \ <=> NUMBERS[b] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4vtp3f7v\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp4vtp3f7v.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp4vtp3f7v.rb:8:in `sort!'\n/tmp/tmp4vtp3f7v.rb:8:in `sort_numbers'\n/tmp/tmp4vtp3f7v.rb:17:in\
    \ `call'\n/tmp/tmp4vtp3f7v.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.014635678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.33 tests/s, 136.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1wgwja7p\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp1wgwja7p.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.011725821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.28 tests/s, 341.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpir_steh5\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x000055ae43ed4a80 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055ae43ed4a58\
    \ @start_time=2022-08-02 03:26:24.459840448 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055ae43d05f10\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055ae43c72e90\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x000055ae43ed4a80 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055ae43d05308>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055ae43c72e90 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x000055ae43ed4a80 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055ae43d050d8\
    \ @a_proc=#<Proc:0x000055ae43d05100 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94206950396160>=>#<Proc:0x000055ae43d05100 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055ae43ceb9d0\
    \ @a_proc=#<Proc:0x000055ae43ceba20 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94206950292000>=>#<Proc:0x000055ae43ceba20 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedi"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.sort_by! { |num| num_hash[num] }\n  num_array.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpffo64iyf\nStarted\n.\nFinished in 0.000808203 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1237.31 tests/s, 6186.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |word| word_to_number(word) }.join(' ')\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8r33thcw\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055af4bc14be8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055af4bc14bc0\
    \ @start_time=2022-08-02 03:26:24.681482314 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055af4ba462a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055af4b9b2dc8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055af4bc14be8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055af4ba45768>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055af4b9b2dc8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055af4bc14be8 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055af4ba45358\
    \ @a_proc=#<Proc:0x000055af4ba453a8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94211376698280>=>#<Proc:0x000055af4ba453a8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055af4ba2ba98\
    \ @a_proc=#<Proc:0x000055af4ba2bae8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94211376593640>=>#<Proc:0x000055af4ba2bae8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpso9f3998\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055a673218c10 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a673218be8\
    \ @start_time=2022-08-02 03:26:24.698281944 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a6730423c8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a672fadfe8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055a673218c10 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055a6730418b0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055a672fadfe8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055a673218c10 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a673041400\
    \ @a_proc=#<Proc:0x000055a673041428 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94173382579240>=>#<Proc:0x000055a673041428 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a673027ac8\
    \ @a_proc=#<Proc:0x000055a673027b18 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94173382474520>=>#<Proc:0x000055a673027b18 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_map = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  numbers.split('\
    \ ').sort_by { |num| number_map[num] }.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpag00h0x3\nStarted\n.\nFinished in 0.000926295 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1079.57 tests/s, 5397.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7zxswsrr\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055c21c74c870 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055c21c74c848\
    \ @start_time=2022-08-02 03:26:24.776428551 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055c21c57daf8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055c21c4eac30\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055c21c74c870 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055c21c57cf90>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055c21c4eac30 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055c21c74c870 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c21c57cab8\
    \ @a_proc=#<Proc:0x000055c21c57cb08 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94292187532040>=>#<Proc:0x000055c21c57cb08 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c21c5635b8\
    \ @a_proc=#<Proc:0x000055c21c5635e0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94292187428320>=>#<Proc:0x000055c21c5635e0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplweefu2p\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055bdcaaf0bd0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055bdcaaf0ba8\
    \ @start_time=2022-08-02 03:26:24.864081278 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055bdca9224c0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055bdca88e2c0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055bdcaaf0bd0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055bdca921c28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055bdca88e2c0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055bdcaaf0bd0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055bdca9214d0\
    \ @a_proc=#<Proc:0x000055bdca9214f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94273635751160>=>#<Proc:0x000055bdca9214f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055bdca907d50\
    \ @a_proc=#<Proc:0x000055bdca907df0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94273635646960>=>#<Proc:0x000055bdca907df0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.map! do |num|\n    num_hash[num]\n  end\n  num_array.sort!\n  num_array.map!\
    \ do |num|\n    num_hash.key(num)\n  end\n  num_array.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpswrvtapf\nStarted\n.\nFinished in 0.000705554 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1417.33 tests/s, 7086.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpen2c06dd\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpen2c06dd.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014654391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.24 tests/s, 272.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2in21c2x\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x0000555da9fbc870 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000555da9fbc848\
    \ @start_time=2022-08-02 03:26:24.998605731 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000555da9dedaf8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000555da9d5ac08\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x0000555da9fbc870 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000555da9decf90>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000555da9d5ac08 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x0000555da9fbc870 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555da9decae0\
    \ @a_proc=#<Proc:0x0000555da9decb58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93860770270040>=>#<Proc:0x0000555da9decb58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555da9dd35b8\
    \ @a_proc=#<Proc:0x0000555da9dd3630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93860770166320>=>#<Proc:0x0000555da9dd3630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedi"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |a, b| NUMBERS[a]\
    \ <=> NUMBERS[b] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9fhs3c69\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp9fhs3c69.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp9fhs3c69.rb:8:in `sort!'\n/tmp/tmp9fhs3c69.rb:8:in `sort_numbers'\n/tmp/tmp9fhs3c69.rb:17:in\
    \ `call'\n/tmp/tmp9fhs3c69.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.007468819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.89 tests/s, 267.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpma2h0yeh\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpma2h0yeh.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpma2h0yeh.rb:7:in `each'\n/tmp/tmpma2h0yeh.rb:7:in `sort_by'\n/tmp/tmpma2h0yeh.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpma2h0yeh.rb:14:in `call'\n/tmp/tmpma2h0yeh.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.012295623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.33 tests/s, 81.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpymw46evt\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpymw46evt.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpymw46evt.rb:7:in `each'\n/tmp/tmpymw46evt.rb:7:in `sort_by'\n/tmp/tmpymw46evt.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpymw46evt.rb:14:in `call'\n/tmp/tmpymw46evt.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008370394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.47 tests/s, 119.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| NUMBERS.index(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3g975wxu\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp3g975wxu.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp3g975wxu.rb:7:in `each'\n/tmp/tmp3g975wxu.rb:7:in `sort_by'\n/tmp/tmp3g975wxu.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp3g975wxu.rb:14:in `call'\n/tmp/tmp3g975wxu.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006897355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.98 tests/s, 144.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_num(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyjgsvs2h\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_num'\
    \ for #<TestHumanEval:0x0000558bdcfc09a0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000558bdcfc0978\
    \ @start_time=2022-08-02 03:26:25.270065549 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000558bdcdedcb8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000558bdcd5ab48\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_num' for #<TestHumanEval:0x0000558bdcfc09a0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000558bdcded178>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000558bdcd5ab48 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_num' for #<TestHumanEval:0x0000558bdcfc09a0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558bdcdece30\
    \ @a_proc=#<Proc:0x0000558bdcdece58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94059194404440>=>#<Proc:0x0000558bdcdece58 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558bdcdd76e8\
    \ @a_proc=#<Proc:0x0000558bdcdd7710 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94059194316560>=>#<Proc:0x0000558bdcdd7710 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwqjabd7g\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpwqjabd7g.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.02007531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.81 tests/s, 199.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort_by! { |num| num_to_int(num) }\n  nums.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzn5r5_1\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x00005650d4e28968 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005650d4e28940\
    \ @start_time=2022-08-02 03:26:25.437458047 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005650d4c55e38\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005650d4bc2cf0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x00005650d4e28968 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005650d4c55410>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005650d4bc2cf0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x00005650d4e28968 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00005650d4c54f38 @a_proc=#<Proc:0x00005650d4c54f88\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94905167073160>=>#<Proc:0x00005650d4c54f88 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005650d4c3f9a8\
    \ @a_proc=#<Proc:0x00005650d4c3f9f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94905166985720>=>#<Proc:0x00005650d4c3f9f8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.map! do |num|\n    num_hash[num]\n  end\n  num_array.sort!\n  num_array.map!\
    \ do |num|\n    num_hash.key(num)\n  end\n  num_array.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp713fjtn7\nStarted\n.\nFinished in 0.001870023 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    534.75 tests/s, 2673.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprompq4bt\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmprompq4bt.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014286636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.00 tests/s, 279.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split.sort_by { |num| num_hash[num]\
    \ }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ant0rm0\nStarted\n.\nFinished in 0.001693477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    590.50 tests/s, 2952.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphf5m0ozx\nStarted\n.\nFinished in 0.001686456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    592.96 tests/s, 2964.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_lyy24rg\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp_lyy24rg.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.01211847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.52 tests/s, 330.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  # TODO: implement this method\n  numbers = numbers.split(' ')\n  numbers.sort!\
    \ { |a, b| NUMBERS[a] <=> NUMBERS[b] }\n  numbers.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfsmy3alg\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpfsmy3alg.rb:9:in `block in sort_numbers'\n\
    /tmp/tmpfsmy3alg.rb:9:in `sort!'\n/tmp/tmpfsmy3alg.rb:9:in `sort_numbers'\n/tmp/tmpfsmy3alg.rb:18:in\
    \ `call'\n/tmp/tmpfsmy3alg.rb:18:in `test_sort_numbers'\n     15:     candidate\
    \ = method(:sort_numbers)\n     16:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     17:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 18:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     19:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     20:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     21:   end\n===============================================================================\n\
    \nFinished in 0.005971422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.46 tests/s, 334.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgr3cbbrj\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpgr3cbbrj.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpgr3cbbrj.rb:7:in `each'\n/tmp/tmpgr3cbbrj.rb:7:in `sort_by'\n/tmp/tmpgr3cbbrj.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpgr3cbbrj.rb:14:in `call'\n/tmp/tmpgr3cbbrj.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006055826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.13 tests/s, 165.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split\n  numbers_array.sort_by! { |num| num_to_int(num)\
    \ }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppzzl2c87\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055a895ec8b58 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a895ec8b30\
    \ @start_time=2022-08-02 03:26:26.683523489 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a895cfa3a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a895c66130\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055a895ec8b58 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055a895cf9818>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055a895c66130 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055a895ec8b58 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055a895cf9390 @a_proc=#<Proc:0x000055a895cf93e0\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94182556275680>=>#<Proc:0x000055a895cf93e0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a895cdfbc0\
    \ @a_proc=#<Proc:0x000055a895cdfc38 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94182556171320>=>#<Proc:0x000055a895cdfc38 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbpk043vs\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000561684fc4d38 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000561684fc4d10\
    \ @start_time=2022-08-02 03:26:26.537435429 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000561684df6808\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000561684d62248\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000561684fc4d38 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000561684df5f70>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000561684d62248 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000561684fc4d38 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000561684df5890\
    \ @a_proc=#<Proc:0x0000561684df5980 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94654718499200>=>#<Proc:0x0000561684df5980 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000561684ddbda0\
    \ @a_proc=#<Proc:0x0000561684ddbe40 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94654718393920>=>#<Proc:0x0000561684ddbe40 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| NUMBERS.index(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ku3jsag\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp0ku3jsag.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp0ku3jsag.rb:7:in `each'\n/tmp/tmp0ku3jsag.rb:7:in `sort_by'\n/tmp/tmp0ku3jsag.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp0ku3jsag.rb:14:in `call'\n/tmp/tmp0ku3jsag.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.00600482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.53 tests/s, 166.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdexa5hkq\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055c97ab28d30 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055c97ab28d08\
    \ @start_time=2022-08-02 03:26:26.641676503 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055c97a95a7d8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055c97a8c6268\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055c97ab28d30 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055c97a959f40>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055c97a8c6268 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055c97ab28d30 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055c97a959860 @a_proc=#<Proc:0x000055c97a959950\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94323833411920>=>#<Proc:0x000055c97a959950 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c97a943e48\
    \ @a_proc=#<Proc:0x000055c97a943e70 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94323833323120>=>#<Proc:0x000055c97a943e70 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2py0swkn\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000056404cdf0c68 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000056404cdf0c40\
    \ @start_time=2022-08-02 03:26:26.770180011 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000056404cc22580\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000056404cb8e2e0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000056404cdf0c68 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000056404cc21e28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000056404cb8e2e0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000056404cdf0c68 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000056404cc215e0 @a_proc=#<Proc:0x000056404cc21630\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94834165683760>=>#<Proc:0x000056404cc21630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056404cc07cf8\
    \ @a_proc=#<Proc:0x000056404cc07e10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94834165579280>=>#<Proc:0x000056404cc07e10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdlyeq8gk\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055710414cc68 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055710414cc40\
    \ @start_time=2022-08-02 03:26:26.817946438 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000557103f7e580\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000557103eea290\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055710414cc68 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000557103f7de28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000557103eea290 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055710414cc68 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000557103f7d5e0 @a_proc=#<Proc:0x0000557103f7d630\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93943886239280>=>#<Proc:0x0000557103f7d630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000557103f63cf8\
    \ @a_proc=#<Proc:0x0000557103f63e10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93943886134800>=>#<Proc:0x0000557103f63e10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnjp26g_c\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpnjp26g_c.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpnjp26g_c.rb:7:in `each'\n/tmp/tmpnjp26g_c.rb:7:in `sort_by'\n/tmp/tmpnjp26g_c.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpnjp26g_c.rb:14:in `call'\n/tmp/tmpnjp26g_c.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008701441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.92 tests/s, 114.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qebihk4\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp9qebihk4.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.014063765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.10 tests/s, 284.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps896wc6r\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055fc28118a80 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055fc28118a58\
    \ @start_time=2022-08-02 03:26:26.832253067 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055fc27f4a1e0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055fc27eb69e0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055fc28118a80 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055fc27f494e8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055fc27eb69e0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055fc28118a80 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055fc27f49240 @a_proc=#<Proc:0x000055fc27f49268\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94541490459240>=>#<Proc:0x000055fc27f49268 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055fc27f2fbb0\
    \ @a_proc=#<Proc:0x000055fc27f2fc00 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94541490355200>=>#<Proc:0x000055fc27f2fc00 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpctk3vz\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x0000562172934c68 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000562172934c40\
    \ @start_time=2022-08-02 03:26:26.769501629 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000562172766580\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005621726d2290\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x0000562172934c68\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000562172765e28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005621726d2290 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x0000562172934c68 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005621727655e0\
    \ @a_proc=#<Proc:0x0000562172765630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94701654267440>=>#<Proc:0x0000562172765630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000056217274bcf8\
    \ @a_proc=#<Proc:0x000056217274be10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94701654162960>=>#<Proc:0x000056217274be10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2u36s_zr\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp2u36s_zr.rb:7:in `block in sort_numbers'\n\
    /tmp/tmp2u36s_zr.rb:7:in `each'\n/tmp/tmp2u36s_zr.rb:7:in `sort_by'\n/tmp/tmp2u36s_zr.rb:7:in\
    \ `sort_numbers'\n/tmp/tmp2u36s_zr.rb:14:in `call'\n/tmp/tmp2u36s_zr.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.010647276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.92 tests/s, 93.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split.sort_by { |num| num_hash[num]\
    \ }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjeeqcks\nStarted\n.\nFinished in 0.000801632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1247.46 tests/s, 6237.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmperxksm8x\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmperxksm8x.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.012972133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.09 tests/s, 308.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6k3qpdkr\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp6k3qpdkr.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.018056544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.38 tests/s, 221.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7z3km89v\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp7z3km89v.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.011976307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.50 tests/s, 333.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0zwzufnu\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp0zwzufnu.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.016314329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.30 tests/s, 245.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6uu0_372\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp6uu0_372.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009580529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.38 tests/s, 417.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptzvb3wxz\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmptzvb3wxz.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010181226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.22 tests/s, 392.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwitgdkne\nStarted\n.\nFinished in 0.000949182 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1053.54 tests/s, 5267.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyhxwi9v1\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpyhxwi9v1.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpyhxwi9v1.rb:7:in `each'\n/tmp/tmpyhxwi9v1.rb:7:in `sort_by'\n/tmp/tmpyhxwi9v1.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpyhxwi9v1.rb:14:in `call'\n/tmp/tmpyhxwi9v1.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.007927751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.14 tests/s, 126.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsl78xl80\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055e5e09289e0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055e5e09289b8\
    \ @start_time=2022-08-02 03:26:28.439928185 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055e5e0759d58\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055e5e06c6d28\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055e5e09289e0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055e5e07591f0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055e5e06c6d28 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055e5e09289e0 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055e5e0758f98 @a_proc=#<Proc:0x000055e5e0758fe8\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94445801672680>=>#<Proc:0x000055e5e0758fe8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055e5e073f750\
    \ @a_proc=#<Proc:0x000055e5e073f7c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94445801568200>=>#<Proc:0x000055e5e073f7c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpngs148pr\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x000055c174f34d10 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055c174f34ce8\
    \ @start_time=2022-08-02 03:26:28.382813638 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055c174d667e0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055c174cd2180\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x000055c174f34d10 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055c174d65f20>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055c174cd2180 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x000055c174f34d10 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c174d65840\
    \ @a_proc=#<Proc:0x000055c174d65890 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94289377253520>=>#<Proc:0x000055c174d65890 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c174d4bd78\
    \ @a_proc=#<Proc:0x000055c174d4bda0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94289377148320>=>#<Proc:0x000055c174d4bda0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp861khzb3\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055ef100f8b60 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055ef100f8b38\
    \ @start_time=2022-08-02 03:26:28.314100182 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055ef0ff2a040\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055ef0fe96b38\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055ef100f8b60 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055ef0ff295c8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055ef0fe96b38 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055ef100f8b60 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055ef0ff29208 @a_proc=#<Proc:0x000055ef0ff29230\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94485253100080>=>#<Proc:0x000055ef0ff29230 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055ef0ff0f650\
    \ @a_proc=#<Proc:0x000055ef0ff0f6c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94485252994760>=>#<Proc:0x000055ef0ff0f6c8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2hld0qwx\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000559389980d38 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000559389980d10\
    \ @start_time=2022-08-02 03:26:28.32593342 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005593897b2808\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055938971e248\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000559389980d38 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005593897b1f70>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055938971e248 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000559389980d38 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005593897b1890\
    \ @a_proc=#<Proc:0x00005593897b1980 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94092155099520>=>#<Proc:0x00005593897b1980 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000559389797da0\
    \ @a_proc=#<Proc:0x0000559389797e40 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94092154994240>=>#<Proc:0x0000559389797e40 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerme"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfw99h5oe\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpfw99h5oe.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpfw99h5oe.rb:7:in `each'\n/tmp/tmpfw99h5oe.rb:7:in `sort_by'\n/tmp/tmpfw99h5oe.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpfw99h5oe.rb:14:in `call'\n/tmp/tmpfw99h5oe.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006281097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.21 tests/s, 159.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpou49hrdf\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpou49hrdf.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.01737393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.56 tests/s, 230.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplxqbgu0d\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x0000560466e88b48 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000560466e88b20\
    \ @start_time=2022-08-02 03:26:28.500135132 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000560466cba0f0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000560466c26dc8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x0000560466e88b48\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000560466cb9510>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000560466c26dc8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x0000560466e88b48 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000560466cb9240\
    \ @a_proc=#<Proc:0x0000560466cb9268 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94576904475240>=>#<Proc:0x0000560466cb9268 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000560466c9fa48\
    \ @a_proc=#<Proc:0x0000560466c9fa70 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94576904370800>=>#<Proc:0x0000560466c9fa70 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt_qdo9g7\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpt_qdo9g7.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009116192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 438.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp22irs0e8\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x0000563889ab8bb0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000563889ab8b88\
    \ @start_time=2022-08-02 03:26:28.723656922 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005638898e6120\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000563889852bf0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x0000563889ab8bb0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005638898e54c8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000563889852bf0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x0000563889ab8bb0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005638898e5220\
    \ @a_proc=#<Proc:0x00005638898e5248 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94800825963080>=>#<Proc:0x00005638898e5248 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005638898cf7e0\
    \ @a_proc=#<Proc:0x00005638898cf808 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94800825874440>=>#<Proc:0x00005638898cf808 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |a, b| number_to_i(a)\
    \ <=> number_to_i(b) }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ps_qi87\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x000055a84c344870 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a84c344848\
    \ @start_time=2022-08-02 03:26:28.668667836 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a84c175b70\
    \ @assertion_count=2, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a84c0e2460\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x000055a84c344870 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055a84c175030>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055a84c0e2460 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x000055a84c344870 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a84c174ce8\
    \ @a_proc=#<Proc:0x000055a84c174d10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94181319462160>=>#<Proc:0x000055a84c174d10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a84c15b720\
    \ @a_proc=#<Proc:0x000055a84c15b748 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94181319358280>=>#<Proc:0x000055a84c15b748 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdofzwhtu\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055cb53b648f0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055cb53b648c8\
    \ @start_time=2022-08-02 03:26:28.882422969 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055cb53991cd0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055cb538feca0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055cb53b648f0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055cb53991140>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055cb538feca0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055cb53b648f0 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055cb53990e20 @a_proc=#<Proc:0x000055cb53990e98\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94331769261720>=>#<Proc:0x000055cb53990e98 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055cb5397b700\
    \ @a_proc=#<Proc:0x000055cb5397b728 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94331769173800>=>#<Proc:0x000055cb5397b728 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgukfn2b3\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpgukfn2b3.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.02091205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.82 tests/s, 191.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8oazt6fw\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x000055940be90990 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055940be90968\
    \ @start_time=2022-08-02 03:26:28.91909622 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055940bcc1c68\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055940bc2ed78\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x000055940be90990 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055940bcc1178>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055940bc2ed78 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x000055940be90990 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055940bcc0e58\
    \ @a_proc=#<Proc:0x000055940bcc0ea8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94094341443240>=>#<Proc:0x000055940bcc0ea8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055940bcab850\
    \ @a_proc=#<Proc:0x000055940bcab918 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94094341355800>=>#<Proc:0x000055940bcab918 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedia"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe2298zwt\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpe2298zwt.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.022440727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.56 tests/s, 178.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort_by! { |num| num_to_i(num) }\n  nums.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjo_n83ao\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055f7db954b50 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055f7db954b28\
    \ @start_time=2022-08-02 03:26:28.981081029 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055f7db786080\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055f7db6f2c68\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055f7db954b50 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055f7db785810>, @failures=[], @errors=[#<Test::Unit::Error:0x000055f7db6f2c68\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055f7db954b50 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f7db7851d0\
    \ @a_proc=#<Proc:0x000055f7db785220 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94523027378720>=>#<Proc:0x000055f7db785220 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055f7db76b870\
    \ @a_proc=#<Proc:0x000055f7db76b910 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94523027274000>=>#<Proc:0x000055f7db76b910 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split\n  numbers_array.sort! { |a, b| NUMBERS[a] <=>\
    \ NUMBERS[b] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdac_7kd9\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpdac_7kd9.rb:8:in `block in sort_numbers'\n\
    /tmp/tmpdac_7kd9.rb:8:in `sort!'\n/tmp/tmpdac_7kd9.rb:8:in `sort_numbers'\n/tmp/tmpdac_7kd9.rb:17:in\
    \ `call'\n/tmp/tmpdac_7kd9.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.010615841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.20 tests/s, 188.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl3uq_t9z\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x0000560a5d6dc9b0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000560a5d6dc988\
    \ @start_time=2022-08-02 03:26:29.09523465 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000560a5d50ddc8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000560a5d47acf8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x0000560a5d6dc9b0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000560a5d50d468>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000560a5d47acf8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x0000560a5d6dc9b0 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000560a5d50cf40 @a_proc=#<Proc:0x0000560a5d50cf68\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94602515238760>=>#<Proc:0x0000560a5d50cf68 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000560a5d4f37e8\
    \ @a_proc=#<Proc:0x0000560a5d4f3838 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94602515134520>=>#<Proc:0x0000560a5d4f3838 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp388qop_d\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x000055a44c5ac990 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a44c5ac968\
    \ @start_time=2022-08-02 03:26:29.794583909 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a44c3ddd08\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a44c34ad50\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x000055a44c5ac990\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055a44c3dd1a0>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055a44c34ad50 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x000055a44c5ac990 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a44c3dce58\
    \ @a_proc=#<Proc:0x000055a44c3dced0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94164142116560>=>#<Proc:0x000055a44c3dced0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a44c3c7850\
    \ @a_proc=#<Proc:0x000055a44c3c7878 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94164142028920>=>#<Proc:0x000055a44c3c7878 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  # TODO: implement this method\n  num_hash = {'zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9}\n  num_array = numbers.split(' ')\n  num_array.sort! {|a,\
    \ b| num_hash[a] <=> num_hash[b]}\n  num_array.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2_kturlp\nStarted\n.\nFinished in 0.000741687 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1348.28 tests/s, 6741.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_i(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpovfa8hx0\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055b2d3958db0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055b2d3958d88\
    \ @start_time=2022-08-02 03:26:30.1153485 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055b2d378a8a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055b2d36f5dc0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055b2d3958db0 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055b2d3789f98>, @failures=[], @errors=[#<Test::Unit::Error:0x000055b2d36f5dc0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055b2d3958db0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055b2d37899d0\
    \ @a_proc=#<Proc:0x000055b2d3789a48 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94226540436040>=>#<Proc:0x000055b2d3789a48 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055b2d376fda0\
    \ @a_proc=#<Proc:0x000055b2d376fdf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94226540330480>=>#<Proc:0x000055b2d376fdf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxwi2an5u\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055817056cbf0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055817056cbc8\
    \ @start_time=2022-08-02 03:26:30.030356536 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055817039e198\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055817030ad58\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055817056cbf0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055817039d950>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055817030ad58 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055817056cbf0 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055817039d2e8 @a_proc=#<Proc:0x000055817039d310\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94014421979920>=>#<Proc:0x000055817039d310 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005581703837d0\
    \ @a_proc=#<Proc:0x0000558170383848 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94014421874760>=>#<Proc:0x0000558170383848 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp063yxv3o\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x0000560e14a88db0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000560e14a88d88\
    \ @start_time=2022-08-02 03:26:29.871938271 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000560e148ba8a8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000560e14825dc0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x0000560e14a88db0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000560e148b9f98>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000560e14825dc0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x0000560e14a88db0 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000560e148b99d0 @a_proc=#<Proc:0x0000560e148b9a48\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94618474224200>=>#<Proc:0x0000560e148b9a48 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000560e1489fda0\
    \ @a_proc=#<Proc:0x0000560e1489fdf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94618474118640>=>#<Proc:0x0000560e1489fdf0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfqgv1u26\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpfqgv1u26.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009550484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.71 tests/s, 418.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  number_array\
    \ = numbers.split\n  number_array.sort_by! do |number|\n    number_hash[number]\n\
    \  end\n  number_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzc5wzrnu\nStarted\n.\nFinished in 0.000980882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1019.49 tests/s, 5097.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0_3_x5l0\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055894165ca28 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055894165ca00\
    \ @start_time=2022-08-02 03:26:30.051421894 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055894148e138\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005589413faa00\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055894165ca28 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055894148d418>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005589413faa00 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055894165ca28 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055894148d198 @a_proc=#<Proc:0x000055894148d1c0\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94047994171840>=>#<Proc:0x000055894148d1c0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000558941473b08\
    \ @a_proc=#<Proc:0x0000558941473b30 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94047994067760>=>#<Proc:0x0000558941473b30 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num_to_int(num) }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpra3qac0x\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_int'\
    \ for #<TestHumanEval:0x000055ae75f448f8 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055ae75f448d0\
    \ @start_time=2022-08-02 03:26:30.393278496 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055ae75d71d78\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055ae75cdeca8\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_int' for #<TestHumanEval:0x000055ae75f448f8 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055ae75d710f8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055ae75cdeca8 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `num_to_int' for #<TestHumanEval:0x000055ae75f448f8 ...>>, @method_name=\"test_sort_numbers\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000055ae75d70db0 @a_proc=#<Proc:0x000055ae75d70e78\
    \ /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94207789698680>=>#<Proc:0x000055ae75d70e78 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055ae75d57798\
    \ @a_proc=#<Proc:0x000055ae75d57810 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94207789594640>=>#<Proc:0x000055ae75d57810 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:9"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp00wwanr5\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_i'\
    \ for #<TestHumanEval:0x00005633ed114d20 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00005633ed114cf8\
    \ @start_time=2022-08-02 03:26:30.393315773 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00005633ecf427b8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00005633eceae270\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_i' for #<TestHumanEval:0x00005633ed114d20 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x00005633ecf41ef8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00005633eceae270 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_i' for #<TestHumanEval:0x00005633ed114d20 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005633ecf417c8\
    \ @a_proc=#<Proc:0x00005633ecf41840 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94781018740800>=>#<Proc:0x00005633ecf41840 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00005633ecf2bdb0\
    \ @a_proc=#<Proc:0x00005633ecf2be28 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94781018652200>=>#<Proc:0x00005633ecf2be28 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.r"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnt6afsy7\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpnt6afsy7.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010322896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.87 tests/s, 387.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |number|\
    \ number_hash[number] }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5rhxaxf3\nStarted\n.\nFinished in 0.000571073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1751.09 tests/s, 8755.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpafz2nn2o\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpafz2nn2o.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.019008717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.61 tests/s, 210.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9}\n  num_array\
    \ = numbers.split(' ')\n  num_array.sort! {|a, b| num_hash[a] <=> num_hash[b]}\n\
    \  num_array.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm2tmlt87\nStarted\n.\nFinished in 0.001332829 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    750.28 tests/s, 3751.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsy5mobou\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpsy5mobou.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpsy5mobou.rb:7:in `each'\n/tmp/tmpsy5mobou.rb:7:in `sort_by'\n/tmp/tmpsy5mobou.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpsy5mobou.rb:14:in `call'\n/tmp/tmpsy5mobou.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.008371531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.45 tests/s, 119.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7zasnkhw\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp7zasnkhw.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.013074156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.49 tests/s, 305.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  num_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  num_array = numbers.split(' ')\n \
    \ num_array.sort! do |x, y|\n    num_hash[x] <=> num_hash[y]\n  end\n  num_array.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr4qp12hl\nStarted\n.\nFinished in 0.001722534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    580.54 tests/s, 2902.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_r8mi79\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `word_to_number'\
    \ for #<TestHumanEval:0x0000555ed59c4a58 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x0000555ed59c4a30\
    \ @start_time=2022-08-02 03:26:30.581736727 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000555ed57f60a0\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000555ed5762378\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `word_to_number' for #<TestHumanEval:0x0000555ed59c4a58 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x0000555ed57f5470>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x0000555ed5762378 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `word_to_number' for #<TestHumanEval:0x0000555ed59c4a58 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555ed57f5218\
    \ @a_proc=#<Proc:0x0000555ed57f5240 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=93865797177920>=>#<Proc:0x0000555ed57f5240 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000555ed57dbb38\
    \ @a_proc=#<Proc:0x0000555ed57dbb88 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=93865797073800>=>#<Proc:0x0000555ed57dbb88 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnerm"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhhm3fe2\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpmhhm3fe2.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.010177324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.26 tests/s, 393.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt9c3hxx7\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `number_to_int'\
    \ for #<TestHumanEval:0x000055e588784ba0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055e588784b78\
    \ @start_time=2022-08-02 03:26:31.043683937 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055e5885b62d8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055e588522ba0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `number_to_int' for #<TestHumanEval:0x000055e588784ba0 ...>>,\
    \ @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055e5885b56a8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055e588522ba0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `number_to_int' for #<TestHumanEval:0x000055e588784ba0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055e5885b5388\
    \ @a_proc=#<Proc:0x000055e5885b53b0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94444323558320>=>#<Proc:0x000055e5885b53b0 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055e58859b9b0\
    \ @a_proc=#<Proc:0x000055e58859ba28 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94444323453480>=>#<Proc:0x000055e58859ba28 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermedi"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split(' ').sort_by { |num| NUMBERS[num] }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqqhr1gyn\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpqqhr1gyn.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpqqhr1gyn.rb:7:in `each'\n/tmp/tmpqqhr1gyn.rb:7:in `sort_by'\n/tmp/tmpqqhr1gyn.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpqqhr1gyn.rb:14:in `call'\n/tmp/tmpqqhr1gyn.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.007572839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.05 tests/s, 132.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr_8i60_y\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpr_8i60_y.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.008535183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.16 tests/s, 468.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4js4iy6e\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmp4js4iy6e.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.008218213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.68 tests/s, 486.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(\" \")\n  numbers_array.sort! { |x, y| NUMBERS[x]\
    \ <=> NUMBERS[y] }\n  numbers_array.join(\" \")\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcv1k0y__\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpcv1k0y__.rb:8:in `block in sort_numbers'\n\
    /tmp/tmpcv1k0y__.rb:8:in `sort!'\n/tmp/tmpcv1k0y__.rb:8:in `sort_numbers'\n/tmp/tmpcv1k0y__.rb:17:in\
    \ `call'\n/tmp/tmpcv1k0y__.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.013750872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.72 tests/s, 145.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  nums = numbers.split(' ')\n  nums.sort_by! { |num| num_to_i(num) }\n  nums.join('\
    \ ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpqmg231\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `num_to_i'\
    \ for #<TestHumanEval:0x000055a19a3a09d0 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055a19a3a09a8\
    \ @start_time=2022-08-02 03:26:31.520830923 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055a19a1d1de8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055a19a13e930\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055a19a3a09d0 ...>>, @method_name=\"\
    test_sort_numbers\">], @stop_tag=#<Object:0x000055a19a1d1190>, @failures=[], @errors=[#<Test::Unit::Error:0x000055a19a13e930\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `num_to_i' for #<TestHumanEval:0x000055a19a3a09d0 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a19a1d0e70\
    \ @a_proc=#<Proc:0x000055a19a1d0ee8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94152563691240>=>#<Proc:0x000055a19a1d0ee8 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055a19a1b76f0\
    \ @a_proc=#<Proc:0x000055a19a1b7718 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94152563586840>=>#<Proc:0x000055a19a1b7718 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \""
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy4bkduys\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpy4bkduys.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009105586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.82 tests/s, 439.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_hash = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers_array = numbers.split(' ')\n\
    \  sorted_numbers = numbers_array.sort_by { |number| number_hash[number] }\n \
    \ sorted_numbers.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_numbers\n    candidate = method(:sort_numbers)\n    assert_equal(\"\
    \", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"three\"\
    ))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five zero\
    \ four seven nine eight\"))\n    assert_equal(\"zero one two three four five six\"\
    , candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwmhal1kr\nStarted\n.\nFinished in 0.000631528 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1583.46 tests/s, 7917.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxx5ff7zz\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpxx5ff7zz.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.008990257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.23 tests/s, 444.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| numeral_to_number(num) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaobsqk1a\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval): NoMethodError: undefined method `numeral_to_number'\
    \ for #<TestHumanEval:0x000055c7a21e8c68 @method_name=\"test_sort_numbers\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000055c7a21e8c40\
    \ @start_time=2022-08-02 03:26:31.778636475 +0000, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000055c7a201a580\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000055c7a1f862e0\
    \ @test_name=\"test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `numeral_to_number' for #<TestHumanEval:0x000055c7a21e8c68\
    \ ...>>, @method_name=\"test_sort_numbers\">], @stop_tag=#<Object:0x000055c7a2019e28>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x000055c7a1f862e0 @test_name=\"\
    test_sort_numbers(TestHumanEval)\", @exception=#<NoMethodError: undefined method\
    \ `numeral_to_number' for #<TestHumanEval:0x000055c7a21e8c68 ...>>, @method_name=\"\
    test_sort_numbers\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c7a20195e0\
    \ @a_proc=#<Proc:0x000055c7a2019630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=94315904865840>=>#<Proc:0x000055c7a2019630 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000055c7a1fffcf8\
    \ @a_proc=#<Proc:0x000055c7a1fffe10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=94315904761360>=>#<Proc:0x000055c7a1fffe10 /usr/lib/ruby/gems/3.0.0/gems/test-unit-3.3.7/lib/test/unit/ui/te"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp06c7axm\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpp06c7axm.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.009466101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.64 tests/s, 422.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdrmtw806\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpdrmtw806.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.008911108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.22 tests/s, 448.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers_array = numbers.split(' ')\n  numbers_array.sort! { |a, b| NUMBERS[a]\
    \ <=> NUMBERS[b] }\n  numbers_array.join(' ')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5e_5qn3f\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmp5e_5qn3f.rb:8:in `block in sort_numbers'\n\
    /tmp/tmp5e_5qn3f.rb:8:in `sort!'\n/tmp/tmp5e_5qn3f.rb:8:in `sort_numbers'\n/tmp/tmp5e_5qn3f.rb:17:in\
    \ `call'\n/tmp/tmp5e_5qn3f.rb:17:in `test_sort_numbers'\n     14:     candidate\
    \ = method(:sort_numbers)\n     15:     assert_equal(\"\", candidate.call(\"\"\
    ))\n     16:     assert_equal(\"three\", candidate.call(\"three\"))\n  => 17:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     18:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     19:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    \     20:   end\n===============================================================================\n\
    \nFinished in 0.011186326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.39 tests/s, 178.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate\
    \ = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"\
    three\", candidate.call(\"three\"))\n    assert_equal(\"three five nine\", candidate.call(\"\
    three five nine\"))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n    assert_equal(\"zero one two three four\
    \ five six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxlqtflf6\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_numbers(TestHumanEval)\n/tmp/tmpxlqtflf6.rb:16:in `test_sort_numbers'\n\
    \     13:     assert_equal(\"\", candidate.call(\"\"))\n     14:     assert_equal(\"\
    three\", candidate.call(\"three\"))\n     15:     assert_equal(\"three five nine\"\
    , candidate.call(\"three five nine\"))\n  => 16:     assert_equal(\"zero four\
    \ five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n     17:     assert_equal(\"zero one two three four five six\", candidate.call(\"\
    six five four three two one zero\"))\n     18:   end\n     19: end\n<\"zero four\
    \ five seven eight nine\"> expected but was\n<\"five zero four seven nine eight\"\
    >\n\ndiff:\n? five zero four five seven nine eight nine\n===============================================================================\n\
    \nFinished in 0.008838448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.14 tests/s, 452.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
    \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
    \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
    three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
    \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
    ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
    \ five four three two one zero\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyf9bo653\nStarted\nE\n===============================================================================\n\
    Error: test_sort_numbers(TestHumanEval):\n  NameError: uninitialized constant\
    \ NUMBERS\n  Did you mean?  Numeric\n/tmp/tmpyf9bo653.rb:7:in `block in sort_numbers'\n\
    /tmp/tmpyf9bo653.rb:7:in `each'\n/tmp/tmpyf9bo653.rb:7:in `sort_by'\n/tmp/tmpyf9bo653.rb:7:in\
    \ `sort_numbers'\n/tmp/tmpyf9bo653.rb:14:in `call'\n/tmp/tmpyf9bo653.rb:14:in\
    \ `test_sort_numbers'\n     11:   def test_sort_numbers\n     12:     candidate\
    \ = method(:sort_numbers)\n     13:     assert_equal(\"\", candidate.call(\"\"\
    ))\n  => 14:     assert_equal(\"three\", candidate.call(\"three\"))\n     15:\
    \     assert_equal(\"three five nine\", candidate.call(\"three five nine\"))\n\
    \     16:     assert_equal(\"zero four five seven eight nine\", candidate.call(\"\
    five zero four seven nine eight\"))\n     17:     assert_equal(\"zero one two\
    \ three four five six\", candidate.call(\"six five four three two one zero\"))\n\
    ===============================================================================\n\
    \nFinished in 0.006794231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.18 tests/s, 147.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\ndef sort_numbers(numbers)\n\
    \  number_map = {\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |number|\
    \ number_map[number] }.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_numbers\n    candidate = method(:sort_numbers)\n\
    \    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\"three\", candidate.call(\"\
    three\"))\n    assert_equal(\"three five nine\", candidate.call(\"three five nine\"\
    ))\n    assert_equal(\"zero four five seven eight nine\", candidate.call(\"five\
    \ zero four seven nine eight\"))\n    assert_equal(\"zero one two three four five\
    \ six\", candidate.call(\"six five four three two one zero\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr3y_nloy\nStarted\n.\nFinished in 0.000501646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1993.44 tests/s, 9967.19 assertions/s\n"
  exit_code: 0
  status: OK
