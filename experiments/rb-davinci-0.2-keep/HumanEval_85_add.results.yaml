name: HumanEval_85_add
language: ruby
results:
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphhopzyzy\nStarted\n.\nFinished in 0.000949042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1053.69 tests/s, 4214.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk4pke4t0\nStarted\n.\nFinished in 0.000678014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1474.90 tests/s, 5899.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprro4s2mf\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprro4s2mf.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008489695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.79 tests/s, 235.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphqbn3he7\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmphqbn3he7.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.016723209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.80 tests/s, 119.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvh6dnm0k\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpvh6dnm0k.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008148597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.72 tests/s, 245.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxwnhgfz_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxwnhgfz_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008608188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.17 tests/s, 232.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy0i2afvh\nStarted\n.\nFinished in 0.000901063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1109.80 tests/s, 4439.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa2jm50hv\nStarted\n.\nFinished in 0.000972694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1028.07 tests/s, 4112.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps9nmlrq3\nStarted\n.\nFinished in 0.000846873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1180.81 tests/s, 4723.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9urbw35n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9urbw35n.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013157924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.00 tests/s, 152.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp87yvpwam\nStarted\n.\nFinished in 0.001229241 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    813.51 tests/s, 3254.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo37cpjqc\nStarted\n.\nFinished in 0.000556293 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1797.61 tests/s, 7190.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj63o2etp\nStarted\n.\nFinished in 0.000946671 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1056.33 tests/s, 4225.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpudiz5bdu\nStarted\n.\nFinished in 0.000882299 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1133.40 tests/s, 4533.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33f9gy06\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp33f9gy06.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010793689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.65 tests/s, 185.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_fv8225b\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_fv8225b.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009823788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.79 tests/s, 203.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2xr3a9mq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp2xr3a9mq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008283832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.72 tests/s, 241.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpixe7o0pn\nStarted\n.\nFinished in 0.00063077 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1585.36 tests/s, 6341.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw57u3kwd\nStarted\n.\nFinished in 0.000761346 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1313.46 tests/s, 5253.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph_kpb9xp\nStarted\n.\nFinished in 0.001232496 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    811.36 tests/s, 3245.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_n7mms8z\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_n7mms8z.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013771074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.62 tests/s, 145.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8a3k4t6g\nStarted\n.\nFinished in 0.000918341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1088.92 tests/s, 4355.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw3dykimt\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpw3dykimt.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010763538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.91 tests/s, 185.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1zeso79q\nStarted\n.\nFinished in 0.000515393 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1940.27 tests/s, 7761.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpty0yd8rf\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpty0yd8rf.rb:11:in `test_add'\n     \
    \ 8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_add\n   \
    \  10:     candidate = method(:add)\n  => 11:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     12:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     14:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.008171068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.38 tests/s, 122.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7f16c1vm\nStarted\n.\nFinished in 0.001029297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    971.54 tests/s, 3886.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbgwx_yge\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpbgwx_yge.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008400445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.04 tests/s, 238.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4hdknz76\nStarted\n.\nFinished in 0.000703014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1422.45 tests/s, 5689.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpztkj1vtj\nStarted\n.\nFinished in 0.000906562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1103.07 tests/s, 4412.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc4mzqlr5\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4mzqlr5.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010930002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.49 tests/s, 182.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzf6rq3pf\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpzf6rq3pf.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010424594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.93 tests/s, 191.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbg88u673\nStarted\n.\nFinished in 0.001010662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    989.45 tests/s, 3957.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz3jlhiv1\nStarted\n.\nFinished in 0.001181772 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    846.19 tests/s, 3384.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpug1dnkol\nStarted\n.\nFinished in 0.001087338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    919.68 tests/s, 3678.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp23305zia\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp23305zia.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007477446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.74 tests/s, 267.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwy170a0t\nStarted\n.\nFinished in 0.000688226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1453.01 tests/s, 5812.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprs_qtopg\nStarted\n.\nFinished in 0.000831146 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1203.16 tests/s, 4812.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjhj00e_6\nStarted\n.\nFinished in 0.000641503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1558.84 tests/s, 6235.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmnf_rvn7\nStarted\n.\nFinished in 0.00052928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1889.36 tests/s, 7557.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptz_c0k94\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmptz_c0k94.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.018293014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.67 tests/s, 109.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4sig5uhb\nStarted\n.\nFinished in 0.001029647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    971.21 tests/s, 3884.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyupbdtav\nStarted\n.\nFinished in 0.000652925 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1531.57 tests/s, 6126.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzahjkbzl\nStarted\n.\nFinished in 0.00056516 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1769.41 tests/s, 7077.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpprivhow8\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpprivhow8.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.012415449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.54 tests/s, 161.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpibhxphp8\nStarted\n.\nFinished in 0.000776236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1288.27 tests/s, 5153.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn6ypz3zd\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpn6ypz3zd.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011446597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.36 tests/s, 174.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcww3qizg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpcww3qizg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009637837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.76 tests/s, 207.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk7lj2h37\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpk7lj2h37.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008453522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.29 tests/s, 236.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8u_zcfhn\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp8u_zcfhn.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011166382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.55 tests/s, 179.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3h43txsl\nStarted\n.\nFinished in 0.001210932 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    825.81 tests/s, 3303.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo1qsi691\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo1qsi691.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013526014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.93 tests/s, 147.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmipz3pr1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpmipz3pr1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.018851578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.05 tests/s, 106.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwii410jw\nStarted\n.\nFinished in 0.001229379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    813.42 tests/s, 3253.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).inject(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoa039k1c\nStarted\n.\nFinished in 0.000629712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1588.03 tests/s, 6352.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm57idp7u\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpm57idp7u.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009285814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.69 tests/s, 215.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_2hsx2h8\nStarted\n.\nFinished in 0.001282462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    779.75 tests/s, 3119.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_8jhj33j\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_8jhj33j.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010829593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.34 tests/s, 184.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd4eisg8n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpd4eisg8n.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013631288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.36 tests/s, 146.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcnilvz5a\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpcnilvz5a.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006857322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.83 tests/s, 291.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphynoiqh2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmphynoiqh2.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011286848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.60 tests/s, 177.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5dxdlp3g\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp5dxdlp3g.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007407784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.99 tests/s, 269.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, i| sum + i }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8x3c0fkq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp8x3c0fkq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.012665576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.95 tests/s, 157.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmhzlfc3v\nStarted\n.\nFinished in 0.000559718 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1786.61 tests/s, 7146.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpylyvkypr\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpylyvkypr.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011875136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.21 tests/s, 168.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa4dvowpq\nStarted\n.\nFinished in 0.000559431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1787.53 tests/s, 7150.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgmwf2pkt\nStarted\n.\nFinished in 0.000750857 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1331.81 tests/s, 5327.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp65ehw6kk\nStarted\n.\nFinished in 0.000695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1438.85 tests/s, 5755.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqvra0rqg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqvra0rqg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007225875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.39 tests/s, 276.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyg21qbn2\nStarted\n.\nFinished in 0.000531628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1881.01 tests/s, 7524.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_2992lqb\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_2992lqb.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008700946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.93 tests/s, 229.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpozktzqgy\nStarted\n.\nFinished in 0.00121666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    821.92 tests/s, 3287.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqu5holmg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqu5holmg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.018144938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.11 tests/s, 110.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphuplry33\nStarted\n.\nFinished in 0.000532978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1876.25 tests/s, 7505.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0by68sjl\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp0by68sjl.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008534732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.17 tests/s, 234.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphru0p7f_\nStarted\n.\nFinished in 0.000811986 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1231.55 tests/s, 4926.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzptr79wf\nStarted\n.\nFinished in 0.000874743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1143.19 tests/s, 4572.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp74ta8veh\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp74ta8veh.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.01638664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.03 tests/s, 122.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxmoran_m\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxmoran_m.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010428712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.89 tests/s, 191.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1txwoi3t\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1txwoi3t.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011850648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.38 tests/s, 168.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw3d1dnw2\nStarted\n.\nFinished in 0.001019525 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    980.85 tests/s, 3923.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8nukj6kg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp8nukj6kg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011698746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.48 tests/s, 170.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfpclcrg9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpfpclcrg9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00744324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.35 tests/s, 268.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqeyl96f3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqeyl96f3.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007895761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.65 tests/s, 253.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9oi3s32r\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9oi3s32r.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007845301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.46 tests/s, 254.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgr2j49fu\nStarted\n.\nFinished in 0.000595994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1677.87 tests/s, 6711.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpst63jexe\nStarted\n.\nFinished in 0.000607256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1646.75 tests/s, 6587.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxnaysovu\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxnaysovu.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.015240505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.61 tests/s, 131.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp33og3k2w\nStarted\n.\nFinished in 0.000952402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1049.98 tests/s, 4199.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjltzexrr\nStarted\n.\nFinished in 0.001079228 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    926.59 tests/s, 3706.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9rxahfmh\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9rxahfmh.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.016684375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.94 tests/s, 119.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp784c2vpr\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp784c2vpr.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014395652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.47 tests/s, 138.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6r320sp6\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6r320sp6.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008108078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.33 tests/s, 246.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7z6wjk5l\nStarted\n.\nFinished in 0.00129452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    772.49 tests/s, 3089.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg015d4nv\nStarted\n.\nFinished in 0.000850719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1175.48 tests/s, 4701.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu9uqx5bg\nStarted\n.\nFinished in 0.001006958 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    993.09 tests/s, 3972.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp47bqhuf4\nStarted\n.\nFinished in 0.000986627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1013.55 tests/s, 4054.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm067i0_8\nStarted\n.\nFinished in 0.00062826 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1591.70 tests/s, 6366.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg8r4xkb4\nStarted\n.\nFinished in 0.000955983 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1046.04 tests/s, 4184.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo63426nq\nStarted\n.\nFinished in 0.000536327 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1864.53 tests/s, 7458.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcjbs_28i\nStarted\n.\nFinished in 0.000980111 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1020.29 tests/s, 4081.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbe_xi9wq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpbe_xi9wq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011730224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.25 tests/s, 170.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphc6y91gi\nStarted\n.\nFinished in 0.001232192 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    811.56 tests/s, 3246.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptiqbwfga\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmptiqbwfga.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008096593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.51 tests/s, 247.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwjc1685j\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwjc1685j.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010928415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.50 tests/s, 183.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpke2hl0nn\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpke2hl0nn.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007577732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.97 tests/s, 263.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvwzej_0u\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpvwzej_0u.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011341087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.17 tests/s, 176.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprppsefi8\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprppsefi8.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007770118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.70 tests/s, 257.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoqlwjc3v\nStarted\n.\nFinished in 0.000538489 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1857.05 tests/s, 7428.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4_62btb2\nStarted\n.\nFinished in 0.000723225 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1382.70 tests/s, 5530.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0g2_nae2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp0g2_nae2.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008411446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.89 tests/s, 237.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzksl7o03\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpzksl7o03.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011135494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.80 tests/s, 179.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsb57w74o\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpsb57w74o.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009165349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.11 tests/s, 218.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo7cs8x4z\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo7cs8x4z.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008850608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.99 tests/s, 225.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8er60afx\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp8er60afx.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.015179323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.88 tests/s, 131.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0kk3cvc\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmph0kk3cvc.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008249317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.22 tests/s, 242.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptir4pyk2\nStarted\n.\nFinished in 0.000581207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1720.56 tests/s, 6882.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp5qh5y8b\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpp5qh5y8b.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.01010346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.98 tests/s, 197.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjmsakxye\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpjmsakxye.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.016231695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.61 tests/s, 123.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index{|x,i|\
    \ x.even? && i.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4zvdkq1\nStarted\n.\nFinished in 0.000612402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1632.91 tests/s, 6531.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzun3bhdj\nStarted\n.\nFinished in 0.000773106 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1293.48 tests/s, 5173.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwyc8lc8y\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwyc8lc8y.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010355047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.57 tests/s, 193.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6lilb_05\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6lilb_05.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009404194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.34 tests/s, 212.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplil9udsz\nStarted\n.\nFinished in 0.000617736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1618.81 tests/s, 6475.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptkms6kpc\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmptkms6kpc.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008884443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.56 tests/s, 225.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu70hchy2\nStarted\n.\nFinished in 0.00073123 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1367.56 tests/s, 5470.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp24hv9vrk\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp24hv9vrk.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00743613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.48 tests/s, 268.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk_zrfjqh\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpk_zrfjqh.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014935129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.96 tests/s, 133.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmq_86t7o\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpmq_86t7o.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011930057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.82 tests/s, 167.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbnju6nd\nStarted\n.\nFinished in 0.001047169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    954.96 tests/s, 3819.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx67ksfjh\nStarted\n.\nFinished in 0.000573304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1744.28 tests/s, 6977.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3zcppexs\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3zcppexs.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.016436844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.84 tests/s, 121.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.map\
    \ { |x, i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsw6a2j5g\nStarted\n.\nFinished in 0.000793658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1259.99 tests/s, 5039.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqbret9g\nStarted\n.\nFinished in 0.000756873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1321.23 tests/s, 5284.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb0fvwg2i\nStarted\n.\nFinished in 0.000751136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1331.32 tests/s, 5325.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwzjdkzwt\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwzjdkzwt.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008496668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.69 tests/s, 235.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp444axqm_\nStarted\n.\nFinished in 0.000772008 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1295.32 tests/s, 5181.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp58hqzsto\nStarted\n.\nFinished in 0.000507162 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1971.76 tests/s, 7887.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpepvk7_0i\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpepvk7_0i.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007754579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.96 tests/s, 257.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6449140a\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6449140a.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009788656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.16 tests/s, 204.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4n1yj4g2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp4n1yj4g2.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008692832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.04 tests/s, 230.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp88vxf72v\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp88vxf72v.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014079635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.02 tests/s, 142.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp38qpdf9v\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp38qpdf9v.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010617562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.18 tests/s, 188.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_k3u1bw6\nStarted\n.\nFinished in 0.00051956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1924.71 tests/s, 7698.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr297xkg5\nStarted\n.\nFinished in 0.000754917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1324.65 tests/s, 5298.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpke6ucqfh\nStarted\n.\nFinished in 0.000742302 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1347.16 tests/s, 5388.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpku1vffxe\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpku1vffxe.rb:11:in `test_add'\n     \
    \ 8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_add\n   \
    \  10:     candidate = method(:add)\n  => 11:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     12:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     14:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.011342912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.16 tests/s, 88.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphypwtmi1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmphypwtmi1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011497074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.98 tests/s, 173.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwuo_awma\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwuo_awma.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.01141991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.57 tests/s, 175.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfjlkuiz\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqfjlkuiz.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.00 tests/s, 144.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5cs4nyj1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp5cs4nyj1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.01331309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.11 tests/s, 150.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsbah_r64\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpsbah_r64.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.013017991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.82 tests/s, 153.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc03hirn5\nStarted\n.\nFinished in 0.000664543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1504.79 tests/s, 6019.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk4endldy\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpk4endldy.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011232821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.02 tests/s, 178.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfdonzfi3\nStarted\n.\nFinished in 0.00124526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    803.05 tests/s, 3212.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe2istkxc\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpe2istkxc.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009329029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.19 tests/s, 214.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5m01pwny\nStarted\n.\nFinished in 0.00092078 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1086.04 tests/s, 4344.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcmwrzw2f\nStarted\n.\nFinished in 0.001288828 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    775.90 tests/s, 3103.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsm6w3ugp\nStarted\n.\nFinished in 0.000939534 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1064.36 tests/s, 4257.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9fj5tdfn\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9fj5tdfn.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.015570091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.23 tests/s, 128.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3tmplnh\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpt3tmplnh.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011630836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.98 tests/s, 171.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpumpf4lof\nStarted\n.\nFinished in 0.000879707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1136.74 tests/s, 4546.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn8d2fgvs\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpn8d2fgvs.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.021499637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.51 tests/s, 93.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmperxrnd0y\nStarted\n.\nFinished in 0.000649478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1539.70 tests/s, 6158.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjalri6c3\nStarted\n.\nFinished in 0.000972587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1028.19 tests/s, 4112.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgm7ynuja\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpgm7ynuja.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014552577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.72 tests/s, 137.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ujiy64_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp0ujiy64_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011740189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.18 tests/s, 170.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp92aozowz\nStarted\n.\nFinished in 0.000699391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1429.82 tests/s, 5719.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxuc2wbow\nStarted\n.\nFinished in 0.000855586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1168.79 tests/s, 4675.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcb9djoi8\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpcb9djoi8.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.012633121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.16 tests/s, 158.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw2_m6cl5\nStarted\n.\nFinished in 0.000944043 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1059.27 tests/s, 4237.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpelgvgd9u\nStarted\n.\nFinished in 0.00064406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.65 tests/s, 6210.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk5skbr_h\nStarted\n.\nFinished in 0.001208174 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    827.70 tests/s, 3310.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv3kcz0rl\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpv3kcz0rl.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.007991177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.14 tests/s, 250.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphvwr3oic\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmphvwr3oic.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010831414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.32 tests/s, 184.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt327kxhf\nStarted\n.\nFinished in 0.001390151 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    719.35 tests/s, 2877.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfyhowqx7\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpfyhowqx7.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014438684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.26 tests/s, 138.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg8ztco_4\nStarted\n.\nFinished in 0.001035766 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    965.47 tests/s, 3861.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpleo14oe_\nStarted\n.\nFinished in 0.001921994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    520.29 tests/s, 2081.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv2ukg5vs\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpv2ukg5vs.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.015071382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.35 tests/s, 132.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcryyg28u\nStarted\n.\nFinished in 0.001152695 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    867.53 tests/s, 3470.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi508ptls\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpi508ptls.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011402706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.70 tests/s, 175.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj90z4i_8\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpj90z4i_8.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.011690976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.54 tests/s, 171.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu3mcx1e5\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpu3mcx1e5.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009767549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.38 tests/s, 204.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp29g6uplq\nStarted\n.\nFinished in 0.001051595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    950.94 tests/s, 3803.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9__fy44\nStarted\n.\nFinished in 0.000575187 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1738.57 tests/s, 6954.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ {|x, i| x.even? && i.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9fnmn2zq\nStarted\n.\nFinished in 0.000750238 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1332.91 tests/s, 5331.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ox5s3fd\nStarted\n.\nFinished in 0.000804415 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1243.14 tests/s, 4972.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxs5w_pc8\nStarted\n.\nFinished in 0.000559965 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1785.83 tests/s, 7143.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe_sfzr20\nStarted\n.\nFinished in 0.000980004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1020.40 tests/s, 4081.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphywpn34j\nStarted\n.\nFinished in 0.000517485 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1932.42 tests/s, 7729.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyxblkbvn\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpyxblkbvn.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.008291196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.61 tests/s, 241.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_mqnwlfn\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_mqnwlfn.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.01827118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.73 tests/s, 109.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptrrod_do\nStarted\n.\nFinished in 0.000587267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1702.80 tests/s, 6811.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl3w4u11b\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpl3w4u11b.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.009491733 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.35 tests/s, 210.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp19gwp4_t\nStarted\n.\nFinished in 0.000546025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1831.42 tests/s, 7325.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw38ebkmq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpw38ebkmq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.010587351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.45 tests/s, 188.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyufonwyy\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpyufonwyy.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006579503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.99 tests/s, 303.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprmtf90z0\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprmtf90z0.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.014068437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.08 tests/s, 142.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2erzdje2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp2erzdje2.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006402641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.19 tests/s, 312.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9wxo9_4j\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9wxo9_4j.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006823598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.55 tests/s, 293.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
