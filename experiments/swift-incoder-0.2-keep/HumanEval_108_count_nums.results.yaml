language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    guard arr.count > 0 else { return 0 }\n    var sum = 0\n    for\
    \ num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3u7181ar/tmp3u7181ar.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6aa3a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6aa09bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6aa09b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6aa09a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u7181ar                        0x000055fdf9601560 <unavailable> + 5472

    5    libc.so.6                          0x00002ba6aa590460 __libc_start_main +
    245

    6    tmp3u7181ar                        0x000055fdf9601129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      x -= x\n        }\n        count += x\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbucw4ofw.swift:13:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num % 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdqw4sa5q.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x > 0 {\n        \
    \    sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4tfzraab/tmp4tfzraab.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa5c9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa5c6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa5c6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa5c6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4tfzraab                        0x000055e383da55f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa5cba0460 __libc_start_main +
    245

    6    tmp4tfzraab                        0x000055e383da50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8jj_39gn/tmp8jj_39gn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80d80d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80d7dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80d7dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80d7dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jj_39gn                        0x0000558b76f58510 <unavailable> + 5392

    5    libc.so.6                          0x00002b80d82bd460 __libc_start_main +
    245

    6    tmp8jj_39gn                        0x0000558b76f580d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x)\n        } else {\n            sum += x\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp6hhtwej7/tmp6hhtwej7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b620f5dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b620f2d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b620f2d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b620f2d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hhtwej7                        0x00005634704a5510 <unavailable> + 5392

    5    libc.so.6                          0x00002b620f7c8460 __libc_start_main +
    245

    6    tmp6hhtwej7                        0x00005634704a50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    \n    var sum = 0\n    for num in arr {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp8s0dodba/tmp8s0dodba.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7941cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af793ec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af793ec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af793ec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8s0dodba                        0x000056382330b510 <unavailable> + 5392

    5    libc.so.6                          0x00002af7943bb460 __libc_start_main +
    245

    6    tmp8s0dodba                        0x000056382330b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += Int(log10(abs(x)))\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcxnevo41.swift:13:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(abs(x)))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        count += count_digits(num)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp61hy67sr.swift:12:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num == 0 {\n            count +=\
    \ 1\n        } else {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbgyd5nfn.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1nv8p7fv/tmp1nv8p7fv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fea418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fea10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fea10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fea10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nv8p7fv                        0x0000561c7ccbc5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b2fea604460 __libc_start_main +
    245

    6    tmp1nv8p7fv                        0x0000561c7ccbc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num % 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdqw4sa5q.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count +=\
    \ 1\n        } else if num < 100 {\n            count += 2\n        } else if\
    \ num < 1000 {\n            count += 3\n        } else if num < 10000 {\n    \
    \        count += 4\n        } else if num < 100000 {\n            count += 5\n\
    \        } else if num < 1000000 {\n            count += 6\n        } else if\
    \ num < 10000000 {\n            count += 7\n        } else if num < 100000000\
    \ {\n            count += 8\n        } else if num < 1000000000 {\n          \
    \  count += 9\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyktzlg77.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num == 0 {\n            count +=\
    \ 1\n        } else {\n            count += num / 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpimdciiiy.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) + 1\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2bs0zgh2/tmp2bs0zgh2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56fac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56f7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56f7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56f7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bs0zgh2                        0x00005588b226f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab56fcb3460 __libc_start_main +
    245

    6    tmp2bs0zgh2                        0x00005588b226f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    guard arr.count > 0 else {\n        return 0\n    }\n    var count\
    \ = 0\n    for num in arr {\n        if num < 0 {\n            num = -num\n  \
    \      }\n        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn5b3061n.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1nv8p7fv/tmp1nv8p7fv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fea418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fea10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fea10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fea10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nv8p7fv                        0x0000561c7ccbc5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b2fea604460 __libc_start_main +
    245

    6    tmp1nv8p7fv                        0x0000561c7ccbc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count +=\
    \ 1\n        } else if num < 100 {\n            count += 2\n        } else if\
    \ num < 1000 {\n            count += 3\n        } else if num < 10000 {\n    \
    \        count += 4\n        } else if num < 100000 {\n            count += 5\n\
    \        } else if num < 1000000 {\n            count += 6\n        } else if\
    \ num < 10000000 {\n            count += 7\n        } else if num < 100000000\
    \ {\n            count += 8\n        } else if num < 1000000000 {\n          \
    \  count += 9\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyktzlg77.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    guard arr.count > 0 else {\n        return 0\n    }\n    var sum\
    \ = 0\n    for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmps4yk37hr/tmps4yk37hr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2be7cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2be4c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2be4c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2be4c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4yk37hr                        0x0000556570de3560 <unavailable> + 5472

    5    libc.so.6                          0x00002ae2be9b6460 __libc_start_main +
    245

    6    tmps4yk37hr                        0x0000556570de3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += x / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn6ldws49/tmpn6ldws49.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943a0bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9439db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9439db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9439db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6ldws49                        0x000055f33b359685 <unavailable> + 5765

    5    libc.so.6                          0x00002b943a2a9460 __libc_start_main +
    245

    6    tmpn6ldws49                        0x000055f33b359169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num.signum()\n        } else {\n            sum += num\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpmxt6wcpm/tmpmxt6wcpm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac03e0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac03ddd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac03ddd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac03ddd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxt6wcpm                        0x000055c9b7e13560 <unavailable> + 5472

    5    libc.so.6                          0x00002ac03e2c6460 __libc_start_main +
    245

    6    tmpmxt6wcpm                        0x000055c9b7e13129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp19p22pzt/tmp19p22pzt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac44f8abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac44f5a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac44f5a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac44f5a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19p22pzt                        0x00005631c4adf510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac44fa97460 __libc_start_main +
    245

    6    tmp19p22pzt                        0x00005631c4adf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        count += count_digits(x)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpncx3leqe.swift:12:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += 1\n        } else {\n            count += count_nums([x/10, x%10])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx2t8p5n3.swift:15:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([x/10, x%10])\n                             \
    \   ^\n                                arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        } else {\n            count += x * -1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp_24yy89w/tmp_24yy89w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac705205c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac704efcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac704efc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac704efb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_24yy89w                        0x000055aac7009510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac7053f1460 __libc_start_main +
    245

    6    tmp_24yy89w                        0x000055aac70090d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x > 0 {\n        \
    \    sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4tfzraab/tmp4tfzraab.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa5c9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa5c6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa5c6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa5c6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4tfzraab                        0x000055e383da55f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa5cba0460 __libc_start_main +
    245

    6    tmp4tfzraab                        0x000055e383da50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) + 1\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2bs0zgh2/tmp2bs0zgh2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56fac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56f7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56f7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56f7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bs0zgh2                        0x00005588b226f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab56fcb3460 __libc_start_main +
    245

    6    tmp2bs0zgh2                        0x00005588b226f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) + 1\n        } else {\n            sum += x\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpahijgw1v/tmpahijgw1v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8872d68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8872a5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8872a5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8872a5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahijgw1v                        0x00005617f3940510 <unavailable> + 5392

    5    libc.so.6                          0x00002b8872f54460 __libc_start_main +
    245

    6    tmpahijgw1v                        0x00005617f39400d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) + 1\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2bs0zgh2/tmp2bs0zgh2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56fac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56f7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56f7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56f7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bs0zgh2                        0x00005588b226f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab56fcb3460 __libc_start_main +
    245

    6    tmp2bs0zgh2                        0x00005588b226f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8jj_39gn/tmp8jj_39gn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80d80d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80d7dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80d7dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80d7dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jj_39gn                        0x0000558b76f58510 <unavailable> + 5392

    5    libc.so.6                          0x00002b80d82bd460 __libc_start_main +
    245

    6    tmp8jj_39gn                        0x0000558b76f580d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        num = -num\n        }\n        sum += num\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzi3q5e33.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += count_nums([-x])\n        } else {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq7wre1v6.swift:13:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([-x])\n                                ^\n  \
    \                              arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x > 0 {\n        \
    \    sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4tfzraab/tmp4tfzraab.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa5c9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa5c6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa5c6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa5c6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4tfzraab                        0x000055e383da55f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa5cba0460 __libc_start_main +
    245

    6    tmp4tfzraab                        0x000055e383da50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += 1\n        } else {\n            count += count_nums([x/10, x%10])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx2t8p5n3.swift:15:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([x/10, x%10])\n                             \
    \   ^\n                                arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ if sum < 0 {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8jj_39gn/tmp8jj_39gn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80d80d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80d7dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80d7dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80d7dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jj_39gn                        0x0000558b76f58510 <unavailable> + 5392

    5    libc.so.6                          0x00002b80d82bd460 __libc_start_main +
    245

    6    tmp8jj_39gn                        0x0000558b76f580d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count +=\
    \ 1\n        } else if num < 100 {\n            count += 2\n        } else if\
    \ num < 1000 {\n            count += 3\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy5tlp1bs.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        count += count_digits(num)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp61hy67sr.swift:12:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) + 1\n        } else {\n            sum += x\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpahijgw1v/tmpahijgw1v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8872d68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8872a5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8872a5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8872a5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahijgw1v                        0x00005617f3940510 <unavailable> + 5392

    5    libc.so.6                          0x00002b8872f54460 __libc_start_main +
    245

    6    tmpahijgw1v                        0x00005617f39400d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1nv8p7fv/tmp1nv8p7fv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fea418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fea10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fea10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fea10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nv8p7fv                        0x0000561c7ccbc5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b2fea604460 __libc_start_main +
    245

    6    tmp1nv8p7fv                        0x0000561c7ccbc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += count_nums([-x])\n        } else {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq7wre1v6.swift:13:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([-x])\n                                ^\n  \
    \                              arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) + 1\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2bs0zgh2/tmp2bs0zgh2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56fac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56f7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56f7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56f7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bs0zgh2                        0x00005588b226f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab56fcb3460 __libc_start_main +
    245

    6    tmp2bs0zgh2                        0x00005588b226f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) + 1\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2bs0zgh2/tmp2bs0zgh2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56fac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56f7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56f7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56f7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bs0zgh2                        0x00005588b226f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab56fcb3460 __libc_start_main +
    245

    6    tmp2bs0zgh2                        0x00005588b226f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp19p22pzt/tmp19p22pzt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac44f8abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac44f5a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac44f5a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac44f5a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19p22pzt                        0x00005631c4adf510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac44fa97460 __libc_start_main +
    245

    6    tmp19p22pzt                        0x00005631c4adf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += Int(num / 10)\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzzn8k0oc.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += count_nums([-x])\n        } else {\n            count += count_nums([x])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpk534buom.swift:13:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([-x])\n                                ^\n  \
    \                              arr: \n/tmp/tmpk534buom.swift:15:33: error: missing\
    \ argument label 'arr:' in call\n            count += count_nums([x])\n      \
    \                          ^\n                                arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        } else {\n            count += x * -1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp_24yy89w/tmp_24yy89w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac705205c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac704efcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac704efc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac704efb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_24yy89w                        0x000055aac7009510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac7053f1460 __libc_start_main +
    245

    6    tmp_24yy89w                        0x000055aac70090d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += count_digits(x)\n        } else {\n            count += count_digits(-x)\
    \ * 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcbdhjr6r.swift:13:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpcbdhjr6r.swift:15:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ * 10\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count +=\
    \ 1\n        } else if num < 100 {\n            count += 2\n        } else if\
    \ num < 1000 {\n            count += 3\n        } else if num < 10000 {\n    \
    \        count += 4\n        } else if num < 100000 {\n            count += 5\n\
    \        } else if num < 1000000 {\n            count += 6\n        } else if\
    \ num < 10000000 {\n            count += 7\n        } else if num < 100000000\
    \ {\n            count += 8\n        } else if num < 1000000000 {\n          \
    \  count += 9\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyktzlg77.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      x -= Int(log10(abs(x)))\n        }\n        count += Int(log10(x))\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp34oseoku.swift:13:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmp34oseoku.swift:15:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(x))\n      \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        num = -num\n        }\n        sum += num\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzi3q5e33.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp7f2gkn5/tmpp7f2gkn5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71394f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71391eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71391ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71391ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7f2gkn5                        0x0000564f158d65f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b71396e3460 __libc_start_main +
    245

    6    tmpp7f2gkn5                        0x0000564f158d60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        count += count_digits(x)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpncx3leqe.swift:12:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) + 1\n        } else {\n            sum += x\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpahijgw1v/tmpahijgw1v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8872d68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8872a5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8872a5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8872a5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahijgw1v                        0x00005617f3940510 <unavailable> + 5392

    5    libc.so.6                          0x00002b8872f54460 __libc_start_main +
    245

    6    tmpahijgw1v                        0x00005617f39400d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    guard arr.count > 0 else { return 0 }\n    var count = 0\n   \
    \ for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n        num %= 10\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdwwlm3n4.swift:14:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpdwwlm3n4.swift:17:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += (-x) / 10\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmptyiq9yqz/tmptyiq9yqz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbc63bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbc60b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbc60b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbc60b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptyiq9yqz                        0x0000557424d295a0 <unavailable> + 5536

    5    libc.so.6                          0x00002acbc65a8460 __libc_start_main +
    245

    6    tmptyiq9yqz                        0x0000557424d29169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num > 0 {\n            count += num\
    \ % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8qo8w6cb.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += count_digits(x)\n        } else {\n            count += count_digits(-x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpabjibsx2.swift:13:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpabjibsx2.swift:15:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1nv8p7fv/tmp1nv8p7fv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fea418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fea10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fea10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fea10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nv8p7fv                        0x0000561c7ccbc5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b2fea604460 __libc_start_main +
    245

    6    tmp1nv8p7fv                        0x0000561c7ccbc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      x -= x\n        }\n        if x > 9 {\n            x -= 10\n        }\n\
    \        count += x\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpem1wvk3b.swift:13:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n/tmp/tmpem1wvk3b.swift:16:15:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \            x -= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    \n    var count = 0\n    for num in arr {\n        if num < 0\
    \ {\n            num = -num\n        }\n        \n        if num < 10 {\n    \
    \        count += 1\n        } else if num < 100 {\n            count += 2\n \
    \       } else if num < 1000 {\n            count += 3\n        } else if num\
    \ < 10000 {\n            count += 4\n        } else if num < 100000 {\n      \
    \      count += 5\n        } else if num < 1000000 {\n            count += 6\n\
    \        } else if num < 10000000 {\n            count += 7\n        } else if\
    \ num < 100000000 {\n            count += 8\n        } else if num < 1000000000\
    \ {\n            count += 9\n        }\n    }\n    \n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6hl8olin.swift:14:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    \n    // Write your code here.\n    \n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpky_6d849/tmpky_6d849.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca4d8d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca4d5c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca4d5c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca4d5c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpky_6d849                        0x000056279182c485 <unavailable> + 5253

    5    libc.so.6                          0x00002aca4dabe460 __libc_start_main +
    245

    6    tmpky_6d849                        0x000056279182bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x >= 0 {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp7n92lkn1/tmp7n92lkn1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703c449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703c140b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703c140988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703c13f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n92lkn1                        0x00005557968665f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b703c635460 __libc_start_main +
    245

    6    tmp7n92lkn1                        0x00005557968660d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    guard arr.count > 0 else { return 0 }\n    var count = 0\n   \
    \ for x in arr {\n        guard x > 0 else { continue }\n        let digit = Int(log10(x))\n\
    \        guard digit > 0 else { continue }\n        count += digit - 1\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfet6q7g2.swift:14:25: error: cannot find 'log10' in scope\n   \
    \     let digit = Int(log10(x))\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n        else {\n            count += x * -1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmplwssjeaq/tmplwssjeaq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93e4303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93e3ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93e3ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93e3ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwssjeaq                        0x000055ff50f92510 <unavailable> + 5392

    5    libc.so.6                          0x00002b93e44ef460 __libc_start_main +
    245

    6    tmplwssjeaq                        0x000055ff50f920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2an6n4z4.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        if x < 0 {\n        \
    \    sum += (-x) % 10\n        } else {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp44f15hvu/tmp44f15hvu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece7c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece7c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece7c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44f15hvu                        0x0000558e1ef585a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aece8108460 __libc_start_main +
    245

    6    tmp44f15hvu                        0x0000558e1ef58169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x < 0 {\n      \
    \      count += count_nums([-x])\n        } else {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq7wre1v6.swift:13:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([-x])\n                                ^\n  \
    \                              arr: \n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += count_digits(x)\n        } else {\n            count += count_digits(-x)\
    \ + 1 // first signed digit\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptc11of_q.swift:13:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmptc11of_q.swift:15:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 1 // first signed digit\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n     \
    \       count += x\n        }\n        else {\n            count += (-x) + 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp07mwpa3a/tmp07mwpa3a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba401a1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4017117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07mwpa3a                        0x0000560422aa6510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba401c07460 __libc_start_main +
    245

    6    tmp07mwpa3a                        0x0000560422aa60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += (-num).abs\n        } else {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tdj9k2i.swift:13:27: error: value of type 'Int' has no member\
    \ 'abs'\n            sum += (-num).abs\n                   ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count++\n\
    \        } else if num < 100 {\n            count += 2\n        } else if num\
    \ < 1000 {\n            count += 3\n        } else if num < 10000 {\n        \
    \    count += 4\n        } else if num < 100000 {\n            count += 5\n  \
    \      } else if num < 1000000 {\n            count += 6\n        } else if num\
    \ < 10000000 {\n            count += 7\n        } else if num < 100000000 {\n\
    \            count += 8\n        } else if num < 1000000000 {\n            count\
    \ += 9\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe8x9uqff.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe8x9uqff.swift:16:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n    \
    \        sum += num\n        } else {\n            sum += num % 10\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzwmdm92g/tmpzwmdm92g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b299db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b299d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b299c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwmdm92g                        0x0000555cd65bd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74b2e92460 __libc_start_main +
    245

    6    tmpzwmdm92g                        0x0000555cd65bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num < 10 {\n            count +=\
    \ 1\n        } else if num < 100 {\n            count += 2\n        } else if\
    \ num < 1000 {\n            count += 3\n        } else if num < 10000 {\n    \
    \        count += 4\n        } else if num < 100000 {\n            count += 5\n\
    \        } else if num < 1000000 {\n            count += 6\n        } else if\
    \ num < 10000000 {\n            count += 7\n        } else if num < 100000000\
    \ {\n            count += 8\n        } else if num < 1000000000 {\n          \
    \  count += 9\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyktzlg77.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        count += num / 10\n        num %= 10\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhsi4e2s.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpfhsi4e2s.swift:16:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += x / 10\n        }\n        if x < 0 {\n            count += x\
    \ / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpvg6uzc77/tmpvg6uzc77.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9415354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b941504bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b941504b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b941504a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg6uzc77                        0x00005628986fc685 <unavailable> + 5765

    5    libc.so.6                          0x00002b9415540460 __libc_start_main +
    245

    6    tmpvg6uzc77                        0x00005628986fc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013382
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        if x > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpu8aj7y7a/tmpu8aj7y7a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe47c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe44bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe44bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe44bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8aj7y7a                        0x0000555e1aa248ca <unavailable> + 6346

    5    libc.so.6                          0x00002b4fe49b2460 __libc_start_main +
    245

    6    tmpu8aj7y7a                        0x0000555e1aa240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        count += count_digits(num)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp61hy67sr.swift:12:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          num = -num\n        }\n        if num > 0 {\n            count += num\
    \ % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8qo8w6cb.swift:13:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for x in arr {\n        sum += x\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkslmvw6a/tmpkslmvw6a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3d19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3ce94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace3ce94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace3ce937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkslmvw6a                        0x00005574b00d0510 <unavailable> + 5392

    5    libc.so.6                          0x00002ace3d389460 __libc_start_main +
    245

    6    tmpkslmvw6a                        0x00005574b00d00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in arr {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpd2y7rcwi/tmpd2y7rcwi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf67615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6730cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6730c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6730b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2y7rcwi                        0x0000558fd1e1e510 <unavailable> + 5392

    5    libc.so.6                          0x00002abf67801460 __libc_start_main +
    245

    6    tmpd2y7rcwi                        0x0000558fd1e1e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013381
