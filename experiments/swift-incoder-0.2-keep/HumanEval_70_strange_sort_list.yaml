name: HumanEval_70_strange_sort_list
language: swift
prompt: "\n/// Given list of integers, return list in strange order.\n/// Strange\
  \ sorting, is when you start with the minimum value,\n/// then maximum of the remaining\
  \ integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1, 2,\
  \ 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
  /// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) ==\
  \ [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
  \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
  \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as\
  \ [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7,\
  \ 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
  \ 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
completions: ["    var result = [Int]()\n    var min: Int = 0\n    var max: Int =\
    \ 0\n    for num in lst {\n        if num < min {\n            min = num\n   \
    \     }\n        if num > max {\n            max = num\n        }\n    }\n   \
    \ for num in lst {\n        if num == min {\n            result.insert(num, num)\n\
    \        }\n        if num == max {\n            result.insert(num, num)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min {\n  \
    \          min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for number in lst {\n        if number\
    \ > max {\n            max = number\n        } else if number < min {\n      \
    \      min = number\n        }\n    }\n    for number in lst {\n        if number\
    \ > max {\n            result.insert(max, number)\n            max = number\n\
    \        } else if number < min {\n            result.insert(min, number)\n  \
    \          min = number\n        }\n    }\n    return result", "    var result\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                tmp := lst[i]\n   \
    \             lst[i] = lst[j]\n                lst[j] = tmp\n            }\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int\n    var max: Int\n    for i := 0; i < len(lst); i++ {\n        min = max\
    \ = lst[i]\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n            }\n        }\n        for\
    \ k := 0; k < len(result); k++ {\n            if lst[k] < min {\n            \
    \    result[k] = min\n            } else {\n                result[k] = max\n\
    \            }\n        }\n    }\n    return result", "    var lst2 = lst\n  \
    \  for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n\
    \            if lst[i] > lst2[j] {\n                lst[i], lst2[j] = lst2[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst2", "    var lstCopy\
    \ = lst\n    for i := 0; i < len(lstCopy); i++ {\n        for j := 0; j < len(lstCopy)\
    \ - i - 1; j++ {\n            if lstCopy[j] > lstCopy[j+1] {\n               \
    \ lstCopy[j], lstCopy[j+1] = lstCopy[j+1], lstCopy[j]\n            }\n       \
    \ }\n    }\n    return lstCopy", "    var lst2 = lst\n    var min: Int\n    var\
    \ max: Int\n    var min2: Int\n    var max2: Int\n    var min3: Int\n    var max3:\
    \ Int\n    var min4: Int\n    var max4: Int\n    var min5: Int\n    var max5:\
    \ Int\n    var min6: Int\n    var max6: Int\n    var min7: Int\n    var max7:\
    \ Int\n    var min8: Int\n    var max8: Int\n    var min9: Int\n    var max9:\
    \ Int\n    var min10: Int\n    var max10: Int\n    var min11: Int\n    var max11:\
    \ Int\n    var min12: Int\n    var max12: Int\n    var min13: Int\n    var max13:\
    \ Int\n    var min14: Int\n    var max14: Int\n    var min15: Int\n    var max15:\
    \ Int\n    var min16: Int\n    var max16: Int\n    var min17: Int\n    var max17:\
    \ Int\n    var min18: Int\n    var max18: Int\n    var min19: Int\n    var max19:\
    \ Int\n    var min20: Int\n    var max20: Int\n    var min21: Int\n    var max21:\
    \ Int\n    var min22: Int\n    var max22: Int\n    var min23: Int\n    var max23:\
    \ Int\n    var min24: Int\n    var max24: Int\n    var min25: Int\n    var max25:\
    \ Int\n    var min26: Int\n    var max26: Int\n    var min27: Int\n    var max27:\
    \ Int\n    var min28: Int\n    var max28: Int\n    var min29: Int\n    var max29:\
    \ Int\n    var min30: Int\n    var max30: Int\n    var min31: Int\n    var max31:\
    \ Int\n    var min32: Int\n    var max32: Int\n    var min33: Int\n    var max33:\
    \ Int\n    var min34: Int\n    var max34: Int\n    var min35: Int\n    var max35:\
    \ Int\n    var min36: Int\n    var max36: Int\n    var min37: Int\n    var max37:\
    \ Int\n    var min38: Int\n    var max38: Int\n    var min39: Int\n    var max39:\
    \ Int\n    var min40: Int\n    var max40: Int\n    var min41: Int\n    var max41:\
    \ Int\n    var min42: Int\n    var max42: Int\n    var min43: Int\n    var max43:\
    \ Int\n    var ", "    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ num)\n        }\n        if num == max {\n            result.insert(num, num)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int\n    var max: Int\n    for el in lst {\n        if min == 0 {\n        \
    \    min = el\n        } else {\n            if el < min {\n                min\
    \ = el\n            }\n        }\n        if max == 0 {\n            max = el\n\
    \        } else {\n            if el > max {\n                max = el\n     \
    \       }\n        }\n    }\n    for el in lst {\n        if el < min {\n    \
    \        result.insert(el, min)\n        } else {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result", "    var result = lst\n    for i\
    \ := 0; i < len(lst); i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ lst[j] > lst[j+1] {\n                tmp := lst[j]\n                lst[j] =\
    \ lst[j+1]\n                lst[j+1] = tmp\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(maxValue, value)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < minValue {\n            minValue = lst[i]\n        }\n        if lst[i] >\
    \ maxValue {\n            maxValue = lst[i]\n        }\n    }\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < minValue {\n            lst[i] = minValue\n\
    \        }\n        if lst[i] > maxValue {\n            lst[i] = maxValue\n  \
    \      }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > minValue\
    \ {\n            lst[i] = minValue\n        }\n        if lst[i] < maxValue {\n\
    \            lst[i] = maxValue\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > minValue {\n            result.append(minValue)\n\
    \        }\n        if lst[i] < maxValue {\n            result.append(maxValue)\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > minValue\
    \ {\n            result.append(minValue)\n        }\n        if lst[i] < maxValue\
    \ {\n            result.append(maxValue)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n        if lst[i] < min {\n        \
    \    min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n        if lst[i] < min {\n        \
    \    min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for ", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(result); j++ {\n            if result[j]\
    \ < lst[i] {\n                let tmp = result[j]\n                result[j] =\
    \ lst[i]\n                lst[i] = tmp\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue\
    \ = lst[0]\n    for value in lst {\n        if value < minValue {\n          \
    \  minValue = value\n        }\n        if value > maxValue {\n            maxValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(minValue, value)\n        } else if value > maxValue\
    \ {\n            result.insert(maxValue, value)\n        } else {\n          \
    \  result.insert(value, value)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n   \
    \ for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        } else if value > maxValue {\n            maxValue = value\n        }\n\
    \    }\n    for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int = 0\n\
    \    var max: Int = 0\n    for num in lst {\n        if num < min {\n        \
    \    min = num\n        }\n        if num > max {\n            max = num\n   \
    \     }\n    }\n    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ num)\n        }\n        if num == max {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if num == min {\n    \
    \        result.insert(num, num)\n        }\n        if num == max {\n       \
    \     result.insert(num, num)\n        }\n    }\n    for num in lst {\n      \
    \  if num == min {\n            result.insert(num, num)\n        }\n        if\
    \ num == max {\n            result.insert(num, num)\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := 0; j < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n          \
    \      lst[i], lst2[j] = lst2[j], lst[i]\n            }\n        }\n    }\n  \
    \  return lst2", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < i; j++ {\n            if lst[j] > lst[j+1] {\n      \
    \          let tmp = lst[j]\n                lst[j] = lst[j+1]\n             \
    \   lst[j+1] = tmp\n            }\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
