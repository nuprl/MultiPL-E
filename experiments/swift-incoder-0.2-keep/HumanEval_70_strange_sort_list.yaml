name: HumanEval_70_strange_sort_list
language: swift
prompt: "\n/// Given list of integers, return list in strange order.\n/// Strange\
  \ sorting, is when you start with the minimum value,\n/// then maximum of the remaining\
  \ integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1, 2,\
  \ 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
  /// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) ==\
  \ [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
  \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
  \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as\
  \ [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7,\
  \ 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
  \ 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
completions: ["    var result = [Int]()\n    var min: Int = 0\n    var max: Int =\
    \ 0\n    for num in lst {\n        if num < min {\n            min = num\n   \
    \     }\n        if num > max {\n            max = num\n        }\n    }\n   \
    \ for num in lst {\n        if num == min {\n            result.insert(num, num)\n\
    \        }\n        if num == max {\n            result.insert(num, num)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min {\n  \
    \          min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for number in lst {\n        if number\
    \ > max {\n            max = number\n        } else if number < min {\n      \
    \      min = number\n        }\n    }\n    for number in lst {\n        if number\
    \ > max {\n            result.insert(max, number)\n            max = number\n\
    \        } else if number < min {\n            result.insert(min, number)\n  \
    \          min = number\n        }\n    }\n    return result", "    var result\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                tmp := lst[i]\n   \
    \             lst[i] = lst[j]\n                lst[j] = tmp\n            }\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int\n    var max: Int\n    for i := 0; i < len(lst); i++ {\n        min = max\
    \ = lst[i]\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n            }\n        }\n        for\
    \ k := 0; k < len(result); k++ {\n            if lst[k] < min {\n            \
    \    result[k] = min\n            } else {\n                result[k] = max\n\
    \            }\n        }\n    }\n    return result", "    var lst2 = lst\n  \
    \  for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n\
    \            if lst[i] > lst2[j] {\n                lst[i], lst2[j] = lst2[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst2", "    var lstCopy\
    \ = lst\n    for i := 0; i < len(lstCopy); i++ {\n        for j := 0; j < len(lstCopy)\
    \ - i - 1; j++ {\n            if lstCopy[j] > lstCopy[j+1] {\n               \
    \ lstCopy[j], lstCopy[j+1] = lstCopy[j+1], lstCopy[j]\n            }\n       \
    \ }\n    }\n    return lstCopy", "    var lst2 = lst\n    var min: Int\n    var\
    \ max: Int\n    var min2: Int\n    var max2: Int\n    var min3: Int\n    var max3:\
    \ Int\n    var min4: Int\n    var max4: Int\n    var min5: Int\n    var max5:\
    \ Int\n    var min6: Int\n    var max6: Int\n    var min7: Int\n    var max7:\
    \ Int\n    var min8: Int\n    var max8: Int\n    var min9: Int\n    var max9:\
    \ Int\n    var min10: Int\n    var max10: Int\n    var min11: Int\n    var max11:\
    \ Int\n    var min12: Int\n    var max12: Int\n    var min13: Int\n    var max13:\
    \ Int\n    var min14: Int\n    var max14: Int\n    var min15: Int\n    var max15:\
    \ Int\n    var min16: Int\n    var max16: Int\n    var min17: Int\n    var max17:\
    \ Int\n    var min18: Int\n    var max18: Int\n    var min19: Int\n    var max19:\
    \ Int\n    var min20: Int\n    var max20: Int\n    var min21: Int\n    var max21:\
    \ Int\n    var min22: Int\n    var max22: Int\n    var min23: Int\n    var max23:\
    \ Int\n    var min24: Int\n    var max24: Int\n    var min25: Int\n    var max25:\
    \ Int\n    var min26: Int\n    var max26: Int\n    var min27: Int\n    var max27:\
    \ Int\n    var min28: Int\n    var max28: Int\n    var min29: Int\n    var max29:\
    \ Int\n    var min30: Int\n    var max30: Int\n    var min31: Int\n    var max31:\
    \ Int\n    var min32: Int\n    var max32: Int\n    var min33: Int\n    var max33:\
    \ Int\n    var min34: Int\n    var max34: Int\n    var min35: Int\n    var max35:\
    \ Int\n    var min36: Int\n    var max36: Int\n    var min37: Int\n    var max37:\
    \ Int\n    var min38: Int\n    var max38: Int\n    var min39: Int\n    var max39:\
    \ Int\n    var min40: Int\n    var max40: Int\n    var min41: Int\n    var max41:\
    \ Int\n    var min42: Int\n    var max42: Int\n    var min43: Int\n    var max43:\
    \ Int\n    var ", "    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ num)\n        }\n        if num == max {\n            result.insert(num, num)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int\n    var max: Int\n    for el in lst {\n        if min == 0 {\n        \
    \    min = el\n        } else {\n            if el < min {\n                min\
    \ = el\n            }\n        }\n        if max == 0 {\n            max = el\n\
    \        } else {\n            if el > max {\n                max = el\n     \
    \       }\n        }\n    }\n    for el in lst {\n        if el < min {\n    \
    \        result.insert(el, min)\n        } else {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result", "    var result = lst\n    for i\
    \ := 0; i < len(lst); i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ lst[j] > lst[j+1] {\n                tmp := lst[j]\n                lst[j] =\
    \ lst[j+1]\n                lst[j+1] = tmp\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(maxValue, value)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < minValue {\n            minValue = lst[i]\n        }\n        if lst[i] >\
    \ maxValue {\n            maxValue = lst[i]\n        }\n    }\n    for i := 0;\
    \ i < len(lst); i++ {\n        if lst[i] < minValue {\n            lst[i] = minValue\n\
    \        }\n        if lst[i] > maxValue {\n            lst[i] = maxValue\n  \
    \      }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > minValue\
    \ {\n            lst[i] = minValue\n        }\n        if lst[i] < maxValue {\n\
    \            lst[i] = maxValue\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > minValue {\n            result.append(minValue)\n\
    \        }\n        if lst[i] < maxValue {\n            result.append(maxValue)\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > minValue\
    \ {\n            result.append(minValue)\n        }\n        if lst[i] < maxValue\
    \ {\n            result.append(maxValue)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n        if lst[i] < min {\n        \
    \    min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n        if lst[i] < min {\n        \
    \    min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n        if lst[i] < min {\n            min = lst[i]\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > max {\n      \
    \      max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    for ", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(result); j++ {\n            if result[j]\
    \ < lst[i] {\n                let tmp = result[j]\n                result[j] =\
    \ lst[i]\n                lst[i] = tmp\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue\
    \ = lst[0]\n    for value in lst {\n        if value < minValue {\n          \
    \  minValue = value\n        }\n        if value > maxValue {\n            maxValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(minValue, value)\n        } else if value > maxValue\
    \ {\n            result.insert(maxValue, value)\n        } else {\n          \
    \  result.insert(value, value)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n   \
    \ for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        } else if value > maxValue {\n            maxValue = value\n        }\n\
    \    }\n    for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int = 0\n\
    \    var max: Int = 0\n    for num in lst {\n        if num < min {\n        \
    \    min = num\n        }\n        if num > max {\n            max = num\n   \
    \     }\n    }\n    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ num)\n        }\n        if num == max {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if num == min {\n    \
    \        result.insert(num, num)\n        }\n        if num == max {\n       \
    \     result.insert(num, num)\n        }\n    }\n    for num in lst {\n      \
    \  if num == min {\n            result.insert(num, num)\n        }\n        if\
    \ num == max {\n            result.insert(num, num)\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := 0; j < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n          \
    \      lst[i], lst2[j] = lst2[j], lst[i]\n            }\n        }\n    }\n  \
    \  return lst2", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < i; j++ {\n            if lst[j] > lst[j+1] {\n      \
    \          let tmp = lst[j]\n                lst[j] = lst[j+1]\n             \
    \   lst[j+1] = tmp\n            }\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var min = lst[0]\n    var max = lst[0]\n    for el\
    \ in lst {\n        if el < min {\n            min = el\n        }\n        if\
    \ el > max {\n            max = el\n        }\n    }\n    for el in lst {\n  \
    \      if el == min {\n            result.insert(el, min)\n        }\n       \
    \ if el == max {\n            result.insert(el, max)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue\
    \ = lst[0]\n    for value in lst {\n        if value < minValue {\n          \
    \  minValue = value\n        }\n        if value > maxValue {\n            maxValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(minValue, value)\n        } else {\n          \
    \  result.insert(value, maxValue)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for el in lst {\n        if el < min {\n            min = el\n        }\n\
    \        if el > max {\n            max = el\n        }\n    }\n    for el in\
    \ lst {\n        if el == min {\n            result.insert(el, min)\n        }\n\
    \        if el == max {\n            result.insert(el, max)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var min: Int = 0\n    var\
    \ max: Int = 0\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            result.insert(num, num)\n    \
    \    }\n    }\n    for num in lst {\n        if min > num {\n            min =\
    \ num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }", "    var result = lst\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(lst); j++ {\n            if j == i {\n      \
    \          continue\n            }\n            if lst[i] > lst[j] {\n       \
    \         tmp := lst[i]\n                lst[i] = lst[j]\n                lst[j]\
    \ = tmp\n            }\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var min: Int\n    var max: Int\n    for num in lst {\n      \
    \  if min == nil || num < min {\n            min = num\n        }\n        if\
    \ max == nil || num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num == min {\n            result.insert(num, num)\n\
    \        }\n        if num == max {\n            result.insert(num, num)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       } else {\n            result.insert(maxValue, value)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var min: Int = 0\n    var\
    \ max: Int = 0\n    for i := 0; i < len(lst); i++ {\n        if min > lst[i] {\n\
    \            min = lst[i]\n        }\n        if max < lst[i] {\n            max\
    \ = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if\
    \ min > lst[i] {\n            min = lst[i]\n        }\n        if max < lst[i]\
    \ {\n            max = lst[i]\n        }\n        if min == max {\n          \
    \  result.append(min)\n        } else {\n            result.append(min)\n    \
    \        result.append(max)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var min: Int\n    var max: Int\n    for x in lst {\n        if\
    \ min == nil || x < min {\n            min = x\n        }\n        if max == nil\
    \ || x > max {\n            max = x\n        }\n    }\n    for x in lst {\n  \
    \      if x == min {\n            result.insert(x, 0)\n        }\n        if x\
    \ == max {\n            result.insert(x, result.count - 1)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for el in lst {\n        if el < min {\n            min =\
    \ el\n        }\n        if el > max {\n            max = el\n        }\n    }\n\
    \    for el in lst {\n        if el == min {\n            result.insert(el, min)\n\
    \        }\n        if el == max {\n            result.insert(el, max)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = 0\n    var max: Int = 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            lst[i] = min\n        }\n    \
    \    if lst[i] > max {\n            lst[i] = max\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = min\n\
    \        }\n        if lst[i] > max {\n            lst[i] = max\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      lst[i] = min\n        }\n        if lst[i] > max {\n            lst[i]\
    \ = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            lst[i] = min\n        }\n        if lst[i] > max {\n  \
    \          lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            lst[i] = min\n        }\n    \
    \    if lst[i] > max {\n            lst[i] = max\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = min\n\
    \        }\n        if lst[i] > max {\n            lst[i] = max\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      lst[i] = min\n        }\n        if lst[i] > max {\n            lst[i]\
    \ = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            lst[i] = min\n        }\n        if lst[i] > max {\n  \
    \          lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for ", "    var lst2\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst[i] > lst2[j] {\n                lst[i], lst2[j] =\
    \ lst2[j], lst[i]\n            }\n        }\n    }\n    return lst2", "    var\
    \ lstCopy = lst\n    for i := 0; i < len(lstCopy); i++ {\n        for j := 0;\
    \ j < len(lstCopy) - i - 1; j++ {\n            if lstCopy[j] > lstCopy[j+1] {\n\
    \                lstCopy[j], lstCopy[j+1] = lstCopy[j+1], lstCopy[j]\n       \
    \     }\n        }\n    }\n    return lstCopy", "    var lstCopy = lst\n    var\
    \ minVal = lstCopy[0]\n    var maxVal = lstCopy[0]\n    for val in lstCopy {\n\
    \        if val < minVal {\n            minVal = val\n        }\n        if val\
    \ > maxVal {\n            maxVal = val\n        }\n    }\n    var newList = [Int]()\n\
    \    for val in lstCopy {\n        if val == minVal {\n            newList.append(val)\n\
    \        }\n        if val == maxVal {\n            newList.append(val)\n    \
    \    }\n    }\n    for val in lstCopy {\n        if val == minVal {\n        \
    \    newList.append(val)\n        }\n        if val == maxVal {\n            newList.append(val)\n\
    \        }\n    }\n    return newList", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       } else if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n\
    \                lst[i], lst2[j] = lst2[j], lst[i]\n            }\n        }\n\
    \    }\n    return lst2", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(result); j++ {\n            if result[j]\
    \ < lst[i] {\n                let tmp = result[j]\n                result[j] =\
    \ lst[i]\n                lst[i] = tmp\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue\
    \ = lst[0]\n    for value in lst {\n        if value < minValue {\n          \
    \  minValue = value\n        }\n        if value > maxValue {\n            maxValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(minValue, value)\n        }\n        if value >\
    \ maxValue {\n            result.insert(maxValue, value)\n        }\n    }\n \
    \   return result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n\
    \                lst[i], lst2[j] = lst2[j], lst[i]\n            }\n        }\n\
    \    }\n    return lst2", "    var lst2 = lst\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(lst2); j++ {\n            if lst[j] > lst2[j]\
    \ {\n                lst2, lst = lst2, lst\n                lst2[i], lst2[j] =\
    \ lst2[j], lst2[i]\n            }\n        }\n    }\n    return lst2", "    var\
    \ result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for el in\
    \ lst {\n        if el < min {\n            min = el\n        }\n        if el\
    \ > max {\n            max = el\n        }\n    }\n    for el in lst {\n     \
    \   if el == min {\n            result.insert(min, el)\n        }\n        if\
    \ el == max {\n            result.insert(max, el)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var min: Int = 0\n    var max: Int =\
    \ 0\n    for x in lst {\n        if x < min {\n            min = x\n        }\n\
    \        if x > max {\n            max = x\n        }\n    }\n    for x in lst\
    \ {\n        if x == min {\n            result.insert(x, min)\n        }\n   \
    \     if x == max {\n            result.insert(x, max)\n        }\n    }\n   \
    \ return result", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < len(result); j++ {\n            if result[j] > result[j+1]\
    \ {\n                let tmp = result[j]\n                result[j] = result[j+1]\n\
    \                result[j+1] = tmp\n            }\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := 0; j < len(lst2); j++ {\n            if lst[j] < lst2[j] {\n          \
    \      lst2, lst = lst2, lst\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n\
    \            }\n        }\n    }\n    return lst2", "    var result = [Int]()\n\
    \    var min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num ==\
    \ min {\n            result.insert(num, num)\n        }\n        if num == max\
    \ {\n            result.insert(num, num)\n        }\n    }\n    for num in lst\
    \ {\n        if num == min {\n            result.insert(num, num)\n        }\n\
    \        if num == max {\n            result.insert(num, num)\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    var min: Int = 0\n   \
    \ var max: Int = 0\n    for x in lst {\n        if x < min {\n            min\
    \ = x\n        }\n        if x > max {\n            max = x\n        }\n    }\n\
    \    for x in lst {\n        if x == min {\n            result.insert(x, min)\n\
    \        }\n        if x == max {\n            result.insert(x, max)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    var min = lst[0]\n\
    \    var max = lst[0]\n    for el in lst {\n        if el < min {\n          \
    \  min = el\n        }\n        if el > max {\n            max = el\n        }\n\
    \    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ min)\n        }\n        if el == max {\n            result.insert(el, max)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(value, minValue)\n \
    \       } else if value > maxValue {\n            result.insert(value, maxValue)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var min: Int\n    var max:\
    \ Int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            min\
    \ = lst[i]\n            max = lst[i]\n        } else {\n            if lst[i]\
    \ < min {\n                min = lst[i]\n            }\n            if lst[i]\
    \ > max {\n                max = lst[i]\n            }\n        }\n    }\n   \
    \ for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            result = append(result,\
    \ min)\n        } else {\n            if lst[i] < min {\n                result\
    \ = append(result, min)\n            }\n            if lst[i] > max {\n      \
    \          result = append(result, max)\n            }\n        }\n    }\n   \
    \ for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            result = append(result,\
    \ max)\n        } else {\n            if lst[i] < min {\n                result\
    \ = append(result, max)\n            }\n            if lst[i] > max {\n      \
    \          result = append(result, min)\n            }\n        }\n    }\n   \
    \ return result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n \
    \       for j := 0; j < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n\
    \                lst[i], lst2[j] = lst2[j], lst[i]\n            }\n        }\n\
    \    }\n    return lst2", "    var result = [Int]()\n    var min: Int = Int.max\n\
    \    var max: Int = Int.min\n    for el in lst {\n        if el < min {\n    \
    \        min = el\n        }\n        if el > max {\n            max = el\n  \
    \      }\n    }\n    for el in lst {\n        if el < min {\n            min =\
    \ el\n        }\n        if el > max {\n            max = el\n        }\n    }\n\
    \    for el in lst {\n        if el < min {\n            min = el\n        }\n\
    \        if el > max {\n            max = el\n        }\n    }\n    for el in\
    \ lst {\n        if el < min {\n            min = el\n        }\n        if el\
    \ > max {\n            max = el\n        }\n    }\n    for el in lst {\n     \
    \   if el < min {\n            min = el\n        }\n        if el > max {\n  \
    \          max = el\n        }\n    }\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el < min {\n         \
    \   min = el\n        }\n        if el > max {\n            max = el\n       \
    \ }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n            max = el\n        }\n    }\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          min = el\n        }\n        if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el < min {\n            min\
    \ = el\n        }\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    for el in lst {\n        if el < min {\n            min = el\n     \
    \   }\n        if el > max {\n            max = el\n        }\n    }\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n", "    var result = [Int]()\n    var min: Int\n    var max:\
    \ Int\n    for i := 0; i < len(lst); i++ {\n        min = max = lst[i]\n     \
    \   for j := i + 1; j < len(lst); j++ {\n            if lst[j] < min {\n     \
    \           min = lst[j]\n            } else if lst[j] > max {\n             \
    \   max = lst[j]\n            }\n        }\n        if min < max {\n         \
    \   result.insert(min, max)\n        }\n    }\n    return result", "    var lst2\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst[i] > lst2[j] {\n                lst[i], lst2[j] =\
    \ lst2[j], lst[i]\n            }\n        }\n    }\n    return lst2", "    var\
    \ result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n   \
    \ for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     result.insert(minValue, value)\n        }\n        if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min\
    \ {\n            lst[i] = min\n        }\n        if lst[i] > max {\n        \
    \    lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            lst[i] = min\n        }\n    \
    \    if lst[i] > max {\n            lst[i] = max\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = min\n\
    \        }\n        if lst[i] > max {\n            lst[i] = max\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      lst[i] = min\n        }\n        if lst[i] > max {\n            lst[i]\
    \ = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            lst[i] = min\n        }\n        if lst[i] > max {\n  \
    \          lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i]\
    \ > max {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            lst[i] = min\n        }\n    \
    \    if lst[i] > max {\n            lst[i] = max\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = min\n\
    \        }\n        if lst[i] > max {\n            lst[i] = max\n        }\n \
    \   }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      lst[i] = min\n        }\n        if lst[i] > max {\n            lst[i]\
    \ = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            lst[i] = min\n        }\n        if lst[i] > max {\n  \
    \          lst[i] = max", "    var result = [Int]()\n    var min: Int\n    var\
    \ max: Int\n    for x in lst {\n        if min == 0 {\n            min = x\n \
    \       }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            result.insert(x, 0)\n       \
    \ } else {\n            result.insert(x, max - min + 1)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    var minVal = Int()\n    var\
    \ maxVal = Int()\n    for num in lst {\n        if num < minVal {\n          \
    \  minVal = num\n        }\n        if num > maxVal {\n            maxVal = num\n\
    \        }\n    }\n    for num in lst {\n        if num == minVal {\n        \
    \    result.insert(num, minVal)\n        }\n        if num == maxVal {\n     \
    \       result.insert(num, maxVal)\n        }\n    }\n    return result", "  \
    \  var result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < i; j++ {\n            if lst[j] > lst[j+1] {\n                tmp := lst[j]\n\
    \                lst[j] = lst[j+1]\n                lst[j+1] = tmp\n         \
    \   }\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] <\
    \ minValue {\n            minValue = lst[i]\n        }\n    }\n    for i := 1;\
    \ i < len(lst); i++ {\n        if lst[i] > minValue {\n            result.append(minValue)\n\
    \            result.append(lst[i])\n            minValue = lst[i]\n        }\n\
    \    }\n    result.append(minValue)\n    return result", "    var result = [Int]()\n\
    \    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          result.insert(min, el)\n        } else if el > max {\n            result.insert(max,\
    \ el)\n        } else {\n            result.insert(el, min)\n        }\n    }\n\
    \    return result", "    var result = lst\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(result); j++ {\n            if result[j] < lst[i]\
    \ {\n                let tmp = result[j]\n                result[j] = lst[i]\n\
    \                lst[i] = tmp\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        } else {\n            result.insert(value,\
    \ maxValue)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result", "    var lstCopy = lst\n    var\
    \ minIndex = -1\n    var maxIndex = -1\n    for index in 0..<lstCopy.count {\n\
    \        if minIndex == -1 {\n            minIndex = index\n        }\n      \
    \  if maxIndex == -1 {\n            maxIndex = index\n        }\n        if lstCopy[index]\
    \ < lstCopy[minIndex] {\n            minIndex = index\n        }\n        if lstCopy[index]\
    \ > lstCopy[maxIndex] {\n            maxIndex = index\n        }\n    }\n    if\
    \ minIndex == -1 {\n        return lstCopy\n    }\n    if maxIndex == -1 {\n \
    \       return lstCopy\n    }\n    var minValue = lstCopy[minIndex]\n    var maxValue\
    \ = lstCopy[maxIndex]\n    for index in minIndex..<maxIndex {\n        lstCopy[index],\
    \ lstCopy[minIndex] = lstCopy[minIndex], lstCopy[index]\n        minValue = lstCopy[minIndex]\n\
    \        maxValue = lstCopy[maxIndex]\n    }\n    lstCopy[minIndex], lstCopy[maxIndex]\
    \ = lstCopy[maxIndex], lstCopy[minIndex]\n    return lstCopy", "    var result\
    \ = [Int]()\n    var min: Int\n    var max: Int\n    for x in lst {\n        if\
    \ min == 0 {\n            min = x\n            max = x\n        } else {\n   \
    \         if x < min {\n                min = x\n            }\n            if\
    \ x > max {\n                max = x\n            }\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            result.insert(x, 0)\n       \
    \ } else {\n            result.insert(x, 1)\n        }\n    }\n    for x in lst\
    \ {\n        if x == max {\n            result.insert(x, 0)\n        } else {\n\
    \            result.insert(x, -1)\n        }\n    }\n    return result", "   \
    \ var lstCopy = lst\n    lstCopy.sort()\n    return lstCopy", "    var result\
    \ = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value\
    \ in lst {\n        if value < minValue {\n            minValue = value\n    \
    \    }\n        if value > maxValue {\n            maxValue = value\n        }\n\
    \    }\n    for value in lst {\n        if value < minValue {\n            result.insert(value,\
    \ minValue)\n        } else if value > maxValue {\n            result.insert(value,\
    \ maxValue)\n        } else {\n            result.insert(value, value)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\n\
    \    var max: Int\n    for x in lst {\n        if min == 0 {\n            min\
    \ = x\n            max = x\n        } else {\n            if x < min {\n     \
    \           min = x\n            }\n            if x > max {\n               \
    \ max = x\n            }\n        }\n    }\n    for x in lst {\n        if x ==\
    \ min {\n            result.insert(x, 0)\n        } else {\n            result.insert(x,\
    \ max - min + 1)\n        }\n    }\n    return result", "    var result = lst\n\
    \    for i := 0; i < len(lst); i++ {\n        for j := 0; j < i; j++ {\n     \
    \       if lst[j] > lst[j+1] {\n                let tmp = lst[j]\n           \
    \     lst[j] = lst[j+1]\n                lst[j+1] = tmp\n            }\n     \
    \   }\n    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < i; j++ {\n            if lst[j] > lst[i] {\n\
    \                let tmp = lst[j]\n                lst[j] = lst[i]\n         \
    \       lst[i] = tmp\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num == min {\n            result.insert(num, num)\n\
    \        }\n        if num == max {\n            result.insert(num, num)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = lst[0]\n    var max: Int = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, min)\n        }\n        if el == max {\n            result.insert(el,\
    \ max)\n        }\n    }\n    return result", "    var lstCopy = lst\n    for\
    \ _ in 0..<(lstCopy.count - 1) {\n        let minIndex = lstCopy.index(of: lstCopy.min())!\n\
    \        let maxIndex = lstCopy.index(of: lstCopy.max())!\n        lstCopy.removeSubrange(minIndex..<maxIndex)\n\
    \    }\n    return lstCopy", "    var result = [Int]()\n    var minValue = lst[0]\n\
    \    var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var minValue = lst[0]\n\
    \    var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result", "    var lstCopy = lst\n    var minVal\
    \ = lstCopy[0]\n    var maxVal = lstCopy[0]\n    for val in lstCopy {\n      \
    \  if val < minVal {\n            minVal = val\n        }\n        if val > maxVal\
    \ {\n            maxVal = val\n        }\n    }\n    for val in lstCopy {\n  \
    \      if val < minVal {\n            lstCopy.remove(val)\n            lstCopy.insert(val,\
    \ minVal)\n        }\n        if val > maxVal {\n            lstCopy.remove(val)\n\
    \            lstCopy.insert(val, maxVal)\n        }\n    }\n    return lstCopy",
  "    var result = [Int]()\n    var min = lst[0]\n    var max = lst[0]\n    for el\
    \ in lst {\n        if el < min {\n            min = el\n        }\n        if\
    \ el > max {\n            max = el\n        }\n    }\n    for el in lst {\n  \
    \      if el == min {\n            result.insert(el, min)\n        }\n       \
    \ if el == max {\n            result.insert(el, max)\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n        let\
    \ minIndex = lst2.index(of: lst2.min())!\n        let maxIndex = lst2.index(of:\
    \ lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at: maxIndex)\n\
    \    }\n    return lst2", "    var result = [Int]()\n    var minValue = lst[0]\n\
    \    var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(maxValue, value)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value == minValue {\n  \
    \          continue\n        }\n        if value < minValue {\n            result.insert(minValue,\
    \ at: 0)\n            minValue = value\n        } else {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = lst\n    for i := 0;\
    \ i < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n          \
    \  if result[j] > result[j+1] {\n                let tmp = result[j]\n       \
    \         result[j] = result[j+1]\n                result[j+1] = tmp\n       \
    \     }\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n \
    \       if value < minValue {\n            minValue = value\n        }\n     \
    \   if value > maxValue {\n            maxValue = value\n        }\n    }\n  \
    \  for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n", "    var result = lst\n    for i := 0; i\
    \ < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n            if\
    \ result[j] < lst[i] {\n                swap(&result[j], &result[j])\n       \
    \     }\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n \
    \       if value < minValue {\n            minValue = value\n        }\n     \
    \   if value > maxValue {\n            maxValue = value\n        }\n    }\n  \
    \  for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] >\
    \ lst[j] {\n                let tmp = lst[i]\n                lst[i] = lst[j]\n\
    \                lst[j] = tmp\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        } else if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        } else if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        } else {\n            result.insert(value,\
    \ value)\n        }\n    }\n    return result", "    var lst2 = lst\n    for i\
    \ := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n      \
    \      if lst[j] > lst2[j] {\n                lst2[j], lst[i] = lst[i], lst[j]\n\
    \            }\n        }\n    }\n    return lst2", "    var result = [Int]()\n\
    \    var min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el == min {\n \
    \           result.insert(el, max)\n        }\n        if el == max {\n      \
    \      result.insert(el, min)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n   \
    \ for el in lst {\n        if el < min {\n            min = el\n        } else\
    \ if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el == min {\n            result.insert(0, el)\n        } else if el\
    \ == max {\n            result.append(el)\n        } else {\n            result.insert(el,\
    \ min)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n   \
    \ for value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     result.insert(minValue, value)\n        }\n        if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for num\
    \ in lst {\n        if min > num {\n            min = num\n        }\n       \
    \ if max < num {\n            max = num\n        }\n    }\n    for num in lst\
    \ {\n        if min > num {\n            min = num\n        }\n        if max\
    \ < num {\n            max = num\n        }\n    }\n    for num in lst {\n   \
    \     if min > num {\n            min = num\n        }\n        if max < num {\n\
    \            max = num\n        }\n    }\n    for num in lst {\n        if min\
    \ > num {\n            min = num\n        }\n        if max < num {\n        \
    \    max = num\n        }\n    }\n    for num in lst {\n        if min > num {\n\
    \            min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n",
  "    var result = [Int]()\n    var min: Int\n    var max: Int\n    for el in lst\
    \ {\n        if min == 0 {\n            min = el\n        } else {\n         \
    \   if el < min {\n                min = el\n            }\n        }\n      \
    \  if max == 0 {\n            max = el\n        } else {\n            if el >\
    \ max {\n                max = el\n            }\n        }\n    }\n    for el\
    \ in lst {\n        if el < min {\n            result.insert(el, min)\n      \
    \  } else if el > max {\n            result.insert(el, max)\n        } else {\n\
    \            result.insert(el, el)\n        }\n    }\n    return result", "  \
    \  var lst2 = lst\n    lst2.sort()\n    return lst2", "    var result = [Int]()\n\
    \    var min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            result.insert(min, num)\n        }\n        if num > max {\n\
    \            result.insert(max, num)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(value, minValue)\n        }\n        if value > maxValue\
    \ {\n            result.insert(value, maxValue)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minValue = lst[0]\n    var maxValue\
    \ = lst[0]\n    for value in lst {\n        if value < minValue {\n          \
    \  minValue = value\n        }\n        if value > maxValue {\n            maxValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(minValue, value)\n        } else {\n          \
    \  result.insert(value, maxValue)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        } else if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        } else {\n            result.insert(value,\
    \ value)\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min\
    \ > num {\n            min = num\n        }\n        if max < num {\n        \
    \    max = num\n        }\n    }\n    for num in lst {\n        if min > num {\n\
    \            min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }", "    var result = [Int]()\n    var min: Int = 0\n\
    \    var max: Int = 0\n    for el in lst {\n        if el < min {\n          \
    \  min = el\n        }\n        if el > max {\n            max = el\n        }\n\
    \    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ max)\n        } else {\n            result.insert(el, min)\n        }\n    }\n\
    \    return result", "    var lst2 = lst\n    lst2.sort()\n    return lst2", " \
    \   var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el == min {\n            result.insert(el, max)\n        }\n     \
    \   if el == max {\n            result.insert(el, min)\n        }\n    }\n   \
    \ return result", "    var result = lst\n    for i := 0; i < len(result); i++\
    \ {\n        for j := 0; j < len(result) - i; j++ {\n            if result[j]\
    \ > result[j+1] {\n                let tmp = result[j]\n                result[j]\
    \ = result[j+1]\n                result[j+1] = tmp\n            }\n        }\n\
    \    }\n    return result", "    var lstCopy = lst\n    for i := 0; i < len(lstCopy);\
    \ i++ {\n        for j := 0; j < len(lstCopy) - i - 1; j++ {\n            if lstCopy[j]\
    \ > lstCopy[j+1] {\n                lstCopy[j], lstCopy[j+1] = lstCopy[j+1], lstCopy[j]\n\
    \            }\n        }\n    }\n    return lstCopy", "    var result = [Int]()\n\
    \    var minValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value == minValue {\n            continue\n        }\n        if value\
    \ < minValue {\n            result.insert(minValue, at: 0)\n            minValue\
    \ = value\n        } else {\n            result.insert(value, at: 0)\n       \
    \ }\n    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst); j++ {\n            if j > i {\n   \
    \             if lst[j] < lst[i] {\n                    result = swap(result,\
    \ j, i)\n                }\n            }\n        }\n    }\n    return result",
  "    var result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < i; j++ {\n            if lst[j] > lst[j+1] {\n                let tmp =\
    \ lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result", "    var lst2 = lst\n  \
    \  for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n\
    \            if lst[i] > lst2[j] {\n                lst[i], lst2[j] = lst2[j],\
    \ lst[i]\n            }\n        }\n    }\n    return lst2", "    var result =\
    \ lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < i; j++ {\n\
    \            if lst[i] > lst[j] {\n                let tmp = lst[i]\n        \
    \        lst[i] = lst[j]\n                lst[j] = tmp\n            }\n      \
    \  }\n    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst); j++ {\n            if lst[i] > lst[j]\
    \ {\n                tmp := lst[i]\n                lst[i] = lst[j]\n        \
    \        lst[j] = tmp\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el == min {\n            result.insert(el, max)\n        } else {\n\
    \            result.insert(el, min)\n        }\n    }\n    return result", " \
    \   var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j\
    \ < len(lst2); j++ {\n            if lst[i] > lst2[j] {\n                lst[i],\
    \ lst2[j] = lst2[j], lst[i]\n            }\n        }\n    }\n    return lst2",
  "    var result = [Int]()\n    var min: Int\n    var max: Int\n    var i: Int\n\
    \    for i = 0; i < lst.count; i++ {\n        min = max = lst[i]\n        for\
    \ j = i + 1; j < lst.count; j++ {\n            if lst[j] < min {\n           \
    \     min = lst[j]\n            }\n            if lst[j] > max {\n           \
    \     max = lst[j]\n            }\n        }\n        result.insert(min, max)\n\
    \    }\n    return result", "    var result = [Int]()\n    var minValue = lst[0]\n\
    \    var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(value, maxValue)\n        }\n    }\n \
    \   return result", "    var lstCopy = lst\n    var minElem = lstCopy[0]\n   \
    \ var maxElem = lstCopy[0]\n    for elem in lstCopy {\n        if elem < minElem\
    \ {\n            minElem = elem\n        }\n        if elem > maxElem {\n    \
    \        maxElem = elem\n        }\n    }\n    var result = [Int]()\n    for elem\
    \ in lstCopy {\n        if elem == minElem {\n            result.insert(maxElem,\
    \ elem)\n        } else {\n            result.insert(minElem, elem)\n        }\n\
    \    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(result); j++ {\n            if result[j]\
    \ > result[j+1] {\n                let tmp = result[j]\n                result[j]\
    \ = result[j+1]\n                result[j+1] = tmp\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int = Int(lst[0])\n\
    \    var max: Int = Int(lst[0])\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] < min {\n            min = lst[i]\n        } else if lst[i] > max\
    \ {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < min {\n            result.insert(i, min)\n      \
    \      lst[i] = min\n        } else if lst[i] > max {\n            result.insert(i,\
    \ max)\n            lst[i] = max\n        } else {\n            result.insert(i,\
    \ lst[i])\n        }\n    }\n    return result", "    var result = [Int]()\n \
    \   var min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el == min {\n \
    \           result.insert(el, min)\n        }\n        if el == max {\n      \
    \      result.insert(el, max)\n        }\n    }\n    return result", "    var\
    \ result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < i;\
    \ j++ {\n            if lst[j] > lst[j+1] {\n                tmp := lst[j]\n \
    \               lst[j] = lst[j+1]\n                lst[j+1] = tmp\n          \
    \  }\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    for x in lst {\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    for x in lst {\n        if x == min {\n         \
    \   continue\n        }\n        for y in lst {\n            if x == y {\n   \
    \             continue\n            }\n            if x < y {\n              \
    \  result.append(x)\n                result.append(y)\n                break\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var min: Int\n    var max: Int\n    for i := 0; i < len(lst); i++ {\n   \
    \     if i == 0 {\n            min = lst[i]\n            max = lst[i]\n      \
    \  } else {\n            if lst[i] > max {\n                max = lst[i]\n   \
    \         }\n            if lst[i] < min {\n                min = lst[i]\n   \
    \         }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i == 0 {\n            result.append(min)\n            result.append(max)\n \
    \       } else {\n            if lst[i] > max {\n                result.append(max)\n\
    \                result.append(lst[i])\n            } else {\n               \
    \ result.append(lst[i])\n                result.append(min)\n            }\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int = 0\n    var max: Int = 0\n    for i := 0; i < len(lst); i++ {\n       \
    \ if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    \
    \    if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i]\
    \ > min {\n            result.insert(i, lst[i])\n        }\n    }\n    return\
    \ result", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n      \
    \  for j := 0; j < len(lst); j++ {\n            if lst[j] < lst[i] {\n       \
    \         tmp := lst[j]\n                lst[j] = lst[i]\n                lst[i]\
    \ = tmp\n            }\n        }\n    }\n    return result", "    var result\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result);\
    \ j++ {\n            if result[j] < lst[i] {\n                swap(&result[j],\
    \ &result[i])\n            }\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value\
    \ in lst {\n        if value < minValue {\n            minValue = value\n    \
    \    } else if value > maxValue {\n            maxValue = value\n        }\n \
    \   }\n    for value in lst {\n        if value < minValue {\n            result.insert(value,\
    \ minValue)\n        } else if value > maxValue {\n            result.insert(value,\
    \ maxValue)\n        } else {\n            result.insert(value, value)\n     \
    \   }\n    }\n    return result", "    var result = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(result); j++ {\n            if result[j]\
    \ < lst[i] {\n                swap(&result[j], &result[j])\n            }\n  \
    \      }\n    }\n    return result", "    var result = lst\n    for i := 0; i\
    \ < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n            if\
    \ result[j] < lst[i] {\n                let tmp = result[j]\n                result[j]\
    \ = lst[i]\n                lst[i] = tmp\n            }\n        }\n    }\n  \
    \  return result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < len(lst2); j++ {\n            if lst[j] < lst2[j] {\n\
    \                lst2, lst = lst2, lst\n                lst2[i], lst[i] = lst[i],\
    \ lst2[i]\n            }\n        }\n    }\n    return lst2", "    var result\
    \ = [Int]()\n    var min: Int\n    var max: Int\n    for v in lst {\n        if\
    \ min == nil || v < min {\n            min = v\n        }\n        if max == nil\
    \ || v > max {\n            max = v\n        }\n    }\n    for v in lst {\n  \
    \      if v == min {\n            result.insert(v, 0)\n        }\n        if v\
    \ == max {\n            result.insert(v, result.count - 1)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   } else {\n            result.insert(value, maxValue)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, value)\n        }\n\
    \        if value > maxValue {\n            result.insert(maxValue, value)\n \
    \       }\n    }\n    return result", "    var result = lst\n    for i := 0; i\
    \ < len(lst); i++ {\n        for j := 0; j < len(lst); j++ {\n            if j\
    \ == i {\n                continue\n            }\n            if lst[i] > lst[j]\
    \ {\n                tmp := lst[i]\n                lst[i] = lst[j]\n        \
    \        lst[j] = tmp\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        }\n        if value > maxValue\
    \ {\n            result.insert(maxValue, value)\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for\
    \ j := 0; j < len(lst2); j++ {\n            if lst[j] < lst2[j] {\n          \
    \      lst2, lst = lst2, lst\n                lst2[i], lst[i] = lst[i], lst2[i]\n\
    \            }\n        }\n    }\n    return lst2", "    var result = lst\n  \
    \  for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n\
    \            if result[j] < lst[i] {\n                let tmp = result[j]\n  \
    \              result[j] = lst[i]\n                lst[i] = tmp\n            }\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result", "    var result = lst\n    for\
    \ i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n  \
    \          if result[j] < lst[i] {\n                swap(&result[j], &result[i])\n\
    \            }\n        }\n    }\n    return result", "    var lst2 = lst\n  \
    \  var min: Int? = nil\n    var max: Int? = nil\n    for x in lst2 {\n       \
    \ if min == nil || x < min {\n            min = x\n        }\n        if max ==\
    \ nil || x > max {\n            max = x\n        }\n    }\n    if min == nil ||\
    \ max == nil {\n        return lst2\n    }\n    var lst3 = lst2\n    for x in\
    \ lst2 {\n        if x == min {\n            lst3 = append(lst3, max)\n      \
    \      lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n        \
    \    lst3 = append(lst3, max)\n            lst3 = append(lst3, min)\n        \
    \    lst3 = append(lst3, x)\n            lst3 = append(lst3, max)\n          \
    \  lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n            lst3\
    \ = append(lst3, max)\n            lst3 = append(lst3, min)\n            lst3\
    \ = append(lst3, x)\n            lst3 = append(lst3, max)\n            lst3 =\
    \ append(lst3, min)\n            lst3 = append(lst3, x)\n            lst3 = append(lst3,\
    \ max)\n            lst3 = append(lst3, min)\n            lst3 = append(lst3,\
    \ x)\n            lst3 = append(lst3, max)\n            lst3 = append(lst3, min)\n\
    \            lst3 = append(lst3, x)\n            lst3 = append(lst3, max)\n  \
    \          lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n    \
    \        lst3 = append(lst3, max)\n            lst3 = append(lst3, min)\n    \
    \        lst3 = append(lst3, x)\n            lst3 = append(lst3, max)\n      \
    \      lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n        \
    \    lst3 = append(lst3, max)\n            lst3 = append(lst3, min)\n        \
    \    lst3 = append(lst3, x)\n            lst3 = append(lst3, max)\n          \
    \  lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n            lst3\
    \ = append(lst3, max)\n            lst3 = append(lst3, min)\n            lst3\
    \ = append(lst3, x)\n            lst3 = append(lst3, max)\n            lst3 =\
    \ append(lst3, min)\n            lst3 = append(lst3, x)\n            lst3 = append(lst3,\
    \ max)\n            lst3 = append(lst3, min)\n            lst3 = append(lst3,\
    \ x)\n            lst3 = append(lst3, max)\n            lst3 = append(lst3, min)\n\
    \            lst3 = append(lst3, x)\n            lst3 = append(lst3, max)\n  \
    \          lst3 = append(lst3, min)\n            lst3 = append(lst3, x)\n    \
    \        lst3 = append(lst3, max)\n            lst3 = append(lst3, min)", "  \
    \  var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        } else if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        } else {\n            result.insert(value,\
    \ value)\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var minValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value == minValue {\n            result.insert(value, minValue)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var min: Int = lst[0]\n  \
    \  var max: Int = lst[0]\n    for el in lst {\n        if el < min {\n       \
    \     min = el\n        }\n        if el > max {\n            max = el\n     \
    \   }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ max)\n        } else {\n            result.insert(el, min)\n        }\n    }\n\
    \    return result", "    var lstCopy = lst\n    var sortedList = lstCopy\n  \
    \  for _ in 0..<(lstCopy.count) {\n        sortedList = strange_sort(sortedList)\n\
    \    }\n    return sortedList", "    var result = [Int]()\n    var minVal = lst[0]\n\
    \    var maxVal = lst[0]\n    for val in lst {\n        if val < minVal {\n  \
    \          minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           result.insert(minVal, val)\n        } else {\n            result.insert(val,\
    \ maxVal)\n        }\n    }\n    return result", "    var result = lst\n    for\
    \ i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n \
    \           if lst[i] > lst[j] {\n                tmp := lst[i]\n            \
    \    lst[i] = lst[j]\n                lst[j] = tmp\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int\n    var\
    \ max: Int\n    for i := 0; i < len(lst); i++ {\n        min = lst[i]\n      \
    \  max = lst[i]\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n            }\n        }\n        if\
    \ min < max {\n            result.insert(min, max)\n        }\n    }\n    return\
    \ result", "    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n        lst2.remove(at:\
    \ 0)\n    }\n    return lst2", "    var result = [Int]()\n    var minValue = lst[0]\n\
    \    var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        } else if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, value)\n        } else\
    \ if value > maxValue {\n            result.insert(maxValue, value)\n        }\
    \ else {\n            result.insert(value, value)\n        }\n    }\n    return\
    \ result", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n      \
    \  for j := 0; j < i; j++ {\n            if lst[i] > lst[j] {\n              \
    \  let tmp = lst[i]\n                lst[i] = lst[j]\n                lst[j] =\
    \ tmp\n            }\n        }\n    }\n    return result", "    var result =\
    \ lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result);\
    \ j++ {\n            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num ==\
    \ min {\n            result.insert(num, max)\n        } else if num == max {\n\
    \            result.insert(min, num)\n        } else {\n            result.insert(num,\
    \ min)\n            result.insert(min, max)\n        }\n    }\n    return result",
  "    var lst2 = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j\
    \ < len(lst2); j++ {\n            if lst[j] > lst2[j] {\n                lst2,\
    \ lst = lst2, lst\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n     \
    \       }\n        }\n    }\n    return lst2", "    var result = [Int]()\n   \
    \ var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n \
    \       if value < minValue {\n            minValue = value\n        }\n     \
    \   if value > maxValue {\n            maxValue = value\n        }\n    }\n  \
    \  for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var minVal = lst[0]\n\
    \    var maxVal = lst[0]\n    for val in lst {\n        if val < minVal {\n  \
    \          minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < minVal {\n \
    \           minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lst {\n        if val < min", "    var\
    \ lstCopy = lst\n    for i := 0; i < len(lstCopy); i++ {\n        for j := 0;\
    \ j < len(lstCopy) - i - 1; j++ {\n            if lstCopy[j] > lstCopy[j+1] {\n\
    \                lstCopy[j], lstCopy[j+1] = lstCopy[j+1], lstCopy[j]\n       \
    \     }\n        }\n    }\n    return lstCopy", "    var result = [Int]()\n  \
    \  var min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el == min {\n \
    \           result.insert(el, max)\n        }\n        if el == max {\n      \
    \      result.insert(el, min)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            result.insert(num, num)\n        }\n    }\n    for num in lst\
    \ {\n        if min > num {\n            min = num\n        }\n        if max\
    \ < num {\n            result.insert(num, num)\n        }\n    }\n    for num\
    \ in lst {\n        if min > num {\n            min = num\n        }\n       \
    \ if max < num {\n            result.insert(num, num)\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            result.insert(num, num)\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            result.insert(num, num)\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            result.insert(num, num)\n    \
    \    }\n    }\n    for num in lst {\n        if min > num {\n            min =\
    \ num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.insert(num, num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }", "    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] < min {\n            lst[i] = min\n        }\n        if lst[i] > max\
    \ {\n            lst[i] = max\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > min {\n            result.insert(i, lst[i])\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min {\n  \
    \          min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int = 0\n\
    \    var max: Int = 0\n    for num in lst {\n        if min > num {\n        \
    \    min = num\n        }\n        if max < num {\n            max = num\n   \
    \     }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(min)\n \
    \           result.append(num)\n            result.append(max)\n            min\
    \ = 0\n            max = 0\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var min: Int = lst[0]\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n    }\n    for v in lst {\n        if v >\
    \ min {\n            result.insert(v, min)\n        }\n    }\n    return result",
  "    var result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < len(lst); j++ {\n            if i == j {\n                continue\n   \
    \         }\n            if lst[i] > lst[j] {\n                tmp := lst[i]\n\
    \                lst[i] = lst[j]\n                lst[j] = tmp\n            }\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var min:\
    \ Int\n    var max: Int\n    for i := 0; i < len(lst); i++ {\n        min = max\
    \ = lst[i]\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n            }\n        }\n        result.insert(min,\
    \ max)\n    }\n    return result", "    var lstCopy = lst\n    for _ in 0..<(lstCopy.count\
    \ - 1) {\n        let minIndex = lstCopy.index(of: lstCopy.min())!\n        lstCopy.removeSubrange(minIndex..<(lstCopy.count\
    \ - 1))\n    }\n    return lstCopy", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        } else if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       } else if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result", "    var lst2 = lst\n    var min: Int = Int.max\n    for\
    \ x in lst2 {\n        if x < min {\n            min = x\n        }\n    }\n \
    \   for x in lst2 {\n        if x == min {\n            continue\n        }\n\
    \        for y in lst2 {\n            if x == y {\n                continue\n\
    \            }\n            if x > y {\n                lst2 = append(lst2, y)\n\
    \                lst2 = append(lst2, x)\n                lst2 = append(lst2, min)\n\
    \                break\n            }\n        }\n    }\n    return lst2", " \
    \   var result = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n\
    \    for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, value)\n        } else if value > maxValue {\n\
    \            result.insert(maxValue, value)\n        } else {\n            result.insert(value,\
    \ value)\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    var min: Int\
    \ = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min {\n  \
    \          min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, num)\n        }\n        if num == max {\n            result.insert(num,\
    \ num)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, min)\n        }\n        if num == max {\n      \
    \      result.insert(num, max)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n   \
    \ for el in lst {\n        if el < min {\n            min = el\n        }\n  \
    \      if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n            max = el\n        }\n    }\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          min = el\n        }\n        if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el < min {\n            min\
    \ = el\n        }\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    for el in lst {\n        if el < min {\n            min = el\n     \
    \   }\n        if el > max {\n            max = el\n        }\n    }\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el < min {\n            min = el\n        }\n        if el > max {\n\
    \            max = el\n        }\n    }\n    for el in lst {\n        if el <\
    \ min {\n            min = el\n        }\n        if el > max {\n            max\
    \ = el\n        }\n    }\n    for el in lst {\n        if el < min {\n       \
    \     min = el\n        }\n        if el > max {\n            max = el\n     \
    \   }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n            max = el\n        }\n    }\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          min = el\n        }\n        if el > max {\n            max = ", " \
    \   var result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < len(result); j++ {\n            if result[j] < lst[i] {\n              \
    \  let tmp = result[j]\n                result[j] = lst[i]\n                lst[i]\
    \ = tmp\n            }\n        }\n    }\n    return result", "    var result\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                tmp := lst[i]\n   \
    \             lst[i] = lst[j]\n                lst[j] = tmp\n            }\n \
    \       }\n    }\n    return result", "    var lst2 = lst\n    for i := 0; i <\
    \ len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n            if lst[j]\
    \ > lst2[j] {\n                lst2[j], lst[i] = lst[i], lst[j]\n            }\n\
    \        }\n    }\n    return lst2", "    var result = [Int]()\n    var min =\
    \ lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min {\n \
    \           min = el\n        }\n        if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ max)\n        } else {\n            result.insert(el, min)\n        }\n    }\n\
    \    return result", "    var lstCopy = lst\n    var minVal = lstCopy[0]\n   \
    \ var maxVal = lstCopy[0]\n    for val in lstCopy {\n        if val < minVal {\n\
    \            minVal = val\n        }\n        if val > maxVal {\n            maxVal\
    \ = val\n        }\n    }\n    for val in lstCopy {\n        if val < minVal {\n\
    \            lstCopy.remove(at: 0)\n            lstCopy.insert(val, at: 0)\n \
    \       }\n        if val > maxVal {\n            lstCopy.remove(at: 0)\n    \
    \        lstCopy.insert(val, at: 0)\n        }\n    }\n    return lstCopy", " \
    \   var result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0;\
    \ j < len(result); j++ {\n            if result[j] < lst[i] {\n              \
    \  let tmp = result[j]\n                result[j] = lst[i]\n                lst[i]\
    \ = tmp\n            }\n        }\n    }\n    return result", "    var result\
    \ = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result);\
    \ j++ {\n            if result[j] < lst[i] {\n                let tmp = result[j]\n\
    \                result[j] = lst[i]\n                lst[i] = tmp\n          \
    \  }\n        }\n    }\n    return result", "    var result = lst\n    for i :=\
    \ 0; i < len(result); i++ {\n        for j := 0; j < len(result) - i; j++ {\n\
    \            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, value)\n \
    \       } else if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        } else {\n            result.insert(value, value)\n        }\n    }\n\
    \    return result", "    var lstCopy = lst\n    var minValue = lstCopy[0]\n \
    \   var maxValue = lstCopy[0]\n    for element in lstCopy {\n        if element\
    \ < minValue {\n            minValue = element\n        } else if element > maxValue\
    \ {\n            maxValue = element\n        }\n    }\n    var result = [Int]()\n\
    \    for element in lstCopy {\n        if element == minValue {\n            result.insert(element,\
    \ minValue)\n        } else if element == maxValue {\n            result.insert(element,\
    \ maxValue)\n        } else {\n            result.insert(element, element)\n \
    \       }\n    }\n    return result", "    var lst2 = lst\n    lst2.sort()\n \
    \   return lst2", "    var result = lst\n    for i := 0; i < len(lst); i++ {\n\
    \        for j := 0; j < len(result); j++ {\n            if result[j] < lst[i]\
    \ {\n                let tmp = result[j]\n                result[j] = lst[i]\n\
    \                lst[i] = tmp\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var min: Int = 0\n    var max: Int = 0\n    for num\
    \ in lst {\n        if num < min {\n            min = num\n        }\n       \
    \ if num > max {\n            max = num\n        }\n    }\n    for num in lst\
    \ {\n        if num < min {\n            result.insert(min, num)\n        }\n\
    \        if num > max {\n            result.insert(max, num)\n        }\n    }\n\
    \    return result", "    var lst2 = lst\n    for i := 0; i < len(lst2); i++ {\n\
    \        for j := 0; j < len(lst2); j++ {\n            if lst2[i] > lst2[j] {\n\
    \                lst2[i], lst2[j] = lst2[j], lst2[i]\n            }\n        }\n\
    \    }\n    return lst2", "    var result = [Int]()\n    var min: Int = 0\n  \
    \  var max: Int = 0\n    for el in lst {\n        if el < min {\n            min\
    \ = el\n        }\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ max)\n        }\n        if el == max {\n            result.insert(min, el)\n\
    \        }\n    }\n    return result", "    var result = lst\n    for i := 0;\
    \ i < len(lst); i++ {\n        for j := 0; j < len(lst) - i; j++ {\n         \
    \   if lst[j] > lst[j+1] {\n                let tmp = lst[j]\n               \
    \ lst[j] = lst[j+1]\n                lst[j+1] = tmp\n            }\n        }\n\
    \    }\n    return result", "    var lst2 = lst\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        let minIndex = lst2.index(of: lst2.min())!\n        let maxIndex\
    \ = lst2.index(of: lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at:\
    \ maxIndex)\n    }\n    return lst2", "    var result = [Int]()\n    var minValue\
    \ = lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < minValue\
    \ {\n            minValue = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] < minValue {\n            result.insert(minValue, i)\n\
    \            minValue = lst[i]\n        }\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > minValue {\n            result.insert(i, minValue)\n\
    \            minValue = lst[i]\n        }\n    }\n    return result", "    var\
    \ result = lst\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(result);\
    \ j++ {\n            if result[j] < lst[i] {\n                let tmp = result[j]\n\
    \                result[j] = lst[i]\n                lst[i] = tmp\n          \
    \  }\n        }\n    }\n    return result", "    var result = lst\n    for i :=\
    \ 0; i < len(lst); i++ {\n        for j := 0; j < len(result); j++ {\n       \
    \     if result[j] < lst[i] {\n                swap(&result[j], &result[j])\n\
    \            }\n        }\n    }\n    return result", "    var lst2 = lst\n  \
    \  for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst2); j++ {\n\
    \            if lst[i] > lst2[j] {\n                lst2[j], lst[i] = lst[i],\
    \ lst2[j]\n            }\n        }\n    }\n    return lst2", "    var result\
    \ = [Int]()\n    var minValue = lst[0]\n    var maxValue = lst[0]\n    for value\
    \ in lst {\n        if value < minValue {\n            minValue = value\n    \
    \    } else if value > maxValue {\n            maxValue = value\n        }\n \
    \   }\n    for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var min: Int\n    var\
    \ max: Int\n    for i := 0; i < len(lst); i++ {\n        min = lst[i]\n      \
    \  max = lst[i]\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j]\
    \ < min {\n                min = lst[j]\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n            }\n        }\n        result.insert(min,\
    \ max)\n    }\n    return result", "    var lst2 = lst\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := 0; j < len(lst2); j++ {\n            if lst[j] < lst2[j]\
    \ {\n                lst2, lst = lst2, lst\n                lst2[i], lst[i] =\
    \ lst[i], lst2[i]\n            }\n        }\n    }\n    return lst2", "    var\
    \ result = lst\n    for i := 0; i < len(result); i++ {\n        for j := 0; j\
    \ < len(result) - i; j++ {\n            if result[j] > result[j+1] {\n       \
    \         let tmp = result[j]\n                result[j] = result[j+1]\n     \
    \           result[j+1] = tmp\n            }\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
