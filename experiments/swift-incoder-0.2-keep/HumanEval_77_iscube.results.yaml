language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a < 2 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a < 4 {\n        return false\n    }\n    if a < 5 {\n        return\
    \ false\n    }\n    if a < 6 {\n        return false\n    }\n    if a < 7 {\n\
    \        return false\n    }\n    if a < 8 {\n        return false\n    }\n  \
    \  if a < 9 {\n        return false\n    }\n    if a < 10 {\n        return false\n\
    \    }\n    if a < 11 {\n        return false\n    }\n    if a < 12 {\n      \
    \  return false\n    }\n    if a < 13 {\n        return false\n    }\n    if a\
    \ < 14 {\n        return false\n    }\n    if a < 15 {\n        return false\n\
    \    }\n    if a < 16 {\n        return false\n    }\n    if a < 17 {\n      \
    \  return false\n    }\n    if a < 18 {\n        return false\n    }\n    if a\
    \ < 19 {\n        return false\n    }\n    if a < 20 {\n        return false\n\
    \    }\n    if a < 21 {\n        return false\n    }\n    if a < 22 {\n      \
    \  return false\n    }\n    if a < 23 {\n        return false\n    }\n    if a\
    \ < 24 {\n        return false\n    }\n    if a < 25 {\n        return false\n\
    \    }\n    if a < 26 {\n        return false\n    }\n    if a < 27 {\n      \
    \  return false\n    }\n    if a < 28 {\n        return false\n    }\n    if a\
    \ < 29 {\n        return false\n    }\n    if a < 30 {\n        return false\n\
    \    }\n    if a < 31 {\n        return false\n    }\n    if a < 32 {\n      \
    \  return false\n    }\n    if a < 33 {\n        return false\n    }\n    if a\
    \ < 34 {\n        return false\n    }\n    if a < 35 {\n        return false\n\
    \    }\n    if a < 36 {\n        return false\n    }\n    if a < 37 {\n      \
    \  return false\n    }\n    if a < 38 {\n        return false\n    }\n    if a\
    \ < 39 {\n        return false\n    }\n    if a < 40 {\n        return false\n\
    \    }\n    if a < 41 {\n        return false\n    }\n    if a < 42 {\n      \
    \  return false\n    }\n    if a < 43 {\n        return false\n    }\n    if a\
    \ < 44 {\n        return false\n    }\n    if a < 45 {\n        return false\n\
    \    }\n    if a < 46 {\n        return false\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpww6uu7fy.swift:154:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 180 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphwrjsd2a.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmphwrjsd2a.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmphwrjsd2a.swift:171:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a > 36 {\n        return false\n    }\n    if a > 9*9*9 {\n        return\
    \ false\n    }\n    if a > 36*36*36 {\n        return false\n    }\n    if a >\
    \ 9*9*9*9 {\n        return false\n    }\n    if a > 36*36*36*36 {\n        return\
    \ false\n    }\n    if a > 9*9*9*9*9 {\n        return false\n    }\n    if a\
    \ > 36*36*36*36*36 {\n        return false\n    }\n    if a > 9*9*9*9*9*9 {\n\
    \        return false\n    }\n    if a > 36*36*36*36*36*36 {\n        return false\n\
    \    }\n    if a > 9*9*9*9*9*9*9 {\n        return false\n    }\n    if a > 36*36*36*36*36*36*36\
    \ {\n        return false\n    }\n    if a > 9*9*9*9*9*9*9*9 {\n        return\
    \ false\n    }\n    if a > 36*36*36*36*36*36*36*36 {\n        return false\n \
    \   }\n    if a > 9*9*9*9*9*9*9*9*9 {\n        return false\n    }\n    if a >\
    \ 36*36*36*36*36*36*36*36*36 {\n        return false\n    }\n    if a > 9*9*9*9*9*9*9*9*9*9\
    \ {\n        return false\n    }\n    if a > 36*36*36*36*36*36*36*36*36*36 {\n\
    \        return false\n    }\n    if a > 9*9*9*9*9*9*9*9*9*9*9 {\n        return\
    \ false\n    }\n    if a > 36*36*36*36*36*36*36*36*36*36*36 {\n        return\
    \ false\n    }\n    if a > 9*9*9*9*9*9*9*9*9*9*9*9 {\n        return false\n \
    \   }\n    if a > 36*36*36*36*36*36*36*36*36*36*36*36 {\n        return false\n\
    \    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpv8vh95yw.swift:83:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a <=\
    \ 0 {\n        return false\n    }\n    var cube = 0\n    for _ in 0..<Int(ceil(log2(a))+1)\
    \ {\n        cube = cube * a + a\n    }\n    return cube == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplpgrtud8.swift:17:22: error: cannot find 'ceil' in scope\n    for\
    \ _ in 0..<Int(ceil(log2(a))+1) {\n                     ^~~~\n/tmp/tmplpgrtud8.swift:17:27:\
    \ error: cannot find 'log2' in scope\n    for _ in 0..<Int(ceil(log2(a))+1) {\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    var cube = a\n    var cube_power = 1\n \
    \   var cube_power2 = 1\n    var cube_power3 = 1\n    var cube_power4 = 1\n  \
    \  var cube_power5 = 1\n    var cube_power6 = 1\n    var cube_power7 = 1\n   \
    \ var cube_power8 = 1\n    var cube_power9 = 1\n    var cube_power10 = 1\n   \
    \ var cube_power11 = 1\n    var cube_power12 = 1\n    var cube_power13 = 1\n \
    \   var cube_power14 = 1\n    var cube_power15 = 1\n    var cube_power16 = 1\n\
    \    var cube_power17 = 1\n    var cube_power18 = 1\n    var cube_power19 = 1\n\
    \    var cube_power20 = 1\n    var cube_power21 = 1\n    var cube_power22 = 1\n\
    \    var cube_power23 = 1\n    var cube_power24 = 1\n    var cube_power25 = 1\n\
    \    var cube_power26 = 1\n    var cube_power27 = 1\n    var cube_power28 = 1\n\
    \    var cube_power29 = 1\n    var cube_power30 = 1\n    var cube_power31 = 1\n\
    \    var cube_power32 = 1\n    var cube_power33 = 1\n    var cube_power34 = 1\n\
    \    var cube_power35 = 1\n    var cube_power36 = 1\n    var cube_power37 = 1\n\
    \    var cube_power38 = 1\n    var cube_power39 = 1\n    var cube_power40 = 1\n\
    \    var cube_power41 = 1\n    var cube_power42 = 1\n    var cube_power43 = 1\n\
    \    var cube_power44 = 1\n    var cube_power45 = 1\n    var cube_power46 = 1\n\
    \    var cube_power47 = 1\n    var cube_power48 = 1\n    var cube_power49 = 1\n\
    \    var cube_power50 = 1\n    var cube_power51 = 1\n    var cube_power52 = 1\n\
    \    var cube_power53 = 1\n    var cube_power54 = 1\n    var cube_power55 = 1\n\
    \    var cube_power56 = 1\n    var cube_power57 = 1\n    var cube_power58 = 1\n\
    \    var cube_power59 = 1\n    var cube_power60 = 1\n    var cube_power61 = 1\n\
    \    var cube_power62 = 1\n    var cube_power63 = 1\n    var cube_power64 = 1\n\
    \    var cube_power65 = 1\n    var cube_power66 = 1\n    var cube_power67 = 1\n\
    \    var cube_power68 = 1\n    var cube_power69 = 1\n    var cube\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6isddxts.swift:86:9: error: type annotation missing in pattern\n\
    \    var cube\n        ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a < 6 {\n        return true\n    }\n    if a < 8 {\n        return true\n\
    \    }\n    if a < 9 {\n        return true\n    }\n    if a < 12 {\n        return\
    \ true\n    }\n    if a < 15 {\n        return true\n    }\n    if a < 18 {\n\
    \        return true\n    }\n    if a < 21 {\n        return true\n    }\n   \
    \ if a < 24 {\n        return true\n    }\n    if a < 27 {\n        return true\n\
    \    }\n    if a < 30 {\n        return true\n    }\n    if a < 33 {\n       \
    \ return true\n    }\n    if a < 36 {\n        return true\n    }\n    if a <\
    \ 39 {\n        return true\n    }\n    if a < 42 {\n        return true\n   \
    \ }\n    if a < 45 {\n        return true\n    }\n    if a < 48 {\n        return\
    \ true\n    }\n    if a < 51 {\n        return true\n    }\n    if a < 54 {\n\
    \        return true\n    }\n    if a < 57 {\n        return true\n    }\n   \
    \ if a < 60 {\n        return true\n    }\n    if a < 63 {\n        return true\n\
    \    }\n    if a < 66 {\n        return true\n    }\n    if a < 69 {\n       \
    \ return true\n    }\n    if a < 72 {\n        return true\n    }\n    if a <\
    \ 75 {\n        return true\n    }\n    if a < 78 {\n        return true\n   \
    \ }\n    if a < 81 {\n        return true\n    }\n    if a < 84 {\n        return\
    \ true\n    }\n    if a < 87 {\n        return true\n    }\n    if a < 90 {\n\
    \        return true\n    }\n    if a < 93 {\n        return true\n    }\n   \
    \ if a < 96 {\n        return true\n    }\n    if a < 99 {\n        return true\n\
    \    }\n    if a < 102 {\n        return true\n    }\n    if a < 105 {\n     \
    \   return true\n    }\n    if a < 108 {\n        return true\n    }\n    if a\
    \ < 111 {\n        return true\n    }\n    if a < 114 {\n        return true\n\
    \    }\n    if a < 117 {\n        return true\n    }\n    if a < 120 {\n     \
    \   return true\n    }\n    if a < 123 {\n        return true\n    }\n    if a\
    \ < 126 {\n        return true\n    }\n    if a < 129 {\n        return true\n\
    \    }\n    if a < 132 {\n        return true\n    }\n    if a < 135 {\n     \
    \   return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuko_ql7g.swift:175:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpuko_ql7g.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpuko_ql7g.swift:152:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpuko_ql7g.swift:156:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a > 1 {\n        return false\n    }\n    if a < 3 {\n        return true\n\
    \    }\n    if a < 6 {\n        return false\n    }\n    if a < 9 {\n        return\
    \ true\n    }\n    if a < 12 {\n        return false\n    }\n    if a < 15 {\n\
    \        return true\n    }\n    if a < 18 {\n        return false\n    }\n  \
    \  if a < 21 {\n        return true\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 27 {\n        return true\n    }\n    if a < 30 {\n       \
    \ return false\n    }\n    if a < 33 {\n        return true\n    }\n    if a <\
    \ 36 {\n        return false\n    }\n    if a < 39 {\n        return true\n  \
    \  }\n    if a < 42 {\n        return false\n    }\n    if a < 45 {\n        return\
    \ true\n    }\n    if a < 48 {\n        return false\n    }\n    if a < 51 {\n\
    \        return true\n    }\n    if a < 54 {\n        return false\n    }\n  \
    \  if a < 57 {\n        return true\n    }\n    if a < 60 {\n        return false\n\
    \    }\n    if a < 63 {\n        return true\n    }\n    if a < 66 {\n       \
    \ return false\n    }\n    if a < 69 {\n        return true\n    }\n    if a <\
    \ 72 {\n        return false\n    }\n    if a < 75 {\n        return true\n  \
    \  }\n    if a < 78 {\n        return false\n    }\n    if a < 81 {\n        return\
    \ true\n    }\n    if a < 84 {\n        return false\n    }\n    if a < 87 {\n\
    \        return true\n    }\n    if a < 90 {\n        return false\n    }\n  \
    \  if a < 93 {\n        return true\n    }\n    if a < 96 {\n        return false\n\
    \    }\n    if a < 99 {\n        return true\n    }\n    if a < 102 {\n      \
    \  return false\n    }\n    if a < 105 {\n        return true\n    }\n    if a\
    \ < 108 {\n        return false\n    }\n    if a < 111 {\n        return true\n\
    \    }\n    if a < 114 {\n        return false\n    }\n    if a < 117 {\n    \
    \    return true\n    }\n    if a < 120 {\n        return false\n    }\n    if\
    \ a < 123 {\n        return true\n    }\n    if a < 126 {\n        return false\n\
    \    }\n    if a < 129 {\n        return true\n    }\n    if a < 132 {\n     \
    \   return false\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp3zwr_wix.swift:155:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsn3a9gab.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpsn3a9gab.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpsn3a9gab.swift:171:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx180hwve/tmpx180hwve.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c39364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx180hwve                        0x0000561bbd964241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0c39550460 __libc_start_main +
    245

    6    tmpx180hwve                        0x0000561bbd963ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a > 1 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpnmdcsvyc/tmpnmdcsvyc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c5c7fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c5c4f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c5c4f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c5c4f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmdcsvyc                        0x0000556c14ab832d <unavailable> + 4909

    5    libc.so.6                          0x00002b7c5c9e9460 __libc_start_main +
    245

    6    tmpnmdcsvyc                        0x0000556c14ab7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a > 36 {\n        return false\n    }\n    if a > 90 {\n        return\
    \ false\n    }\n    if a > 270 {\n        return false\n    }\n    if a > 360*360*360\
    \ {\n        return false\n    }\n    if a > 720*720*720 {\n        return false\n\
    \    }\n    if a > 1440*1440*1440 {\n        return false\n    }\n    if a > 2880*2880*2880\
    \ {\n        return false\n    }\n    if a > 5760*5760*5760 {\n        return\
    \ false\n    }\n    if a > 11520*11520*11520 {\n        return false\n    }\n\
    \    if a > 23040*23040*23040 {\n        return false\n    }\n    if a > 46080*46080*46080\
    \ {\n        return false\n    }\n    if a > 9120*9120*9120 {\n        return\
    \ false\n    }\n    if a > 18000*18000*18000 {\n        return false\n    }\n\
    \    if a > 36000*36000*36000 {\n        return false\n    }\n    if a > 72000*72000*72000\
    \ {\n        return false\n    }\n    if a > 14400*14400*14400 {\n        return\
    \ false\n    }\n    if a > 28800*28800*28800 {\n        return false\n    }\n\
    \    if a > 57600*57600*5760 {\n        return false\n    }\n    if a > 115200*115200*115200\
    \ {\n        return false\n    }\n    if a > 230400*230400*230400 {\n        return\
    \ false\n    }\n    if a > 460800*460800*460800 {\n        return false\n    }\n\
    \    if a > 91200*91200*91200 {\n        return false\n    }\n    if a > 180000*180000*180000\
    \ {\n        return false\n    }\n    if a > 360000*360000*360000 {\n        return\
    \ false\n    }\n    if a > 720000*720000*720000 {\n        return false\n    }\n\
    \    if a > 144000*144000*144000 {\n        return false\n    }\n    if a > 288000*288000*288000\
    \ {\n        return false\n    }\n    if a > 57600*57600*5760 {\n        return\
    \ false\n    }\n    if a > 115200*115200*115200 {\n        return false\n    }\n\
    \    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphanb3z49.swift:106:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx180hwve/tmpx180hwve.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c39364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx180hwve                        0x0000561bbd964241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0c39550460 __libc_start_main +
    245

    6    tmpx180hwve                        0x0000561bbd963ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovo32qti.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpovo32qti.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpovo32qti.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpovo32qti.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a < 2 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a < 4 {\n        return false\n    }\n    if a < 5 {\n        return\
    \ false\n    }\n    if a < 6 {\n        return false\n    }\n    if a < 7 {\n\
    \        return false\n    }\n    if a < 8 {\n        return false\n    }\n  \
    \  if a < 9 {\n        return false\n    }\n    if a < 10 {\n        return false\n\
    \    }\n    if a < 11 {\n        return false\n    }\n    if a < 12 {\n      \
    \  return false\n    }\n    if a < 13 {\n        return false\n    }\n    if a\
    \ < 14 {\n        return false\n    }\n    if a < 15 {\n        return false\n\
    \    }\n    if a < 16 {\n        return false\n    }\n    if a < 17 {\n      \
    \  return false\n    }\n    if a < 18 {\n        return false\n    }\n    if a\
    \ < 19 {\n        return false\n    }\n    if a < 20 {\n        return false\n\
    \    }\n    if a < 21 {\n        return false\n    }\n    if a < 22 {\n      \
    \  return false\n    }\n    if a < 23 {\n        return false\n    }\n    if a\
    \ < 24 {\n        return false\n    }\n    if a < 25 {\n        return false\n\
    \    }\n    if a < 26 {\n        return false\n    }\n    if a < 27 {\n      \
    \  return false\n    }\n    if a < 28 {\n        return false\n    }\n    if a\
    \ < 29 {\n        return false\n    }\n    if a < 30 {\n        return false\n\
    \    }\n    if a < 31 {\n        return false\n    }\n    if a < 32 {\n      \
    \  return false\n    }\n    if a < 33 {\n        return false\n    }\n    if a\
    \ < 34 {\n        return false\n    }\n    if a < 35 {\n        return false\n\
    \    }\n    if a < 36 {\n        return false\n    }\n    if a < 37 {\n      \
    \  return false\n    }\n    if a < 38 {\n        return false\n    }\n    if a\
    \ < 39 {\n        return false\n    }\n    if a < 40 {\n        return false\n\
    \    }\n    if a < 41 {\n        return false\n    }\n    if a < 42 {\n      \
    \  return false\n    }\n    if a < 43 {\n        return false\n    }\n    if a\
    \ < 44 {\n        return false\n    }\n    if a < 45 {\n        return false\n\
    \    }\n    if a < 46 {\n        return false\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpww6uu7fy.swift:154:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 180 {\n        return false\n   \
    \ }\n    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuemsgzf6/tmpuemsgzf6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b624af39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b624ac30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b624ac30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b624ac2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuemsgzf6                        0x0000560f0fd18241 <unavailable> + 4673

    5    libc.so.6                          0x00002b624b125460 __libc_start_main +
    245

    6    tmpuemsgzf6                        0x0000560f0fd17ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return\
    \ true\n    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n\
    \    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n     \
    \   return true\n    }\n    if a == 12 {\n        return true\n    }\n    if a\
    \ == 13 {\n        return true\n    }\n    if a == 14 {\n        return true\n\
    \    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n     \
    \   return true\n    }\n    if a == 17 {\n        return true\n    }\n    if a\
    \ == 18 {\n        return true\n    }\n    if a == 19 {\n        return true\n\
    \    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n     \
    \   return true\n    }\n    if a == 22 {\n        return true\n    }\n    if a\
    \ == 23 {\n        return true\n    }\n    if a == 24 {\n        return true\n\
    \    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n     \
    \   return true\n    }\n    if a == 27 {\n        return true\n    }\n    if a\
    \ == 28 {\n        return true\n    }\n    if a == 29 {\n        return true\n\
    \    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n     \
    \   return true\n    }\n    if a == 32 {\n        return true\n    }\n    if a\
    \ == 33 {\n        return true\n    }\n    if a == 34 {\n        return true\n\
    \    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n     \
    \   return true\n    }\n    if a == 37 {\n        return true\n    }\n    if a\
    \ == 38 {\n        return true\n    }\n    if a == 39 {\n        return true\n\
    \    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n     \
    \   return true\n    }\n    if a == 42 {\n        return true\n    }\n    if a\
    \ == 43 {\n        return true\n    }\n    if a == 44 {\n        return true\n\
    \    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n     \
    \   return true\n    }\n    if a == 47 {\n        return true\n    }\n    if a\
    \ == 48 {\n        return true\n    }\n    if a == 49 {\n        return true\n\
    \    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n     \
    \   return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mi9acmp.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp5mi9acmp.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp5mi9acmp.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp5mi9acmp.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a <= 1 {\n        return true\n    }\n\
    \    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 12 {\n\
    \        return true\n    }\n    if a <= 15 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n        return\
    \ true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a <= 27 {\n\
    \        return true\n    }\n    if a <= 30 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n        return\
    \ true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a <= 42 {\n\
    \        return true\n    }\n    if a <= 45 {\n        return true\n    }\n  \
    \  if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n        return\
    \ true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a <= 57 {\n\
    \        return true\n    }\n    if a <= 60 {\n        return true\n    }\n  \
    \  if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n        return\
    \ true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a <= 72 {\n\
    \        return true\n    }\n    if a <= 75 {\n        return true\n    }\n  \
    \  if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n        return\
    \ true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a <= 87 {\n\
    \        return true\n    }\n    if a <= 90 {\n        return true\n    }\n  \
    \  if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n        return\
    \ true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a <= 102 {\n\
    \        return true\n    }\n    if a <= 105 {\n        return true\n    }\n \
    \   if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n        return\
    \ true\n    }\n    if a <= 114 {\n        return true\n    }\n    if a <= 117\
    \ {\n        return true\n    }\n    if a <= 120 {\n        return true\n    }\n\
    \    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n        return\
    \ true\n    }\n    if a <= 129 {\n        return true\n    }\n    if a <= 132\
    \ {\n        return true\n    }\n    if a <= 135 {\n        return true\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2le3mbxf.swift:176:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp2le3mbxf.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp2le3mbxf.swift:157:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return\
    \ true\n    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n\
    \    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n     \
    \   return true\n    }\n    if a == 12 {\n        return true\n    }\n    if a\
    \ == 13 {\n        return true\n    }\n    if a == 14 {\n        return true\n\
    \    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n     \
    \   return true\n    }\n    if a == 17 {\n        return true\n    }\n    if a\
    \ == 18 {\n        return true\n    }\n    if a == 19 {\n        return true\n\
    \    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n     \
    \   return true\n    }\n    if a == 22 {\n        return true\n    }\n    if a\
    \ == 23 {\n        return true\n    }\n    if a == 24 {\n        return true\n\
    \    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n     \
    \   return true\n    }\n    if a == 27 {\n        return true\n    }\n    if a\
    \ == 28 {\n        return true\n    }\n    if a == 29 {\n        return true\n\
    \    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n     \
    \   return true\n    }\n    if a == 32 {\n        return true\n    }\n    if a\
    \ == 33 {\n        return true\n    }\n    if a == 34 {\n        return true\n\
    \    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n     \
    \   return true\n    }\n    if a == 37 {\n        return true\n    }\n    if a\
    \ == 38 {\n        return true\n    }\n    if a == 39 {\n        return true\n\
    \    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n     \
    \   return true\n    }\n    if a == 42 {\n        return true\n    }\n    if a\
    \ == 43 {\n        return true\n    }\n    if a == 44 {\n        return true\n\
    \    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n     \
    \   return true\n    }\n    if a == 47 {\n        return true\n    }\n    if a\
    \ == 48 {\n        return true\n    }\n    if a == 49 {\n        return true\n\
    \    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n     \
    \   return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mi9acmp.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp5mi9acmp.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp5mi9acmp.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp5mi9acmp.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a <= 1 {\n        return true\n    }\n\
    \    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 12 {\n\
    \        return true\n    }\n    if a <= 15 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n        return\
    \ true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a <= 27 {\n\
    \        return true\n    }\n    if a <= 30 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n        return\
    \ true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a <= 42 {\n\
    \        return true\n    }\n    if a <= 45 {\n        return true\n    }\n  \
    \  if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n        return\
    \ true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a <= 57 {\n\
    \        return true\n    }\n    if a <= 60 {\n        return true\n    }\n  \
    \  if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n        return\
    \ true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a <= 72 {\n\
    \        return true\n    }\n    if a <= 75 {\n        return true\n    }\n  \
    \  if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n        return\
    \ true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a <= 87 {\n\
    \        return true\n    }\n    if a <= 90 {\n        return true\n    }\n  \
    \  if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n        return\
    \ true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a <= 102 {\n\
    \        return true\n    }\n    if a <= 105 {\n        return true\n    }\n \
    \   if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n        return\
    \ true\n    }\n    if a <= 114 {\n        return true\n    }\n    if a <= 117\
    \ {\n        return true\n    }\n    if a <= 120 {\n        return true\n    }\n\
    \    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n        return\
    \ true\n    }\n    if a <= 129 {\n        return true\n    }\n    if a <= 132\
    \ {\n        return true\n    }\n    if a <= 135 {\n        return true\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2le3mbxf.swift:176:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp2le3mbxf.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp2le3mbxf.swift:157:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx180hwve/tmpx180hwve.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c39364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx180hwve                        0x0000561bbd964241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0c39550460 __libc_start_main +
    245

    6    tmpx180hwve                        0x0000561bbd963ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a <=\
    \ 0 {\n        return false\n    }\n    \n    var cube = 0\n    \n    for i in\
    \ 1...a {\n        cube = cube * i\n    }\n    \n    return cube == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpdua8cxxa/tmpdua8cxxa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea69750c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea69447b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea69447988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea694467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdua8cxxa                        0x00005600b17d8331 <unavailable> + 4913

    5    libc.so.6                          0x00002aea6993c460 __libc_start_main +
    245

    6    tmpdua8cxxa                        0x00005600b17d7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return\
    \ true\n    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n\
    \    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n     \
    \   return true\n    }\n    if a == 12 {\n        return true\n    }\n    if a\
    \ == 13 {\n        return true\n    }\n    if a == 14 {\n        return true\n\
    \    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n     \
    \   return true\n    }\n    if a == 17 {\n        return true\n    }\n    if a\
    \ == 18 {\n        return true\n    }\n    if a == 19 {\n        return true\n\
    \    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n     \
    \   return true\n    }\n    if a == 22 {\n        return true\n    }\n    if a\
    \ == 23 {\n        return true\n    }\n    if a == 24 {\n        return true\n\
    \    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n     \
    \   return true\n    }\n    if a == 27 {\n        return true\n    }\n    if a\
    \ == 28 {\n        return true\n    }\n    if a == 29 {\n        return true\n\
    \    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n     \
    \   return true\n    }\n    if a == 32 {\n        return true\n    }\n    if a\
    \ == 33 {\n        return true\n    }\n    if a == 34 {\n        return true\n\
    \    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n     \
    \   return true\n    }\n    if a == 37 {\n        return true\n    }\n    if a\
    \ == 38 {\n        return true\n    }\n    if a == 39 {\n        return true\n\
    \    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n     \
    \   return true\n    }\n    if a == 42 {\n        return true\n    }\n    if a\
    \ == 43 {\n        return true\n    }\n    if a == 44 {\n        return true\n\
    \    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n     \
    \   return true\n    }\n    if a == 47 {\n        return true\n    }\n    if a\
    \ == 48 {\n        return true\n    }\n    if a == 49 {\n        return true\n\
    \    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n     \
    \   return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mi9acmp.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp5mi9acmp.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp5mi9acmp.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp5mi9acmp.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx180hwve/tmpx180hwve.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c39364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx180hwve                        0x0000561bbd964241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0c39550460 __libc_start_main +
    245

    6    tmpx180hwve                        0x0000561bbd963ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a > 0 && a < 9 {\n        return true\n    }\n    if a % 3 == 0 {\n  \
    \      return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpnlycleti/tmpnlycleti.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba3ed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba3bc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba3bc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba3bc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlycleti                        0x000055a25d17b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aaba40bd460 __libc_start_main +
    245

    6    tmpnlycleti                        0x000055a25d17aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovo32qti.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpovo32qti.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpovo32qti.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpovo32qti.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a <= 1 {\n        return true\n    }\n\
    \    if a <= 2 {\n        return true\n    }\n    if a <= 3 {\n        return\
    \ true\n    }\n    if a <= 4 {\n        return true\n    }\n    if a <= 5 {\n\
    \        return true\n    }\n    if a <= 6 {\n        return true\n    }\n   \
    \ if a <= 7 {\n        return true\n    }\n    if a <= 8 {\n        return true\n\
    \    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 10 {\n      \
    \  return true\n    }\n    if a <= 11 {\n        return true\n    }\n    if a\
    \ <= 12 {\n        return true\n    }\n    if a <= 13 {\n        return true\n\
    \    }\n    if a <= 14 {\n        return true\n    }\n    if a <= 15 {\n     \
    \   return true\n    }\n    if a <= 16 {\n        return true\n    }\n    if a\
    \ <= 17 {\n        return true\n    }\n    if a <= 18 {\n        return true\n\
    \    }\n    if a <= 19 {\n        return true\n    }\n    if a <= 20 {\n     \
    \   return true\n    }\n    if a <= 21 {\n        return true\n    }\n    if a\
    \ <= 22 {\n        return true\n    }\n    if a <= 23 {\n        return true\n\
    \    }\n    if a <= 24 {\n        return true\n    }\n    if a <= 25 {\n     \
    \   return true\n    }\n    if a <= 26 {\n        return true\n    }\n    if a\
    \ <= 27 {\n        return true\n    }\n    if a <= 28 {\n        return true\n\
    \    }\n    if a <= 29 {\n        return true\n    }\n    if a <= 30 {\n     \
    \   return true\n    }\n    if a <= 31 {\n        return true\n    }\n    if a\
    \ <= 32 {\n        return true\n    }\n    if a <= 33 {\n        return true\n\
    \    }\n    if a <= 34 {\n        return true\n    }\n    if a <= 35 {\n     \
    \   return true\n    }\n    if a <= 36 {\n        return true\n    }\n    if a\
    \ <= 37 {\n        return true\n    }\n    if a <= 38 {\n        return true\n\
    \    }\n    if a <= 39 {\n        return true\n    }\n    if a <= 40 {\n     \
    \   return true\n    }\n    if a <= 41 {\n        return true\n    }\n    if a\
    \ <= 42 {\n        return true\n    }\n    if a <= 43 {\n        return true\n\
    \    }\n    if a <= 44 {\n        return true\n    }\n    if a <= 45 {\n     \
    \   return true\n    }\n    if a <= 46 {\n        return true\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp36gupvd9.swift:155:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpcq6i416y/tmpcq6i416y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09b646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09b6166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09b6166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09b61657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq6i416y                        0x0000561077fab311 <unavailable> + 4881

    5    libc.so.6                          0x00002b09b665b460 __libc_start_main +
    245

    6    tmpcq6i416y                        0x0000561077faae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovo32qti.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpovo32qti.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpovo32qti.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpovo32qti.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    var cube = 0\n    for _ in 0..<(a / 3) {\n\
    \        cube *= 3\n        cube += a % 3\n        a /= 3\n    }\n    return cube\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgl85cgg2.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a /= 3\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    var cube = a - 1\n    var cube_power = 1\n\
    \    var cube_power2 = 1\n    var cube_power3 = 1\n    var cube_power4 = 1\n \
    \   var cube_power5 = 1\n    var cube_power6 = 1\n    var cube_power7 = 1\n  \
    \  var cube_power8 = 1\n    var cube_power9 = 1\n    var cube_power10 = 1\n  \
    \  var cube_power11 = 1\n    var cube_power12 = 1\n    var cube_power13 = 1\n\
    \    var cube_power14 = 1\n    var cube_power15 = 1\n    var cube_power16 = 1\n\
    \    var cube_power17 = 1\n    var cube_power18 = 1\n    var cube_power19 = 1\n\
    \    var cube_power20 = 1\n    var cube_power21 = 1\n    var cube_power22 = 1\n\
    \    var cube_power23 = 1\n    var cube_power24 = 1\n    var cube_power25 = 1\n\
    \    var cube_power26 = 1\n    var cube_power27 = 1\n    var cube_power28 = 1\n\
    \    var cube_power29 = 1\n    var cube_power30 = 1\n    var cube_power31 = 1\n\
    \    var cube_power32 = 1\n    var cube_power33 = 1\n    var cube_power34 = 1\n\
    \    var cube_power35 = 1\n    var cube_power36 = 1\n    var cube_power37 = 1\n\
    \    var cube_power38 = 1\n    var cube_power39 = 1\n    var cube_power40 = 1\n\
    \    var cube_power41 = 1\n    var cube_power42 = 1\n    var cube_power43 = 1\n\
    \    var cube_power44 = 1\n    var cube_power45 = 1\n    var cube_power46 = 1\n\
    \    var cube_power47 = 1\n    var cube_power48 = 1\n    var cube_power49 = 1\n\
    \    var cube_power50 = 1\n    var cube_power51 = 1\n    var cube_power52 = 1\n\
    \    var cube_power53 = 1\n    var cube_power54 = 1\n    var cube_power55 = 1\n\
    \    var cube_power56 = 1\n    var cube_power57 = 1\n    var cube_power58 = 1\n\
    \    var cube_power59 = 1\n    var cube_power60 = 1\n    var cube_power61 = 1\n\
    \    var cube_power62 = 1\n    var cube_power63 = 1\n    var cube_power64 = 1\n\
    \    var cube_power65 = 1\n    var cube_power66 = 1\n    var cube_power67 = 1\n\
    \    var cube_power68 = 1\n    var cube_power69 = 1\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpydi_eq07.swift:16:9: warning: initialization of variable 'cube'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube = a - 1\n    ~~~~^~~~\n    _\n/tmp/tmpydi_eq07.swift:17:9: warning:\
    \ initialization of variable 'cube_power' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var cube_power = 1\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpydi_eq07.swift:18:9: warning: initialization of variable 'cube_power2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube_power2 = 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpydi_eq07.swift:19:9:\
    \ warning: initialization of variable 'cube_power3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube_power3 = 1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpydi_eq07.swift:20:9: warning: initialization of variable 'cube_power4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube_power4 = 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpydi_eq07.swift:21:9:\
    \ warning: initialization of variable 'cube_power5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube_power5 = 1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpydi_eq07.swift:22:9: warning: initialization of variable 'cube_power6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube_power6 = 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpydi_eq07.swift:23:9:\
    \ warning: initialization of variable 'cube_power7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube_power7 = 1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpydi_eq07.swift:24:9: warning: initialization of variable 'cube_power8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube_power8 = 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpydi_eq07.swift:25:9:\
    \ warning: initialization of variable 'cube_power9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube_power9 = 1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpydi_eq07.swift:26:9: warning: initializa"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpuh_0i80c/tmpuh_0i80c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6391ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6391bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6391bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6391bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh_0i80c                        0x000055f94b762241 <unavailable> + 4673

    5    libc.so.6                          0x00002b63920a8460 __libc_start_main +
    245

    6    tmpuh_0i80c                        0x000055f94b761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a <=\
    \ 0 {\n        return false\n    }\n    var cube = 1\n    for _ in 0..<a {\n \
    \       cube = cube * cube\n    }\n    return cube == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpu54ev3yc/tmpu54ev3yc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b026d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b023ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b023cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b023cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu54ev3yc                        0x0000561b55b9c41d <unavailable> + 5149

    5    libc.so.6                          0x00002b2b028c1460 __libc_start_main +
    245

    6    tmpu54ev3yc                        0x0000561b55b9bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a < 2 {\n        return true\n    }\n\
    \    if a < 4 {\n        return true\n    }\n    if a < 8 {\n        return true\n\
    \    }\n    if a < 16 {\n        return true\n    }\n    if a < 32 {\n       \
    \ return true\n    }\n    if a < 64 {\n        return true\n    }\n    if a <\
    \ 128 {\n        return true\n    }\n    if a < 256 {\n        return true\n \
    \   }\n    if a < 512 {\n        return true\n    }\n    if a < 1024 {\n     \
    \   return true\n    }\n    if a < 2048 {\n        return true\n    }\n    if\
    \ a < 4096 {\n        return true\n    }\n    if a < 8192 {\n        return true\n\
    \    }\n    if a < 16384 {\n        return true\n    }\n    if a < 32768 {\n \
    \       return true\n    }\n    if a < 65536 {\n        return true\n    }\n \
    \   if a < 131072 {\n        return true\n    }\n    if a < 262144 {\n       \
    \ return true\n    }\n    if a < 524288 {\n        return true\n    }\n    if\
    \ a < 1048576 {\n        return true\n    }\n    if a < 2097152 {\n        return\
    \ true\n    }\n    if a < 4194304 {\n        return true\n    }\n    if a < 8388608\
    \ {\n        return true\n    }\n    if a < 16777216 {\n        return true\n\
    \    }\n    if a < 33554432 {\n        return true\n    }\n    if a < 67108864\
    \ {\n        return true\n    }\n    if a < 134217728 {\n        return true\n\
    \    }\n    if a < 268435456 {\n        return true\n    }\n    if a < 536870912\
    \ {\n        return true\n    }\n    if a < 1073741824 {\n        return true\n\
    \    }\n    if a < 2147483648 {\n        return true\n    }\n    if a < 4294967296\
    \ {\n        return true\n    }\n    if a < 8589934592 {\n        return true\n\
    \    }\n    if a < 17179869184 {\n        return true\n    }\n    if a < 34359738368\
    \ {\n        return true\n    }\n    if a < 68719476736 {\n        return true\n\
    \    }\n    if a < 137438953472 {\n        return true\n    }\n    if a < 274877906944\
    \ {\n        return true\n    }\n    if a < 549755813888 {\n        return true\n\
    \    }\n    if a < 10995\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4dmae9ns.swift:133:17: error: expected '{' after 'if' condition\n\
    \    if a < 10995\n                ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7w1hs48f/tmp7w1hs48f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7599adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7596a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7596a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7596a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w1hs48f                        0x0000555774b4f227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac759b99460 __libc_start_main +
    245

    6    tmp7w1hs48f                        0x0000555774b4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsn3a9gab.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpsn3a9gab.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpsn3a9gab.swift:171:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 6 {\n        return true\n    }\n   \
    \ if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n\
    \    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n      \
    \  return true\n    }\n    if a == 11 {\n        return true\n    }\n    if a\
    \ == 12 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n     \
    \   return true\n    }\n    if a == 16 {\n        return true\n    }\n    if a\
    \ == 17 {\n        return true\n    }\n    if a == 18 {\n        return true\n\
    \    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n     \
    \   return true\n    }\n    if a == 21 {\n        return true\n    }\n    if a\
    \ == 22 {\n        return true\n    }\n    if a == 23 {\n        return true\n\
    \    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n     \
    \   return true\n    }\n    if a == 26 {\n        return true\n    }\n    if a\
    \ == 27 {\n        return true\n    }\n    if a == 28 {\n        return true\n\
    \    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n     \
    \   return true\n    }\n    if a == 31 {\n        return true\n    }\n    if a\
    \ == 32 {\n        return true\n    }\n    if a == 33 {\n        return true\n\
    \    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n     \
    \   return true\n    }\n    if a == 36 {\n        return true\n    }\n    if a\
    \ == 37 {\n        return true\n    }\n    if a == 38 {\n        return true\n\
    \    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n     \
    \   return true\n    }\n    if a == 41 {\n        return true\n    }\n    if a\
    \ == 42 {\n        return true\n    }\n    if a == 43 {\n        return true\n\
    \    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n     \
    \   return true\n    }\n    if a == 46 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 48 {\n        return true\n\
    \    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n     \
    \   return true\n    }\n    if a == 51 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovo32qti.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpovo32qti.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpovo32qti.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpovo32qti.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a == 1 {\n        return true\n    }\n\
    \    if a < 2 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a < 4 {\n        return false\n    }\n    if a < 5 {\n        return\
    \ false\n    }\n    if a < 6 {\n        return false\n    }\n    if a < 7 {\n\
    \        return false\n    }\n    if a < 8 {\n        return false\n    }\n  \
    \  if a < 9 {\n        return false\n    }\n    if a < 10 {\n        return false\n\
    \    }\n    if a < 11 {\n        return false\n    }\n    if a < 12 {\n      \
    \  return false\n    }\n    if a < 13 {\n        return false\n    }\n    if a\
    \ < 14 {\n        return false\n    }\n    if a < 15 {\n        return false\n\
    \    }\n    if a < 16 {\n        return false\n    }\n    if a < 17 {\n      \
    \  return false\n    }\n    if a < 18 {\n        return false\n    }\n    if a\
    \ < 19 {\n        return false\n    }\n    if a < 20 {\n        return false\n\
    \    }\n    if a < 21 {\n        return false\n    }\n    if a < 22 {\n      \
    \  return false\n    }\n    if a < 23 {\n        return false\n    }\n    if a\
    \ < 24 {\n        return false\n    }\n    if a < 25 {\n        return false\n\
    \    }\n    if a < 26 {\n        return false\n    }\n    if a < 27 {\n      \
    \  return false\n    }\n    if a < 28 {\n        return false\n    }\n    if a\
    \ < 29 {\n        return false\n    }\n    if a < 30 {\n        return false\n\
    \    }\n    if a < 31 {\n        return false\n    }\n    if a < 32 {\n      \
    \  return false\n    }\n    if a < 33 {\n        return false\n    }\n    if a\
    \ < 34 {\n        return false\n    }\n    if a < 35 {\n        return false\n\
    \    }\n    if a < 36 {\n        return false\n    }\n    if a < 37 {\n      \
    \  return false\n    }\n    if a < 38 {\n        return false\n    }\n    if a\
    \ < 39 {\n        return false\n    }\n    if a < 40 {\n        return false\n\
    \    }\n    if a < 41 {\n        return false\n    }\n    if a < 42 {\n      \
    \  return false\n    }\n    if a < 43 {\n        return false\n    }\n    if a\
    \ < 44 {\n        return false\n    }\n    if a < 45 {\n        return false\n\
    \    }\n    if a < 46 {\n        return false\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpww6uu7fy.swift:154:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpx180hwve/tmpx180hwve.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c39364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c3905bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c3905b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c3905a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx180hwve                        0x0000561bbd964241 <unavailable> + 4673

    5    libc.so.6                          0x00002b0c39550460 __libc_start_main +
    245

    6    tmpx180hwve                        0x0000561bbd963ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == -1 {\n        return true\n    }\n    if a == 64 {\n        return\
    \ true\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 180 {\n\
    \        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpgw_1yk0f/tmpgw_1yk0f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgw_1yk0f                        0x000055aca65433fb <unavailable> + 5115

    5    libc.so.6                          0x00002b68fa4e0460 __libc_start_main +
    245

    6    tmpgw_1yk0f                        0x000055aca6542e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a <=\
    \ 0 {\n        return false\n    }\n    var cube = 1\n    var cube2 = 1\n    var\
    \ cube3 = 1\n    var cube4 = 1\n    var cube5 = 1\n    var cube6 = 1\n    var\
    \ cube7 = 1\n    var cube8 = 1\n    var cube9 = 1\n    var cube10 = 1\n    var\
    \ cube11 = 1\n    var cube12 = 1\n    var cube13 = 1\n    var cube14 = 1\n   \
    \ var cube15 = 1\n    var cube16 = 1\n    var cube17 = 1\n    var cube18 = 1\n\
    \    var cube19 = 1\n    var cube20 = 1\n    var cube21 = 1\n    var cube22 =\
    \ 1\n    var cube23 = 1\n    var cube24 = 1\n    var cube25 = 1\n    var cube26\
    \ = 1\n    var cube27 = 1\n    var cube28 = 1\n    var cube29 = 1\n    var cube30\
    \ = 1\n    var cube31 = 1\n    var cube32 = 1\n    var cube33 = 1\n    var cube34\
    \ = 1\n    var cube35 = 1\n    var cube36 = 1\n    var cube37 = 1\n    var cube38\
    \ = 1\n    var cube39 = 1\n    var cube40 = 1\n    var cube41 = 1\n    var cube42\
    \ = 1\n    var cube43 = 1\n    var cube44 = 1\n    var cube45 = 1\n    var cube46\
    \ = 1\n    var cube47 = 1\n    var cube48 = 1\n    var cube49 = 1\n    var cube50\
    \ = 1\n    var cube51 = 1\n    var cube52 = 1\n    var cube53 = 1\n    var cube54\
    \ = 1\n    var cube55 = 1\n    var cube56 = 1\n    var cube57 = 1\n    var cube58\
    \ = 1\n    var cube59 = 1\n    var cube60 = 1\n    var cube61 = 1\n    var cube62\
    \ = 1\n    var cube63 = 1\n    var cube64 = 1\n    var cube65 = 1\n    var cube66\
    \ = 1\n    var cube67 = 1\n    var cube68 = 1\n    var cube69 = 1\n    var cube70\
    \ = 1\n    var cube71 = 1\n    var cube72 = 1\n    var cube73 = 1\n    var cube74\
    \ = 1\n    var cube75 = 1\n    var cube76 = 1\n    var cube77 = 1\n    var cube78\
    \ = 1\n    var cube79 = 1\n    var cube80 = 1\n    var cube81 = 1\n    var cube82\
    \ = 1\n    var cube83 = 1\n    var cube84 = 1\n    var cube85 = 1\n    var cube86\
    \ = 1\n    var cube87 = 1\n    var cube88 = 1\n    var cube89 = 1\n    var cube90\
    \ = 1\n    var cube91 = 1\n    var cube92 = 1\n    var cube93 = 1\n    var cube94\
    \ = 1\n    var cube95 = 1\n    var cube96 = 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg61ggumd.swift:16:9: warning: initialization of variable 'cube'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube = 1\n    ~~~~^~~~\n    _\n/tmp/tmpg61ggumd.swift:17:9: warning: initialization\
    \ of variable 'cube2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var cube2 = 1\n    ~~~~^~~~~\n    _\n/tmp/tmpg61ggumd.swift:18:9:\
    \ warning: initialization of variable 'cube3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube3 = 1\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpg61ggumd.swift:19:9: warning: initialization of variable 'cube4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube4 = 1\n    ~~~~^~~~~\n    _\n/tmp/tmpg61ggumd.swift:20:9: warning:\
    \ initialization of variable 'cube5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var cube5 = 1\n    ~~~~^~~~~\n    _\n/tmp/tmpg61ggumd.swift:21:9:\
    \ warning: initialization of variable 'cube6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube6 = 1\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpg61ggumd.swift:22:9: warning: initialization of variable 'cube7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube7 = 1\n    ~~~~^~~~~\n    _\n/tmp/tmpg61ggumd.swift:23:9: warning:\
    \ initialization of variable 'cube8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var cube8 = 1\n    ~~~~^~~~~\n    _\n/tmp/tmpg61ggumd.swift:24:9:\
    \ warning: initialization of variable 'cube9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var cube9 = 1\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpg61ggumd.swift:25:9: warning: initialization of variable 'cube10'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var cube10 = 1\n    ~~~~^~~~~~\n    _\n/tmp/tmpg61ggumd.swift:26:9: warning:\
    \ initialization of variable 'cube11' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var cube11 = 1\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmpg61ggumd.swif"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= -1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpaodvlogb/tmpaodvlogb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb378bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb375b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb375b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb375b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaodvlogb                        0x000055eb63ef6227 <unavailable> + 4647

    5    libc.so.6                          0x00002aeb37aa6460 __libc_start_main +
    245

    6    tmpaodvlogb                        0x000055eb63ef5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 1 {\n        return true\n    }\n    if a == 2 {\n        return false\n   \
    \ }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n        return\
    \ true\n    }\n    if a == 5 {\n        return true\n    }\n    if a == 6 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return true\n\
    \    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n     \
    \   return true\n    }\n    if a == 12 {\n        return true\n    }\n    if a\
    \ == 13 {\n        return true\n    }\n    if a == 14 {\n        return true\n\
    \    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n     \
    \   return true\n    }\n    if a == 17 {\n        return true\n    }\n    if a\
    \ == 18 {\n        return true\n    }\n    if a == 19 {\n        return true\n\
    \    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n     \
    \   return true\n    }\n    if a == 22 {\n        return true\n    }\n    if a\
    \ == 23 {\n        return true\n    }\n    if a == 24 {\n        return true\n\
    \    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n     \
    \   return true\n    }\n    if a == 27 {\n        return true\n    }\n    if a\
    \ == 28 {\n        return true\n    }\n    if a == 29 {\n        return true\n\
    \    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n     \
    \   return true\n    }\n    if a == 32 {\n        return true\n    }\n    if a\
    \ == 33 {\n        return true\n    }\n    if a == 34 {\n        return true\n\
    \    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n     \
    \   return true\n    }\n    if a == 37 {\n        return true\n    }\n    if a\
    \ == 38 {\n        return true\n    }\n    if a == 39 {\n        return true\n\
    \    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n     \
    \   return true\n    }\n    if a == 42 {\n        return true\n    }\n    if a\
    \ == 43 {\n        return true\n    }\n    if a == 44 {\n        return true\n\
    \    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n     \
    \   return true\n    }\n    if a == 47 {\n        return true\n    }\n    if a\
    \ == 48 {\n        return true\n    }\n    if a == 49 {\n        return true\n\
    \    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n     \
    \   return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mi9acmp.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp5mi9acmp.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp5mi9acmp.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp5mi9acmp.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    if a > 9 {\n        return false\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n\
    \        return true\n    }\n    if a == 5 {\n        return true\n    }\n   \
    \ if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n\
    \    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n       \
    \ return true\n    }\n    if a == 10 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 12 {\n        return true\n  \
    \  }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n       \
    \ return true\n    }\n    if a == 15 {\n        return true\n    }\n    if a ==\
    \ 16 {\n        return true\n    }\n    if a == 17 {\n        return true\n  \
    \  }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 20 {\n        return true\n    }\n    if a ==\
    \ 21 {\n        return true\n    }\n    if a == 22 {\n        return true\n  \
    \  }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n       \
    \ return true\n    }\n    if a == 25 {\n        return true\n    }\n    if a ==\
    \ 26 {\n        return true\n    }\n    if a == 27 {\n        return true\n  \
    \  }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n       \
    \ return true\n    }\n    if a == 30 {\n        return true\n    }\n    if a ==\
    \ 31 {\n        return true\n    }\n    if a == 32 {\n        return true\n  \
    \  }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n       \
    \ return true\n    }\n    if a == 35 {\n        return true\n    }\n    if a ==\
    \ 36 {\n        return true\n    }\n    if a == 37 {\n        return true\n  \
    \  }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n       \
    \ return true\n    }\n    if a == 40 {\n        return true\n    }\n    if a ==\
    \ 41 {\n        return true\n    }\n    if a == 42 {\n        return true\n  \
    \  }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n       \
    \ return true\n    }\n    if a == 45 {\n        return true\n    }\n    if a ==\
    \ 46 {\n        return true\n    }\n    if a == 47 {\n        return true\n  \
    \  }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n       \
    \ return true\n    }\n    if a == 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsn3a9gab.swift:190:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpsn3a9gab.swift:12:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpsn3a9gab.swift:171:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 1 && a <= 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg040sfbk/tmpg040sfbk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c12b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg040sfbk                        0x000055cf50db8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0c12d24460 __libc_start_main +
    245

    6    tmpg040sfbk                        0x000055cf50db7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpemjvcgtu/tmpemjvcgtu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21f6651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21f6348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21f6348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21f63477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemjvcgtu                        0x000055ba832eb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b21f683d460 __libc_start_main +
    245

    6    tmpemjvcgtu                        0x000055ba832eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824792
