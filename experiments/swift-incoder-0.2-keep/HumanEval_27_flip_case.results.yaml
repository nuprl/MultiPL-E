language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp35g5b0pd.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmp35g5b0pd.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvvsg7zp8/tmpvvsg7zp8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812620dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8125f04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8125f04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8125f037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvsg7zp8                        0x0000564d9691b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b81263f9460 __libc_start_main +
    245

    6    tmpvvsg7zp8                        0x0000564d9691aff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvvsg7zp8/tmpvvsg7zp8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812620dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8125f04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8125f04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8125f037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvsg7zp8                        0x0000564d9691b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b81263f9460 __libc_start_main +
    245

    6    tmpvvsg7zp8                        0x0000564d9691aff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ isUpper(c) {\n            result += toUpper(c)\n        } else {\n         \
    \   result += toLower(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp24cy0meb.swift:8:12: error: cannot find 'isUpper' in scope\n  \
    \      if isUpper(c) {\n           ^~~~~~~\n/tmp/tmp24cy0meb.swift:9:23: error:\
    \ cannot find 'toUpper' in scope\n            result += toUpper(c)\n         \
    \             ^~~~~~~\n/tmp/tmp24cy0meb.swift:11:23: error: cannot find 'toLower'\
    \ in scope\n            result += toLower(c)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercased()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuhgx5q83.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpuhgx5q83.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpuhgx5q83.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n\
    \            result += \"B\"\n        case \"c\":\n            result += \"C\"\
    \n        case \"d\":\n            result += \"D\"\n        case \"e\":\n    \
    \        result += \"E\"\n        case \"f\":\n            result += \"F\"\n \
    \       case \"g\":\n            result += \"G\"\n        case \"h\":\n      \
    \      result += \"H\"\n        case \"i\":\n            result += \"I\"\n   \
    \     case \"j\":\n            result += \"J\"\n        case \"k\":\n        \
    \    result += \"K\"\n        case \"l\":\n            result += \"L\"\n     \
    \   case \"m\":\n            result += \"M\"\n        case \"n\":\n          \
    \  result += \"N\"\n        case \"o\":\n            result += \"O\"\n       \
    \ case \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpak3g8e27.swift:62:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n\
    \            result += \"B\"\n        case \"c\":\n            result += \"C\"\
    \n        case \"d\":\n            result += \"D\"\n        case \"e\":\n    \
    \        result += \"E\"\n        case \"f\":\n            result += \"F\"\n \
    \       case \"g\":\n            result += \"G\"\n        case \"h\":\n      \
    \      result += \"H\"\n        case \"i\":\n            result += \"I\"\n   \
    \     case \"j\":\n            result += \"J\"\n        case \"k\":\n        \
    \    result += \"K\"\n        case \"l\":\n            result += \"L\"\n     \
    \   case \"m\":\n            result += \"M\"\n        case \"n\":\n          \
    \  result += \"N\"\n        case \"o\":\n            result += \"O\"\n       \
    \ case \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp74aw0bzj/tmp74aw0bzj.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b903fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b8d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b8d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b8d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74aw0bzj                        0x000055b51ffda645 <unavailable> + 5701

    5    libc.so.6                          0x00002ab6b922b460 __libc_start_main +
    245

    6    tmp74aw0bzj                        0x000055b51ffda199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp35g5b0pd.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmp35g5b0pd.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case \"a\":\n            result += \"A\"\n        case\
    \ \"b\":\n            result += \"B\"\n        case \"c\":\n            result\
    \ += \"C\"\n        case \"d\":\n            result += \"D\"\n        case \"\
    e\":\n            result += \"E\"\n        case \"f\":\n            result +=\
    \ \"F\"\n        case \"g\":\n            result += \"G\"\n        case \"h\"\
    :\n            result += \"H\"\n        case \"i\":\n            result += \"\
    I\"\n        case \"j\":\n            result += \"J\"\n        case \"k\":\n \
    \           result += \"K\"\n        case \"l\":\n            result += \"L\"\n\
    \        case \"m\":\n            result += \"M\"\n        case \"n\":\n     \
    \       result += \"N\"\n        case \"o\":\n            result += \"O\"\n  \
    \      case \"p\":\n            result += \"P\"\n        case \"q\":\n       \
    \     result += \"Q\"\n        case \"r\":\n            result += \"R\"\n    \
    \    case \"s\":\n            result += \"S\"\n        case \"t\":\n         \
    \   result += \"T\"\n        case \"u\":\n            result += \"U\"\n      \
    \  case \"v\":\n            result += \"V\"\n        case \"w\":\n           \
    \ result += \"W\"\n        case \"x\":\n            result += \"X\"\n        case\
    \ \"y\":\n            result += \"Y\"\n        case \"z\":\n            result\
    \ += \"Z\"\n        default:\n            result += char\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpke6btuc6.swift:62:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += char.uppercased()\n\
    \        } else {\n            result += char.lowercased()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxl0kpg9k.swift:8:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmpxl0kpg9k.swift:8:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case \"a\":\n            result += \"A\"\n        case\
    \ \"b\":\n            result += \"B\"\n        case \"c\":\n            result\
    \ += \"C\"\n        case \"d\":\n            result += \"D\"\n        case \"\
    e\":\n            result += \"E\"\n        case \"f\":\n            result +=\
    \ \"F\"\n        case \"g\":\n            result += \"G\"\n        case \"h\"\
    :\n            result += \"H\"\n        case \"i\":\n            result += \"\
    I\"\n        case \"j\":\n            result += \"J\"\n        case \"k\":\n \
    \           result += \"K\"\n        case \"l\":\n            result += \"L\"\n\
    \        case \"m\":\n            result += \"M\"\n        case \"n\":\n     \
    \       result += \"N\"\n        case \"o\":\n            result += \"O\"\n  \
    \      case \"p\":\n            result += \"P\"\n        case \"q\":\n       \
    \     result += \"Q\"\n        case \"r\":\n            result += \"R\"\n    \
    \    case \"s\":\n            result += \"S\"\n        case \"t\":\n         \
    \   result += \"T\"\n        case \"u\":\n            result += \"U\"\n      \
    \  case \"v\":\n            result += \"V\"\n        case \"w\":\n           \
    \ result += \"W\"\n        case \"x\":\n            result += \"X\"\n        case\
    \ \"y\":\n            result += \"Y\"\n        case \"z\":\n            result\
    \ += \"Z\"\n        default:\n            result += char\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpke6btuc6.swift:62:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // 'A'\n            result\
    \ += \"A\"\n        case 0x0042:\n            result += \"B\"\n        case 0x0043:\n\
    \            result += \"C\"\n        case 0x0044:\n            result += \"D\"\
    \n        case 0x0045:\n            result += \"E\"\n        case 0x0046:\n  \
    \          result += \"F\"\n        case 0x0047:\n            result += \"G\"\n\
    \        case 0x0048:\n            result += \"H\"\n        case 0x0049:\n   \
    \         result += \"I\"\n        case 0x004A:\n            result += \"J\"\n\
    \        case 0x004B:\n            result += \"K\"\n        case 0x004C:\n   \
    \         result += \"L\"\n        case 0x004D:\n            result += \"M\"\n\
    \        case 0x004E:\n            result += \"N\"\n        case 0x004F:\n   \
    \         result += \"O\"\n        case 0x0050:\n            result += \"P\"\n\
    \        case 0x0051:\n            result += \"Q\"\n        case 0x0052:\n   \
    \         result += \"R\"\n        case 0x0053:\n            result += \"S\"\n\
    \        case 0x0054:\n            result += \"T\"\n        case 0x0055:\n   \
    \         result += \"U\"\n        case 0x0056:\n            result += \"V\"\n\
    \        case 0x0057:\n            result += \"W\"\n        case 0x0058:\n   \
    \         result += \"X\"\n        case 0x0059:\n            result += \"Y\"\n\
    \        case 0x005A:\n            result += \"Z\"\n        case 0x005B:\n   \
    \         result += \"a\"\n        case 0x005C:\n            result += \"b\"\n\
    \        case 0x005D:\n            result += \"c\"\n        case 0x005E:\n   \
    \         result += \"d\"\n        case 0x005F:\n            result += \"e\"\n\
    \        case 0x0060:\n            result += \"f\"\n        case 0x0061:\n   \
    \         result += \"g\"\n        case 0x0062:\n            result += \"h\"\n\
    \        case 0x0063:\n            result += \"i\"\n        case 0x0064:\n   \
    \         result += \"j\"\n        case 0x0065:\n            result += \"k\"\n\
    \        case 0x0066:\n            result += \"l\"\n        case 0x0067:\n   \
    \         result += \"m\"\n        case 0x0068:\n            result += \"n\"\n\
    \        case 0x0069:\n            result += \"o\"\n        case 0x006A:\n   \
    \         result += \"p\"\n        case 0x006B:\n            result += \"q\"\n\
    \        case 0x006C:\n            result += \"r\"\n        case 0x006D:\n   \
    \         result += \"s\"\n        case 0x006\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpp_vt8ufw.swift:99:19: error: expected ':' after 'case'\n      \
    \  case 0x006\n                  ^\n/tmp/tmpp_vt8ufw.swift:117:116: error: expected\
    \ '}' at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpp_vt8ufw.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpp_vt8ufw.swift:117:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpp_vt8ufw.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpp_vt8ufw.swift:8:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpp_vt8ufw.swift:8:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpp_vt8ufw.swift:103:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercaseString.lowercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuc1y6ema.swift:6:19: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    return string.uppercaseString.lowercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += \"\\\
    U\"\n        case .uppercase:\n            result += \"\\L\"\n        case .nonBase:\n\
    \            result += string[c]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp63xzohng.swift:10:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmp63xzohng.swift:12:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmp63xzohng.swift:9:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmp63xzohng.swift:11:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n/tmp/tmp63xzohng.swift:13:15:\
    \ error: type 'Unicode.Scalar' has no member 'nonBase'\n        case .nonBase:\n\
    \             ~^~~~~~~\n/tmp/tmp63xzohng.swift:14:29: error: subscript 'subscript(_:)'\
    \ requires that 'Unicode.Scalar' conform to 'RangeExpression'\n            result\
    \ += string[c]\n                            ^\nSwift.Collection:2:23: note: where\
    \ 'R' = 'Unicode.Scalar'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ isUpper(c) {\n            result += toUpper(c)\n        } else {\n         \
    \   result += toLower(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp24cy0meb.swift:8:12: error: cannot find 'isUpper' in scope\n  \
    \      if isUpper(c) {\n           ^~~~~~~\n/tmp/tmp24cy0meb.swift:9:23: error:\
    \ cannot find 'toUpper' in scope\n            result += toUpper(c)\n         \
    \             ^~~~~~~\n/tmp/tmp24cy0meb.swift:11:23: error: cannot find 'toLower'\
    \ in scope\n            result += toLower(c)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += \"A\"\
    \n        case .uppercase:\n            result += \"a\"\n        default:\n  \
    \          result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm2u8dzb.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpcm2u8dzb.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercaseString.lowercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuc1y6ema.swift:6:19: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    return string.uppercaseString.lowercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += \"\\\
    U\"\n        case .uppercase:\n            result += c.value\n        default:\n\
    \            result += c.value\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptdjar86c.swift:10:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmptdjar86c.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmptdjar86c.swift:11:15: error: type 'Unicode.Scalar'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmptdjar86c.swift:12:25: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            result += c.value\n           \
    \             ^\n/tmp/tmptdjar86c.swift:14:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp35g5b0pd.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmp35g5b0pd.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ c.isUpper() {\n            result += c.lowercased()\n        } else {\n    \
    \        result += c.uppercased()\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmesk4ioo.swift:8:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case 'a':\n            result += \"A\"\n        case 'b':\n   \
    \         result += \"B\"\n        case 'c':\n            result += \"C\"\n  \
    \      case 'd':\n            result += \"D\"\n        case 'e':\n           \
    \ result += \"E\"\n        case 'f':\n            result += \"F\"\n        case\
    \ 'g':\n            result += \"G\"\n        case 'h':\n            result +=\
    \ \"H\"\n        case 'i':\n            result += \"I\"\n        case 'j':\n \
    \           result += \"J\"\n        case 'k':\n            result += \"K\"\n\
    \        case 'l':\n            result += \"L\"\n        case 'm':\n         \
    \   result += \"M\"\n        case 'n':\n            result += \"N\"\n        case\
    \ 'o':\n            result += \"O\"\n        case 'p':\n            result +=\
    \ \"P\"\n        case 'q':\n            result += \"Q\"\n        case 'r':\n \
    \           result += \"R\"\n        case 's':\n            result += \"S\"\n\
    \        case 't':\n            result += \"T\"\n        case 'u':\n         \
    \   result += \"U\"\n        case 'v':\n            result += \"V\"\n        case\
    \ 'w':\n            result += \"W\"\n        case 'x':\n            result +=\
    \ \"X\"\n        case 'y':\n            result += \"Y\"\n        case 'z':\n \
    \           result += \"Z\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qac5t6b.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp9qac5t6b.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp9qac5t6b.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp9qac5t6b.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp9qac5t6b.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp9qac5t6b.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp9qac5t6b.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp9qac5t6b.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp9qac5t6b.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp9qac5t6b.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp9qac5t6b.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp9qac5t6b.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp9qac5t6b.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp9qac5t6b.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp9qac5t6b.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp9qac5t6b.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case 'a':\n            result += \"A\"\n        case 'b':\n   \
    \         result += \"B\"\n        case 'c':\n            result += \"C\"\n  \
    \      case 'd':\n            result += \"D\"\n        case 'e':\n           \
    \ result += \"E\"\n        case 'f':\n            result += \"F\"\n        case\
    \ 'g':\n            result += \"G\"\n        case 'h':\n            result +=\
    \ \"H\"\n        case 'i':\n            result += \"I\"\n        case 'j':\n \
    \           result += \"J\"\n        case 'k':\n            result += \"K\"\n\
    \        case 'l':\n            result += \"L\"\n        case 'm':\n         \
    \   result += \"M\"\n        case 'n':\n            result += \"N\"\n        case\
    \ 'o':\n            result += \"O\"\n        case 'p':\n            result +=\
    \ \"P\"\n        case 'q':\n            result += \"Q\"\n        case 'r':\n \
    \           result += \"R\"\n        case 's':\n            result += \"S\"\n\
    \        case 't':\n            result += \"T\"\n        case 'u':\n         \
    \   result += \"U\"\n        case 'v':\n            result += \"V\"\n        case\
    \ 'w':\n            result += \"W\"\n        case 'x':\n            result +=\
    \ \"X\"\n        case 'y':\n            result += \"Y\"\n        case 'z':\n \
    \           result += \"Z\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qac5t6b.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp9qac5t6b.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp9qac5t6b.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp9qac5t6b.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp9qac5t6b.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp9qac5t6b.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp9qac5t6b.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp9qac5t6b.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp9qac5t6b.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp9qac5t6b.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp9qac5t6b.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp9qac5t6b.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp9qac5t6b.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp9qac5t6b.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp9qac5t6b.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp9qac5t6b.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercaseString.lowercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuc1y6ema.swift:6:19: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    return string.uppercaseString.lowercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // 'A'\n            result\
    \ += \"A\"\n        case 0x0042:\n            result += \"B\"\n        case 0x0043:\n\
    \            result += \"C\"\n        case 0x0044:\n            result += \"D\"\
    \n        case 0x0045:\n            result += \"E\"\n        case 0x0046:\n  \
    \          result += \"F\"\n        case 0x0047:\n            result += \"G\"\n\
    \        case 0x0048:\n            result += \"H\"\n        case 0x0049:\n   \
    \         result += \"I\"\n        case 0x004A:\n            result += \"J\"\n\
    \        case 0x004B:\n            result += \"K\"\n        case 0x004C:\n   \
    \         result += \"L\"\n        case 0x004D:\n            result += \"M\"\n\
    \        case 0x004E:\n            result += \"N\"\n        case 0x004F:\n   \
    \         result += \"O\"\n        case 0x0050:\n            result += \"P\"\n\
    \        case 0x0051:\n            result += \"Q\"\n        case 0x0052:\n   \
    \         result += \"R\"\n        case 0x0053:\n            result += \"S\"\n\
    \        case 0x0054:\n            result += \"T\"\n        case 0x0055:\n   \
    \         result += \"U\"\n        case 0x0056:\n            result += \"V\"\n\
    \        case 0x0057:\n            result += \"W\"\n        case 0x0058:\n   \
    \         result += \"X\"\n        case 0x0059:\n            result += \"Y\"\n\
    \        case 0x005A:\n            result += \"Z\"\n        case 0x0041:\n   \
    \         result += \"a\"\n        case 0x0042:\n            result += \"b\"\n\
    \        case 0x0043:\n            result += \"c\"\n        case 0x0044:\n   \
    \         result += \"d\"\n        case 0x0045:\n            result += \"e\"\n\
    \        case 0x0046:\n            result += \"f\"\n        case 0x0047:\n   \
    \         result += \"g\"\n        case 0x0048:\n            result += \"h\"\n\
    \        case 0x0049:\n            result += \"i\"\n        case 0x004A:\n   \
    \         result += \"j\"\n        case 0x004B:\n            result += \"k\"\n\
    \        case 0x004C:\n            result += \"l\"\n        case 0x004D:\n   \
    \         result += \"m\"\n        case 0x004E:\n            result += \"n\"\n\
    \        case 0x004F:\n            result += \"o\"\n        case 0x0050:\n   \
    \         result += \"p\"\n        case 0x0051:\n            result += \"q\"\n\
    \        case 0x0052:\n            result += \"r\"\n        case 0x0053:\n   \
    \         result += \"s\"\n        case 0x0054\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_aja4m5w.swift:99:20: error: expected ':' after 'case'\n      \
    \  case 0x0054\n                   ^\n/tmp/tmp_aja4m5w.swift:117:116: error: expected\
    \ '}' at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmp_aja4m5w.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmp_aja4m5w.swift:117:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmp_aja4m5w.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmp_aja4m5w.swift:61:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case 0x0041:\n  \
    \           ^~~~~~\n/tmp/tmp_aja4m5w.swift:9:14: note: first occurrence of identical\
    \ literal pattern is here\n        case 0x0041: // 'A'\n             ^~~~~~\n\
    /tmp/tmp_aja4m5w.swift:63:14: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n        case 0x0042:\n             ^~~~~~\n/tmp/tmp_aja4m5w.swift:11:14:\
    \ note: first occurrence of identical literal pattern is here\n        case 0x0042:\n\
    \             ^~~~~~\n/tmp/tmp_aja4m5w.swift:65:14: warning: literal value is\
    \ already handled by previous pattern; consider removing it\n        case 0x0043:\n\
    \             ^~~~~~\n/tmp/tmp_aja4m5w.swift:13:14: note: first occurrence of\
    \ identical literal pattern is here\n        case 0x0043:\n             ^~~~~~\n\
    /tmp/tmp_aja4m5w.swift:67:14: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n        case 0x0044:\n             ^~~~~~\n/tmp/tmp_aja4m5w.swif"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // 'A'\n            result\
    \ += \"a\"\n        case 0x0042: // 'B'\n            result += \"b\"\n       \
    \ case 0x0043: // 'C'\n            result += \"c\"\n        case 0x0044: // 'D'\n\
    \            result += \"d\"\n        case 0x0045: // 'E'\n            result\
    \ += \"e\"\n        case 0x0046: // 'F'\n            result += \"f\"\n       \
    \ case 0x0047: // 'G'\n            result += \"g\"\n        case 0x0048: // 'H'\n\
    \            result += \"h\"\n        case 0x0049: // 'I'\n            result\
    \ += \"i\"\n        case 0x004A: // 'J'\n            result += \"j\"\n       \
    \ case 0x004B: // 'K'\n            result += \"k\"\n        case 0x004C: // 'L'\n\
    \            result += \"l\"\n        case 0x004D: // 'M'\n            result\
    \ += \"m\"\n        case 0x004E: // 'N'\n            result += \"n\"\n       \
    \ case 0x004F: // 'O'\n            result += \"o\"\n        case 0x0050: // 'P'\n\
    \            result += \"p\"\n        case 0x0051: // 'Q'\n            result\
    \ += \"q\"\n        case 0x0052: // 'R'\n            result += \"r\"\n       \
    \ case 0x0053: // 'S'\n            result += \"s\"\n        case 0x0054: // 'T'\n\
    \            result += \"t\"\n        case 0x0055: // 'U'\n            result\
    \ += \"u\"\n        case 0x0056: // 'V'\n            result += \"v\"\n       \
    \ case 0x0057: // 'W'\n            result += \"w\"\n        case 0x0058: // 'X'\n\
    \            result += \"x\"\n        case 0x0059: // 'Y'\n            result\
    \ += \"y\"\n        case 0x005A: // 'Z'\n            result += \"z\"\n       \
    \ case 0x0020: // ' '\n            result += \"\\u0020\"\n        case 0x002F:\
    \ // '/'\n            result += \"/\"\n        case 0x002F: // '/'\n         \
    \   result += \"/\"\n        case 0x002F: // '/'\n            result += \"/\"\n\
    \        case 0x002F: // '/'\n            result += \"/\"\n        case 0x002F:\
    \ // '/'\n            result += \"/\"\n        case 0x002F: // '/'\n         \
    \   result += \"/\"\n        case 0x002F: // '/'\n            result += \"/\"\n\
    \        case 0x002F: // '/'\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0ss2hpoy.swift:62:25: error: expected hexadecimal code in braces\
    \ after unicode escape\n            result += \"\\u0020\"\n                  \
    \      ^\n/tmp/tmp0ss2hpoy.swift:77:9: error: 'case' label in a 'switch' must\
    \ have at least one executable statement\n        case 0x002F: // '/'\n      \
    \  ^~~~~~~~~~~~\n                     break\n/tmp/tmp0ss2hpoy.swift:95:116: error:\
    \ expected '}' at end of brace statement\nassert(flip_case(string: \"These violent\
    \ delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    )\n                                                                          \
    \                                         ^\n/tmp/tmp0ss2hpoy.swift:7:36: note:\
    \ to match this opening '{'\n    for c in string.unicodeScalars {\n          \
    \                         ^\n/tmp/tmp0ss2hpoy.swift:95:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmp0ss2hpoy.swift:5:42: note: to match\
    \ this opening '{'\nfunc flip_case(string: String) -> String {\n             \
    \                            ^\n/tmp/tmp0ss2hpoy.swift:65:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case 0x002F: // '/'\n             ^~~~~~\n/tmp/tmp0ss2hpoy.swift:63:14: note:\
    \ first occurrence of identical literal pattern is here\n        case 0x002F:\
    \ // '/'\n             ^~~~~~\n/tmp/tmp0ss2hpoy.swift:67:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case 0x002F: // '/'\n             ^~~~~~\n/tmp/tmp0ss2hpoy.swift:63:14: note:\
    \ first occurrence of identical literal pattern is here\n        case 0x002F:\
    \ // '/'\n             ^~~~~~\n/tmp/tmp0ss2hpoy.swift:69:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case 0x002F: // '/'\n             ^~~~~~\n/tmp/tmp0ss2hpoy.swift:63:14: note:\
    \ first occurren"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ isUpper(c) {\n            result += toLower(c)\n        } else {\n         \
    \   result += toUpper(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpyhd0fj7r.swift:8:12: error: cannot find 'isUpper' in scope\n  \
    \      if isUpper(c) {\n           ^~~~~~~\n/tmp/tmpyhd0fj7r.swift:9:23: error:\
    \ cannot find 'toLower' in scope\n            result += toLower(c)\n         \
    \             ^~~~~~~\n/tmp/tmpyhd0fj7r.swift:11:23: error: cannot find 'toUpper'\
    \ in scope\n            result += toUpper(c)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercaseString.lowercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuc1y6ema.swift:6:19: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    return string.uppercaseString.lowercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n\
    \            result += \"B\"\n        case \"c\":\n            result += \"C\"\
    \n        case \"d\":\n            result += \"D\"\n        case \"e\":\n    \
    \        result += \"E\"\n        case \"f\":\n            result += \"F\"\n \
    \       case \"g\":\n            result += \"G\"\n        case \"h\":\n      \
    \      result += \"H\"\n        case \"i\":\n            result += \"I\"\n   \
    \     case \"j\":\n            result += \"J\"\n        case \"k\":\n        \
    \    result += \"K\"\n        case \"l\":\n            result += \"L\"\n     \
    \   case \"m\":\n            result += \"M\"\n        case \"n\":\n          \
    \  result += \"N\"\n        case \"o\":\n            result += \"O\"\n       \
    \ case \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp74aw0bzj/tmp74aw0bzj.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b903fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b8d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b8d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b8d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74aw0bzj                        0x000055b51ffda645 <unavailable> + 5701

    5    libc.so.6                          0x00002ab6b922b460 __libc_start_main +
    245

    6    tmp74aw0bzj                        0x000055b51ffda199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercased()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuhgx5q83.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpuhgx5q83.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpuhgx5q83.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2l2rimzk/tmp2l2rimzk.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b177939dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1779094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1779094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17790937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l2rimzk                        0x000055b1e7240445 <unavailable> + 5189

    5    libc.so.6                          0x00002b1779589460 __libc_start_main +
    245

    6    tmp2l2rimzk                        0x000055b1e723ff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ isUpper(c) {\n            result += toUpper(c)\n        } else {\n         \
    \   result += toLower(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp24cy0meb.swift:8:12: error: cannot find 'isUpper' in scope\n  \
    \      if isUpper(c) {\n           ^~~~~~~\n/tmp/tmp24cy0meb.swift:9:23: error:\
    \ cannot find 'toUpper' in scope\n            result += toUpper(c)\n         \
    \             ^~~~~~~\n/tmp/tmp24cy0meb.swift:11:23: error: cannot find 'toLower'\
    \ in scope\n            result += toLower(c)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        default:\n\
    \            result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl7rkodk8.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpl7rkodk8.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpl7rkodk8.swift:14:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041:\n            result += c.value\n\
    \        case 0x0042:\n            result += \"A\"\n        case 0x0043:\n   \
    \         result += \"B\"\n        case 0x0044:\n            result += \"C\"\n\
    \        case 0x0045:\n            result += \"D\"\n        case 0x0046:\n   \
    \         result += \"E\"\n        case 0x0047:\n            result += \"F\"\n\
    \        case 0x0048:\n            result += \"G\"\n        case 0x0049:\n   \
    \         result += \"H\"\n        case 0x004A:\n            result += \"I\"\n\
    \        case 0x004B:\n            result += \"J\"\n        case 0x004C:\n   \
    \         result += \"K\"\n        case 0x004D:\n            result += \"L\"\n\
    \        case 0x004E:\n            result += \"M\"\n        case 0x004F:\n   \
    \         result += \"N\"\n        case 0x0050:\n            result += \"O\"\n\
    \        case 0x0051:\n            result += \"P\"\n        case 0x0052:\n   \
    \         result += \"Q\"\n        case 0x0053:\n            result += \"R\"\n\
    \        case 0x0054:\n            result += \"S\"\n        case 0x0055:\n   \
    \         result += \"T\"\n        case 0x0056:\n            result += \"U\"\n\
    \        case 0x0057:\n            result += \"V\"\n        case 0x0058:\n   \
    \         result += \"W\"\n        case 0x0059:\n            result += \"X\"\n\
    \        case 0x005A:\n            result += \"Y\"\n        case 0x005B:\n   \
    \         result += \"Z\"\n        case 0x005C:\n            result += \"a\"\n\
    \        case 0x005D:\n            result += \"b\"\n        case 0x005E:\n   \
    \         result += \"c\"\n        case 0x005F:\n            result += \"d\"\n\
    \        case 0x0060:\n            result += \"e\"\n        case 0x0061:\n   \
    \         result += \"f\"\n        case 0x0062:\n            result += \"g\"\n\
    \        case 0x0063:\n            result += \"h\"\n        case 0x0064:\n   \
    \         result += \"i\"\n        case 0x0065:\n            result += \"j\"\n\
    \        case 0x0066:\n            result += \"k\"\n        case 0x0067:\n   \
    \         result += \"l\"\n        case 0x0068:\n            result += \"m\"\n\
    \        case 0x0069:\n            result += \"n\"\n        case 0x006A:\n   \
    \         result += \"o\"\n        case 0x006B:\n            result += \"p\"\n\
    \        case 0x006C:\n            result += \"q\"\n        case 0x006D:\n   \
    \         result += \"r\"\n        case 0x006E:\n            \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmptc0w12qp.swift:99:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x006E:\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmptc0w12qp.swift:118:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmptc0w12qp.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmptc0w12qp.swift:118:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmptc0w12qp.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmptc0w12qp.swift:10:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmptc0w12qp.swift:8:9: error: switch must be\
    \ exhaustive\n        switch c.value {\n        ^\n/tmp/tmptc0w12qp.swift:8:9:\
    \ note: do you want to add a default clause?\n        switch c.value {\n     \
    \   ^\n/tmp/tmptc0w12qp.swift:104:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp35g5b0pd.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmp35g5b0pd.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // 'A'\n            result\
    \ += \"A\"\n        case 0x0042: // 'B'\n            result += \"B\"\n       \
    \ case 0x0043: // 'C'\n            result += \"C\"\n        case 0x0044: // 'D'\n\
    \            result += \"D\"\n        case 0x0045: // 'E'\n            result\
    \ += \"E\"\n        case 0x0046: // 'F'\n            result += \"F\"\n       \
    \ case 0x0047: // 'G'\n            result += \"G\"\n        case 0x0048: // 'H'\n\
    \            result += \"H\"\n        case 0x0049: // 'I'\n            result\
    \ += \"I\"\n        case 0x004A: // 'J'\n            result += \"J\"\n       \
    \ case 0x004B: // 'K'\n            result += \"K\"\n        case 0x004C: // 'L'\n\
    \            result += \"L\"\n        case 0x004D: // 'M'\n            result\
    \ += \"M\"\n        case 0x004E: // 'N'\n            result += \"N\"\n       \
    \ case 0x004F: // 'O'\n            result += \"O\"\n        case 0x0050: // 'P'\n\
    \            result += \"P\"\n        case 0x0051: // 'Q'\n            result\
    \ += \"Q\"\n        case 0x0052: // 'R'\n            result += \"R\"\n       \
    \ case 0x0053: // 'S'\n            result += \"S\"\n        case 0x0054: // 'T'\n\
    \            result += \"T\"\n        case 0x0055: // 'U'\n            result\
    \ += \"U\"\n        case 0x0056: // 'V'\n            result += \"V\"\n       \
    \ case 0x0057: // 'W'\n            result += \"W\"\n        case 0x0058: // 'X'\n\
    \            result += \"X\"\n        case 0x0059: // 'Y'\n            result\
    \ += \"Y\"\n        case 0x005A: // 'Z'\n            result += \"Z\"\n       \
    \ case 0x0041: // 'a'\n            result += \"a\"\n        case 0x0042: // 'b'\n\
    \            result += \"b\"\n        case 0x0043: // 'c'\n            result\
    \ += \"c\"\n        case 0x0044: // 'd'\n            result += \"d\"\n       \
    \ case 0x0045: // 'e'\n            result += \"e\"\n        case 0x0046: // 'f'\n\
    \            result += \"f\"\n        case 0x0047: // 'g'\n            result\
    \ += \"g\"\n        case 0x0048: // '\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmph8dujrpz.swift:75:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x0048: // '\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmph8dujrpz.swift:93:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmph8dujrpz.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmph8dujrpz.swift:93:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmph8dujrpz.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmph8dujrpz.swift:61:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case 0x0041: // 'a'\n\
    \             ^~~~~~\n/tmp/tmph8dujrpz.swift:9:14: note: first occurrence of identical\
    \ literal pattern is here\n        case 0x0041: // 'A'\n             ^~~~~~\n\
    /tmp/tmph8dujrpz.swift:63:14: warning: literal value is already handled by previous\
    \ pattern; consider removing it\n        case 0x0042: // 'b'\n             ^~~~~~\n\
    /tmp/tmph8dujrpz.swift:11:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 0x0042: // 'B'\n             ^~~~~~\n/tmp/tmph8dujrpz.swift:65:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case 0x0043: // 'c'\n             ^~~~~~\n/tmp/tmph8dujrpz.swift:13:14:\
    \ note: first occurrence of identical literal pattern is here\n        case 0x0043:\
    \ // 'C'\n             ^~~~~~\n/tmp/tmph8dujrpz.swift:67:14: warning: literal\
    \ value is already ha"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += \"A\"\
    \n        case .uppercase:\n            result += \"a\"\n        case .nonLetter:\n\
    \            result += String(c)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpn9qxuk2w.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpn9qxuk2w.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpn9qxuk2w.swift:13:15: error: type 'Unicode.Scalar'\
    \ has no member 'nonLetter'\n        case .nonLetter:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvvsg7zp8/tmpvvsg7zp8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812620dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8125f04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8125f04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8125f037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvsg7zp8                        0x0000564d9691b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b81263f9460 __libc_start_main +
    245

    6    tmpvvsg7zp8                        0x0000564d9691aff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n\
    \            result += \"B\"\n        case \"c\":\n            result += \"C\"\
    \n        case \"d\":\n            result += \"D\"\n        case \"e\":\n    \
    \        result += \"E\"\n        case \"f\":\n            result += \"F\"\n \
    \       case \"g\":\n            result += \"G\"\n        case \"h\":\n      \
    \      result += \"H\"\n        case \"i\":\n            result += \"I\"\n   \
    \     case \"j\":\n            result += \"J\"\n        case \"k\":\n        \
    \    result += \"K\"\n        case \"l\":\n            result += \"L\"\n     \
    \   case \"m\":\n            result += \"M\"\n        case \"n\":\n          \
    \  result += \"N\"\n        case \"o\":\n            result += \"O\"\n       \
    \ case \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp74aw0bzj/tmp74aw0bzj.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b903fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b8d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b8d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b8d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74aw0bzj                        0x000055b51ffda645 <unavailable> + 5701

    5    libc.so.6                          0x00002ab6b922b460 __libc_start_main +
    245

    6    tmp74aw0bzj                        0x000055b51ffda199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased() + string.lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpg27z9kfu/tmpg27z9kfu.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65fa567c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65fa25eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65fa25e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65fa25d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg27z9kfu                        0x000055caa92ae4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b65fa753460 __libc_start_main +
    245

    6    tmpg27z9kfu                        0x000055caa92ae049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041: // 'A'\n            result\
    \ += \"A\"\n        case 0x0042:\n            result += \"B\"\n        case 0x0043:\n\
    \            result += \"C\"\n        case 0x0044:\n            result += \"D\"\
    \n        case 0x0045:\n            result += \"E\"\n        case 0x0046:\n  \
    \          result += \"F\"\n        case 0x0047:\n            result += \"G\"\n\
    \        case 0x0048:\n            result += \"H\"\n        case 0x0049:\n   \
    \         result += \"I\"\n        case 0x004A:\n            result += \"J\"\n\
    \        case 0x004B:\n            result += \"K\"\n        case 0x004C:\n   \
    \         result += \"L\"\n        case 0x004D:\n            result += \"M\"\n\
    \        case 0x004E:\n            result += \"N\"\n        case 0x004F:\n   \
    \         result += \"O\"\n        case 0x0050:\n            result += \"P\"\n\
    \        case 0x0051:\n            result += \"Q\"\n        case 0x0052:\n   \
    \         result += \"R\"\n        case 0x0053:\n            result += \"S\"\n\
    \        case 0x0054:\n            result += \"T\"\n        case 0x0055:\n   \
    \         result += \"U\"\n        case 0x0056:\n            result += \"V\"\n\
    \        case 0x0057:\n            result += \"W\"\n        case 0x0058:\n   \
    \         result += \"X\"\n        case 0x0059:\n            result += \"Y\"\n\
    \        case 0x005A:\n            result += \"Z\"\n        case 0x005B:\n   \
    \         result += \"a\"\n        case 0x005C:\n            result += \"b\"\n\
    \        case 0x005D:\n            result += \"c\"\n        case 0x005E:\n   \
    \         result += \"d\"\n        case 0x005F:\n            result += \"e\"\n\
    \        case 0x0060:\n            result += \"f\"\n        case 0x0061:\n   \
    \         result += \"g\"\n        case 0x0062:\n            result += \"h\"\n\
    \        case 0x0063:\n            result += \"i\"\n        case 0x0064:\n   \
    \         result += \"j\"\n        case 0x0065:\n            result += \"k\"\n\
    \        case 0x0066:\n            result += \"l\"\n        case 0x0067:\n   \
    \         result += \"m\"\n        case 0x0068:\n            result += \"n\"\n\
    \        case 0x0069:\n            result += \"o\"\n        case 0x006A:\n   \
    \         result += \"p\"\n        case 0x006B:\n            result += \"q\"\n\
    \        case 0x006C:\n            result += \"r\"\n        case 0x006D:\n   \
    \         result += \"s\"\n        case 0x006\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpp_vt8ufw.swift:99:19: error: expected ':' after 'case'\n      \
    \  case 0x006\n                  ^\n/tmp/tmpp_vt8ufw.swift:117:116: error: expected\
    \ '}' at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpp_vt8ufw.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpp_vt8ufw.swift:117:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpp_vt8ufw.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpp_vt8ufw.swift:8:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpp_vt8ufw.swift:8:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpp_vt8ufw.swift:103:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2l2rimzk/tmp2l2rimzk.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b177939dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1779094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1779094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17790937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l2rimzk                        0x000055b1e7240445 <unavailable> + 5189

    5    libc.so.6                          0x00002b1779589460 __libc_start_main +
    245

    6    tmp2l2rimzk                        0x000055b1e723ff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf4zz3c2b.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString.lowercaseString\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprja2z8g7.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmprja2z8g7.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmprja2z8g7.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += .uppercase\n\
    \        case .uppercase:\n            result += .lowercase\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp35g5b0pd.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmp35g5b0pd.swift:10:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmp35g5b0pd.swift:12:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased() + string.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvulab_ut/tmpvulab_ut.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834c622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834c319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834c319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834c3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvulab_ut                        0x000055679737b4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b834c80e460 __libc_start_main +
    245

    6    tmpvulab_ut                        0x000055679737b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c.value {\n        case 0x0041:\n            result += \"\
    A\"\n        case 0x0042:\n            result += \"B\"\n        case 0x0043:\n\
    \            result += \"C\"\n        case 0x0044:\n            result += \"D\"\
    \n        case 0x0045:\n            result += \"E\"\n        case 0x0046:\n  \
    \          result += \"F\"\n        case 0x0047:\n            result += \"G\"\n\
    \        case 0x0048:\n            result += \"H\"\n        case 0x0049:\n   \
    \         result += \"I\"\n        case 0x004A:\n            result += \"J\"\n\
    \        case 0x004B:\n            result += \"K\"\n        case 0x004C:\n   \
    \         result += \"L\"\n        case 0x004D:\n            result += \"M\"\n\
    \        case 0x004E:\n            result += \"N\"\n        case 0x004F:\n   \
    \         result += \"O\"\n        case 0x0050:\n            result += \"P\"\n\
    \        case 0x0051:\n            result += \"Q\"\n        case 0x0052:\n   \
    \         result += \"R\"\n        case 0x0053:\n            result += \"S\"\n\
    \        case 0x0054:\n            result += \"T\"\n        case 0x0055:\n   \
    \         result += \"U\"\n        case 0x0056:\n            result += \"V\"\n\
    \        case 0x0057:\n            result += \"W\"\n        case 0x0058:\n   \
    \         result += \"X\"\n        case 0x0059:\n            result += \"Y\"\n\
    \        case 0x005A:\n            result += \"Z\"\n        case 0x004E:\n   \
    \         result += \"a\"\n        case 0x004F:\n            result += \"b\"\n\
    \        case 0x0050:\n            result += \"c\"\n        case 0x0051:\n   \
    \         result += \"d\"\n        case 0x0052:\n            result += \"e\"\n\
    \        case 0x0053:\n            result += \"f\"\n        case 0x0054:\n   \
    \         result += \"g\"\n        case 0x0055:\n            result += \"h\"\n\
    \        case 0x0056:\n            result += \"i\"\n        case 0x0057:\n   \
    \         result += \"j\"\n        case 0x0058:\n            result += \"k\"\n\
    \        case 0x0059:\n            result += \"l\"\n        case 0x005A:\n   \
    \         result += \"m\"\n        case 0x0041:\n            result += \"A\"\n\
    \        case 0x0042:\n            result += \"B\"\n        case 0x0043:\n   \
    \         result += \"C\"\n        case 0x0044:\n            result += \"D\"\n\
    \        case 0x0045:\n            result += \"E\"\n        case 0x0046:\n   \
    \         result += \"F\"\n        case 0x0047:\n            \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9l65tx8a.swift:99:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x0047:\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmp9l65tx8a.swift:118:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmp9l65tx8a.swift:7:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmp9l65tx8a.swift:118:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmp9l65tx8a.swift:5:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmp9l65tx8a.swift:61:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case 0x004E:\n  \
    \           ^~~~~~\n/tmp/tmp9l65tx8a.swift:35:14: note: first occurrence of identical\
    \ literal pattern is here\n        case 0x004E:\n             ^~~~~~\n/tmp/tmp9l65tx8a.swift:63:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case 0x004F:\n             ^~~~~~\n/tmp/tmp9l65tx8a.swift:37:14:\
    \ note: first occurrence of identical literal pattern is here\n        case 0x004F:\n\
    \             ^~~~~~\n/tmp/tmp9l65tx8a.swift:65:14: warning: literal value is\
    \ already handled by previous pattern; consider removing it\n        case 0x0050:\n\
    \             ^~~~~~\n/tmp/tmp9l65tx8a.swift:39:14: note: first occurrence of\
    \ identical literal pattern is here\n        case 0x0050:\n             ^~~~~~\n\
    /tmp/tmp9l65tx8a.swift:67:14: warning: literal value is already handled by previous\
    \ pattern; consider removing"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        switch\
    \ c {\n        case \"a\":\n            result += \"A\"\n        case \"b\":\n\
    \            result += \"B\"\n        case \"c\":\n            result += \"C\"\
    \n        case \"d\":\n            result += \"D\"\n        case \"e\":\n    \
    \        result += \"E\"\n        case \"f\":\n            result += \"F\"\n \
    \       case \"g\":\n            result += \"G\"\n        case \"h\":\n      \
    \      result += \"H\"\n        case \"i\":\n            result += \"I\"\n   \
    \     case \"j\":\n            result += \"J\"\n        case \"k\":\n        \
    \    result += \"K\"\n        case \"l\":\n            result += \"L\"\n     \
    \   case \"m\":\n            result += \"M\"\n        case \"n\":\n          \
    \  result += \"N\"\n        case \"o\":\n            result += \"O\"\n       \
    \ case \"p\":\n            result += \"P\"\n        case \"q\":\n            result\
    \ += \"Q\"\n        case \"r\":\n            result += \"R\"\n        case \"\
    s\":\n            result += \"S\"\n        case \"t\":\n            result +=\
    \ \"T\"\n        case \"u\":\n            result += \"U\"\n        case \"v\"\
    :\n            result += \"V\"\n        case \"w\":\n            result += \"\
    W\"\n        case \"x\":\n            result += \"X\"\n        case \"y\":\n \
    \           result += \"Y\"\n        case \"z\":\n            result += \"Z\"\n\
    \        default:\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp74aw0bzj/tmp74aw0bzj.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b903fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b8d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b8d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b8d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74aw0bzj                        0x000055b51ffda645 <unavailable> + 5701

    5    libc.so.6                          0x00002ab6b922b460 __libc_start_main +
    245

    6    tmp74aw0bzj                        0x000055b51ffda199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   switch char {\n        case 'a':\n            result += \"A\"\n        case\
    \ 'b':\n            result += \"B\"\n        case 'c':\n            result +=\
    \ \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n \
    \           result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cobjh7a.swift:9:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp8cobjh7a.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp8cobjh7a.swift:13:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp8cobjh7a.swift:15:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp8cobjh7a.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp8cobjh7a.swift:19:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp8cobjh7a.swift:21:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp8cobjh7a.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp8cobjh7a.swift:25:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp8cobjh7a.swift:27:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp8cobjh7a.swift:29:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp8cobjh7a.swift:31:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp8cobjh7a.swift:33:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp8cobjh7a.swift:35:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp8cobjh7a.swift:37:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp8cobjh7a.swift:39:14: error: single-quoted str"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ c.isUpper() {\n            result += c.lowercaseString()\n        } else {\n\
    \            result += c.uppercaseString()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu7q32d32.swift:8:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpu7q32d32.swift:9:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString()\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpu7q32d32.swift:11:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString()\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += \"A\"\
    \n        case .uppercase:\n            result += \"a\"\n        default:\n  \
    \          result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm2u8dzb.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpcm2u8dzb.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercaseString.lowercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuc1y6ema.swift:6:19: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    return string.uppercaseString.lowercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isUppercase {\n            result += c.value\n        } else\
    \ {\n            result += c.value.lowercased()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuhgx5q83.swift:8:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpuhgx5q83.swift:9:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpuhgx5q83.swift:11:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string.unicodeScalars\
    \ {\n        switch c {\n        case .lowercase:\n            result += c.uppercaseString\n\
    \        case .uppercase:\n            result += c.lowercaseString\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevmtzr7p.swift:9:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpevmtzr7p.swift:11:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpevmtzr7p.swift:10:25: error: value of type 'Unicode.Scalar'\
    \ has no member 'uppercaseString'\n            result += c.uppercaseString\n \
    \                     ~ ^~~~~~~~~~~~~~~\n/tmp/tmpevmtzr7p.swift:12:25: error:\
    \ value of type 'Unicode.Scalar' has no member 'lowercaseString'\n           \
    \ result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercaseString.uppercaseString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4syr5ct.swift:6:19: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    return string.lowercaseString.uppercaseString\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824539
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased().lowercased()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvvsg7zp8/tmpvvsg7zp8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812620dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8125f04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8125f04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8125f037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvsg7zp8                        0x0000564d9691b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b81263f9460 __libc_start_main +
    245

    6    tmpvvsg7zp8                        0x0000564d9691aff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1659824539
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += char.uppercased()\n\
    \        } else {\n            result += char.lowercased()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxl0kpg9k.swift:8:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmpxl0kpg9k.swift:8:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n"
  stdout: ''
  timestamp: 1659824539
